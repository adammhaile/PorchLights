
g:/dev/PorchLights/target/PorchLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a4740  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000bc  20000300  080a4744  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000650  200003bc  200003bc  000403bc  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a4800  080a4800  00034800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a4828  080a4828  00034828  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b584c  00000000  00000000  0003482c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001072e  00000000  00000000  000ea078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014ce9  00000000  00000000  000fa7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002018  00000000  00000000  0010f48f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000033f0  00000000  00000000  001114a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025fe4  00000000  00000000  00114897  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024c0b  00000000  00000000  0013a87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a4b0f  00000000  00000000  0015f486  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bef8  00000000  00000000  00203f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	60 42 0a 08                                         `B..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fc69 	bl	80a3904 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fc6e 	bl	80a391a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4744 	.word	0x080a4744
 80a004c:	200003bc 	.word	0x200003bc
 80a0050:	200003bc 	.word	0x200003bc
 80a0054:	20000a0c 	.word	0x20000a0c
 80a0058:	20000a0c 	.word	0x20000a0c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f8cf 	bl	80a2200 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a46fc 	.word	0x080a46fc
 80a0084:	080a4734 	.word	0x080a4734

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b9a8 	b.w	80a03dc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f891 	bl	80a01b4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b875 	b.w	80a2184 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bddb 	b.w	80a1c54 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bde1 	b.w	80a1c64 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b2:	6810      	ldr	r0, [r2, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z11save_configv>:

    _on_time = String::format("%02d:%02d", cfg.on_hr, cfg.on_min);
    _off_time = String::format("%02d:%02d", cfg.off_hr, cfg.off_min);
}

void save_config() {
 80a00b8:	b508      	push	{r3, lr}
    EEPROM.put(0, cfg);
 80a00ba:	f002 fe83 	bl	80a2dc4 <_Z21__fetch_global_EEPROMv>
}
 80a00be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a00c2:	2214      	movs	r2, #20
 80a00c4:	4901      	ldr	r1, [pc, #4]	; (80a00cc <_Z11save_configv+0x14>)
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	f001 bc2e 	b.w	80a1928 <HAL_EEPROM_Put>
 80a00cc:	200003c0 	.word	0x200003c0

080a00d0 <_Z11load_configv>:
String _cur_time;
bool _is_on = true;

#define CFG_CHECK 7

void load_config() {
 80a00d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a00d2:	4c1e      	ldr	r4, [pc, #120]	; (80a014c <_Z11load_configv+0x7c>)
    EEPROM.get(0, cfg);
 80a00d4:	f002 fe76 	bl	80a2dc4 <_Z21__fetch_global_EEPROMv>
 80a00d8:	2214      	movs	r2, #20
 80a00da:	4621      	mov	r1, r4
 80a00dc:	2000      	movs	r0, #0
 80a00de:	f001 fc1b 	bl	80a1918 <HAL_EEPROM_Get>
    if(cfg.check != CFG_CHECK) {
 80a00e2:	6823      	ldr	r3, [r4, #0]
 80a00e4:	2b07      	cmp	r3, #7
 80a00e6:	d015      	beq.n	80a0114 <_Z11load_configv+0x44>
        cfg.check = CFG_CHECK;
        cfg.tz = -4;
 80a00e8:	f06f 0303 	mvn.w	r3, #3
 80a00ec:	2207      	movs	r2, #7
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

// neopixel library is dumb and doesn't let you change color order
uint32_t CRGB(uint8_t r, uint8_t g, uint8_t b) { return strip.Color(g, r, b); }
 80a00ee:	2100      	movs	r1, #0

void load_config() {
    EEPROM.get(0, cfg);
    if(cfg.check != CFG_CHECK) {
        cfg.check = CFG_CHECK;
        cfg.tz = -4;
 80a00f0:	e884 000c 	stmia.w	r4, {r2, r3}
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

// neopixel library is dumb and doesn't let you change color order
uint32_t CRGB(uint8_t r, uint8_t g, uint8_t b) { return strip.Color(g, r, b); }
 80a00f4:	4608      	mov	r0, r1
 80a00f6:	22ff      	movs	r2, #255	; 0xff
 80a00f8:	f001 fb7f 	bl	80a17fa <_ZN17Adafruit_NeoPixel5ColorEhhh>
    EEPROM.get(0, cfg);
    if(cfg.check != CFG_CHECK) {
        cfg.check = CFG_CHECK;
        cfg.tz = -4;
        cfg.color = C_BLUE;
        cfg.brightness = 64;
 80a00fc:	2340      	movs	r3, #64	; 0x40
 80a00fe:	60e3      	str	r3, [r4, #12]
        cfg.on_hr = 19;
 80a0100:	2313      	movs	r3, #19
 80a0102:	7423      	strb	r3, [r4, #16]
        cfg.on_min = 0;
        cfg.off_hr = 6;
 80a0104:	2206      	movs	r2, #6
        cfg.check = CFG_CHECK;
        cfg.tz = -4;
        cfg.color = C_BLUE;
        cfg.brightness = 64;
        cfg.on_hr = 19;
        cfg.on_min = 0;
 80a0106:	2300      	movs	r3, #0
void load_config() {
    EEPROM.get(0, cfg);
    if(cfg.check != CFG_CHECK) {
        cfg.check = CFG_CHECK;
        cfg.tz = -4;
        cfg.color = C_BLUE;
 80a0108:	60a0      	str	r0, [r4, #8]
        cfg.brightness = 64;
        cfg.on_hr = 19;
        cfg.on_min = 0;
 80a010a:	7463      	strb	r3, [r4, #17]
        cfg.off_hr = 6;
 80a010c:	74a2      	strb	r2, [r4, #18]
        cfg.off_min = 0;
 80a010e:	74e3      	strb	r3, [r4, #19]

        save_config();
 80a0110:	f7ff ffd2 	bl	80a00b8 <_Z11save_configv>
    }

    _on_time = String::format("%02d:%02d", cfg.on_hr, cfg.on_min);
 80a0114:	7c63      	ldrb	r3, [r4, #17]
 80a0116:	7c22      	ldrb	r2, [r4, #16]
 80a0118:	4668      	mov	r0, sp
 80a011a:	490d      	ldr	r1, [pc, #52]	; (80a0150 <_Z11load_configv+0x80>)
 80a011c:	f001 fe9c 	bl	80a1e58 <_ZN6String6formatEPKcz>
 80a0120:	4669      	mov	r1, sp
 80a0122:	480c      	ldr	r0, [pc, #48]	; (80a0154 <_Z11load_configv+0x84>)
 80a0124:	f001 fe8b 	bl	80a1e3e <_ZN6StringaSEOS_>
 80a0128:	4668      	mov	r0, sp
 80a012a:	f001 fdf7 	bl	80a1d1c <_ZN6StringD1Ev>
    _off_time = String::format("%02d:%02d", cfg.off_hr, cfg.off_min);
 80a012e:	7ce3      	ldrb	r3, [r4, #19]
 80a0130:	7ca2      	ldrb	r2, [r4, #18]
 80a0132:	4668      	mov	r0, sp
 80a0134:	4906      	ldr	r1, [pc, #24]	; (80a0150 <_Z11load_configv+0x80>)
 80a0136:	f001 fe8f 	bl	80a1e58 <_ZN6String6formatEPKcz>
 80a013a:	4669      	mov	r1, sp
 80a013c:	4806      	ldr	r0, [pc, #24]	; (80a0158 <_Z11load_configv+0x88>)
 80a013e:	f001 fe7e 	bl	80a1e3e <_ZN6StringaSEOS_>
 80a0142:	4668      	mov	r0, sp
 80a0144:	f001 fdea 	bl	80a1d1c <_ZN6StringD1Ev>
}
 80a0148:	b004      	add	sp, #16
 80a014a:	bd10      	pop	{r4, pc}
 80a014c:	200003c0 	.word	0x200003c0
 80a0150:	080a4274 	.word	0x080a4274
 80a0154:	2000040c 	.word	0x2000040c
 80a0158:	200003d8 	.word	0x200003d8

080a015c <_Z14set_brightness6String>:
    Particle.publish("off_time", _off_time, PRIVATE);

    return 1;
}

int set_brightness(String bright) {
 80a015c:	b508      	push	{r3, lr}
    cfg.brightness = bright.toInt();
 80a015e:	f001 fe76 	bl	80a1e4e <_ZNK6String5toIntEv>
 80a0162:	4b05      	ldr	r3, [pc, #20]	; (80a0178 <_Z14set_brightness6String+0x1c>)
    strip.setBrightness(cfg.brightness);
 80a0164:	b2c1      	uxtb	r1, r0

    return 1;
}

int set_brightness(String bright) {
    cfg.brightness = bright.toInt();
 80a0166:	60d8      	str	r0, [r3, #12]
    strip.setBrightness(cfg.brightness);
 80a0168:	4804      	ldr	r0, [pc, #16]	; (80a017c <_Z14set_brightness6String+0x20>)
 80a016a:	f001 fb4d 	bl	80a1808 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    save_config();
 80a016e:	f7ff ffa3 	bl	80a00b8 <_Z11save_configv>

    return 1;
}
 80a0172:	2001      	movs	r0, #1
 80a0174:	bd08      	pop	{r3, pc}
 80a0176:	bf00      	nop
 80a0178:	200003c0 	.word	0x200003c0
 80a017c:	200003e8 	.word	0x200003e8

080a0180 <_Z4fillm>:
    strip.begin();
    strip.setBrightness(64);
    strip.show(); // Initialize all pixels to 'off'
}

void fill(uint32_t c){
 80a0180:	b570      	push	{r4, r5, r6, lr}
    static uint16_t i;
    for(i=0; i<strip.numPixels(); i++) {
 80a0182:	4c0a      	ldr	r4, [pc, #40]	; (80a01ac <_Z4fillm+0x2c>)
    strip.begin();
    strip.setBrightness(64);
    strip.show(); // Initialize all pixels to 'off'
}

void fill(uint32_t c){
 80a0184:	4606      	mov	r6, r0
    static uint16_t i;
    for(i=0; i<strip.numPixels(); i++) {
 80a0186:	4625      	mov	r5, r4
 80a0188:	2300      	movs	r3, #0
 80a018a:	8023      	strh	r3, [r4, #0]
 80a018c:	4808      	ldr	r0, [pc, #32]	; (80a01b0 <_Z4fillm+0x30>)
 80a018e:	f001 fb39 	bl	80a1804 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0192:	8821      	ldrh	r1, [r4, #0]
 80a0194:	4288      	cmp	r0, r1
 80a0196:	d907      	bls.n	80a01a8 <_Z4fillm+0x28>
      strip.setPixelColor(i, c);
 80a0198:	4632      	mov	r2, r6
 80a019a:	4805      	ldr	r0, [pc, #20]	; (80a01b0 <_Z4fillm+0x30>)
 80a019c:	f001 fae2 	bl	80a1764 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show(); // Initialize all pixels to 'off'
}

void fill(uint32_t c){
    static uint16_t i;
    for(i=0; i<strip.numPixels(); i++) {
 80a01a0:	882b      	ldrh	r3, [r5, #0]
 80a01a2:	3301      	adds	r3, #1
 80a01a4:	802b      	strh	r3, [r5, #0]
 80a01a6:	e7f1      	b.n	80a018c <_Z4fillm+0xc>
 80a01a8:	bd70      	pop	{r4, r5, r6, pc}
 80a01aa:	bf00      	nop
 80a01ac:	2000041c 	.word	0x2000041c
 80a01b0:	200003e8 	.word	0x200003e8

080a01b4 <loop>:

    return 1;
}

void loop()
{
 80a01b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(_is_on) {
 80a01b8:	4d22      	ldr	r5, [pc, #136]	; (80a0244 <loop+0x90>)
 80a01ba:	782a      	ldrb	r2, [r5, #0]
 80a01bc:	b122      	cbz	r2, 80a01c8 <loop+0x14>
    fill(cfg.color);
 80a01be:	4b22      	ldr	r3, [pc, #136]	; (80a0248 <loop+0x94>)
 80a01c0:	6898      	ldr	r0, [r3, #8]
 80a01c2:	f7ff ffdd 	bl	80a0180 <_Z4fillm>
 80a01c6:	e005      	b.n	80a01d4 <loop+0x20>
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

// neopixel library is dumb and doesn't let you change color order
uint32_t CRGB(uint8_t r, uint8_t g, uint8_t b) { return strip.Color(g, r, b); }
 80a01c8:	4611      	mov	r1, r2
 80a01ca:	4610      	mov	r0, r2
 80a01cc:	f001 fb15 	bl	80a17fa <_ZN17Adafruit_NeoPixel5ColorEhhh>
  if(_is_on) {
    fill(cfg.color);
  }
  else
  {
    fill(C_OFF);
 80a01d0:	f7ff ffd6 	bl	80a0180 <_Z4fillm>
  }

  strip.show();
 80a01d4:	481d      	ldr	r0, [pc, #116]	; (80a024c <loop+0x98>)
 80a01d6:	f000 fa0b 	bl	80a05f0 <_ZN17Adafruit_NeoPixel4showEv>
  delay(250);
 80a01da:	20fa      	movs	r0, #250	; 0xfa
 80a01dc:	f001 ff70 	bl	80a20c0 <delay>

  static int cur_min, on_min, off_min;

  if(Time.now() % 15 == 0){
 80a01e0:	f001 ff49 	bl	80a2076 <_ZN9TimeClass3nowEv>
 80a01e4:	230f      	movs	r3, #15
 80a01e6:	fb90 f3f3 	sdiv	r3, r0, r3
 80a01ea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80a01ee:	ebb0 0803 	subs.w	r8, r0, r3
 80a01f2:	d124      	bne.n	80a023e <loop+0x8a>
      cur_min = (Time.hour() * 60) + Time.minute();
 80a01f4:	f001 ff46 	bl	80a2084 <_ZN9TimeClass4hourEv>
 80a01f8:	4604      	mov	r4, r0
 80a01fa:	f001 ff4d 	bl	80a2098 <_ZN9TimeClass6minuteEv>
      on_min = (cfg.on_hr * 60) + cfg.on_min;
 80a01fe:	4e12      	ldr	r6, [pc, #72]	; (80a0248 <loop+0x94>)
  delay(250);

  static int cur_min, on_min, off_min;

  if(Time.now() % 15 == 0){
      cur_min = (Time.hour() * 60) + Time.minute();
 80a0200:	273c      	movs	r7, #60	; 0x3c
      on_min = (cfg.on_hr * 60) + cfg.on_min;
 80a0202:	7c31      	ldrb	r1, [r6, #16]
  delay(250);

  static int cur_min, on_min, off_min;

  if(Time.now() % 15 == 0){
      cur_min = (Time.hour() * 60) + Time.minute();
 80a0204:	fb07 0004 	mla	r0, r7, r4, r0
      on_min = (cfg.on_hr * 60) + cfg.on_min;
 80a0208:	7c74      	ldrb	r4, [r6, #17]
      off_min = (cfg.off_hr * 60) + cfg.off_min;
 80a020a:	7cf2      	ldrb	r2, [r6, #19]

  static int cur_min, on_min, off_min;

  if(Time.now() % 15 == 0){
      cur_min = (Time.hour() * 60) + Time.minute();
      on_min = (cfg.on_hr * 60) + cfg.on_min;
 80a020c:	fb07 4401 	mla	r4, r7, r1, r4
      off_min = (cfg.off_hr * 60) + cfg.off_min;
 80a0210:	7cb1      	ldrb	r1, [r6, #18]
 80a0212:	fb07 2201 	mla	r2, r7, r1, r2

      if(off_min < on_min){
 80a0216:	4294      	cmp	r4, r2
 80a0218:	dd08      	ble.n	80a022c <loop+0x78>
        _is_on = !(cur_min >= off_min && cur_min < on_min);
 80a021a:	4290      	cmp	r0, r2
 80a021c:	db04      	blt.n	80a0228 <loop+0x74>
 80a021e:	42a0      	cmp	r0, r4
 80a0220:	bfb4      	ite	lt
 80a0222:	2000      	movlt	r0, #0
 80a0224:	2001      	movge	r0, #1
 80a0226:	e009      	b.n	80a023c <loop+0x88>
 80a0228:	2001      	movs	r0, #1
 80a022a:	e007      	b.n	80a023c <loop+0x88>
      }
      else {
        _is_on = (cur_min >= on_min && cur_min < off_min);
 80a022c:	42a0      	cmp	r0, r4
 80a022e:	db04      	blt.n	80a023a <loop+0x86>
 80a0230:	4290      	cmp	r0, r2
 80a0232:	bfac      	ite	ge
 80a0234:	2000      	movge	r0, #0
 80a0236:	2001      	movlt	r0, #1
 80a0238:	e000      	b.n	80a023c <loop+0x88>
 80a023a:	4640      	mov	r0, r8
 80a023c:	7028      	strb	r0, [r5, #0]
 80a023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0242:	bf00      	nop
 80a0244:	20000300 	.word	0x20000300
 80a0248:	200003c0 	.word	0x200003c0
 80a024c:	200003e8 	.word	0x200003e8

080a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0250:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0252:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0254:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0256:	b17c      	cbz	r4, 80a0278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0258:	6863      	ldr	r3, [r4, #4]
 80a025a:	3b01      	subs	r3, #1
 80a025c:	6063      	str	r3, [r4, #4]
 80a025e:	b95b      	cbnz	r3, 80a0278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0260:	6823      	ldr	r3, [r4, #0]
 80a0262:	4620      	mov	r0, r4
 80a0264:	689b      	ldr	r3, [r3, #8]
 80a0266:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0268:	68a3      	ldr	r3, [r4, #8]
 80a026a:	3b01      	subs	r3, #1
 80a026c:	60a3      	str	r3, [r4, #8]
 80a026e:	b91b      	cbnz	r3, 80a0278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0270:	6823      	ldr	r3, [r4, #0]
 80a0272:	4620      	mov	r0, r4
 80a0274:	68db      	ldr	r3, [r3, #12]
 80a0276:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0278:	4628      	mov	r0, r5
 80a027a:	bd38      	pop	{r3, r4, r5, pc}

080a027c <_Z9set_color6String>:
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, c);
    }
}

int set_color(String color) {
 80a027c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a027e:	4604      	mov	r4, r0
 80a0280:	4b0f      	ldr	r3, [pc, #60]	; (80a02c0 <_Z9set_color6String+0x44>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0282:	4910      	ldr	r1, [pc, #64]	; (80a02c4 <_Z9set_color6String+0x48>)
 80a0284:	781b      	ldrb	r3, [r3, #0]
 80a0286:	f88d 3000 	strb.w	r3, [sp]
 80a028a:	6802      	ldr	r2, [r0, #0]
 80a028c:	233c      	movs	r3, #60	; 0x3c
 80a028e:	a802      	add	r0, sp, #8
 80a0290:	f002 f92e 	bl	80a24f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0294:	a803      	add	r0, sp, #12
 80a0296:	f7ff ffdb 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("s_color", color, PRIVATE);
    long int rgb=strtol(color.c_str(),0,16);
 80a029a:	2210      	movs	r2, #16
 80a029c:	2100      	movs	r1, #0
 80a029e:	6820      	ldr	r0, [r4, #0]
 80a02a0:	f003 fc3c 	bl	80a3b1c <strtol>
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

// neopixel library is dumb and doesn't let you change color order
uint32_t CRGB(uint8_t r, uint8_t g, uint8_t b) { return strip.Color(g, r, b); }
 80a02a4:	b2c2      	uxtb	r2, r0
 80a02a6:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80a02aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a02ae:	f001 faa4 	bl	80a17fa <_ZN17Adafruit_NeoPixel5ColorEhhh>
    long int rgb=strtol(color.c_str(),0,16);
    uint8_t r=(uint8_t)(rgb>>16);
    uint8_t g=(uint8_t)(rgb>>8);
    uint8_t b=(uint8_t)(rgb);

    cfg.color = CRGB(r, g, b);
 80a02b2:	4b05      	ldr	r3, [pc, #20]	; (80a02c8 <_Z9set_color6String+0x4c>)
 80a02b4:	6098      	str	r0, [r3, #8]

    save_config();
 80a02b6:	f7ff feff 	bl	80a00b8 <_Z11save_configv>

    return 1;
}
 80a02ba:	2001      	movs	r0, #1
 80a02bc:	b004      	add	sp, #16
 80a02be:	bd10      	pop	{r4, pc}
 80a02c0:	200003d4 	.word	0x200003d4
 80a02c4:	080a427e 	.word	0x080a427e
 80a02c8:	200003c0 	.word	0x200003c0

080a02cc <_Z11set_on_time6String>:

int set_on_time(String on_time) {
 80a02cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static int h, m;
    static long t;
    if(on_time.length() != 4){ return 0; }
 80a02ce:	6883      	ldr	r3, [r0, #8]
 80a02d0:	2b04      	cmp	r3, #4
 80a02d2:	d124      	bne.n	80a031e <_Z11set_on_time6String+0x52>
    t = strtol(on_time.c_str(), 0, 10);
 80a02d4:	220a      	movs	r2, #10
 80a02d6:	2100      	movs	r1, #0
 80a02d8:	6800      	ldr	r0, [r0, #0]
 80a02da:	f003 fc1f 	bl	80a3b1c <strtol>
    m = t % 100;
 80a02de:	2364      	movs	r3, #100	; 0x64
 80a02e0:	fb90 f2f3 	sdiv	r2, r0, r3
 80a02e4:	fb03 0012 	mls	r0, r3, r2, r0
    h = t / 100;

    if(m >= 60 || h >= 24) return -1;
 80a02e8:	283b      	cmp	r0, #59	; 0x3b
 80a02ea:	dc1a      	bgt.n	80a0322 <_Z11set_on_time6String+0x56>
 80a02ec:	2a17      	cmp	r2, #23
 80a02ee:	dc18      	bgt.n	80a0322 <_Z11set_on_time6String+0x56>
    cfg.on_hr = h;
 80a02f0:	4b0e      	ldr	r3, [pc, #56]	; (80a032c <_Z11set_on_time6String+0x60>)
 80a02f2:	741a      	strb	r2, [r3, #16]
    cfg.on_min = m;
 80a02f4:	7458      	strb	r0, [r3, #17]

    save_config();
 80a02f6:	f7ff fedf 	bl	80a00b8 <_Z11save_configv>
    load_config(); // just to reload some strings
 80a02fa:	f7ff fee9 	bl	80a00d0 <_Z11load_configv>
 80a02fe:	4b0c      	ldr	r3, [pc, #48]	; (80a0330 <_Z11set_on_time6String+0x64>)
 80a0300:	490c      	ldr	r1, [pc, #48]	; (80a0334 <_Z11set_on_time6String+0x68>)
 80a0302:	681a      	ldr	r2, [r3, #0]
 80a0304:	4b0c      	ldr	r3, [pc, #48]	; (80a0338 <_Z11set_on_time6String+0x6c>)
 80a0306:	a802      	add	r0, sp, #8
 80a0308:	781b      	ldrb	r3, [r3, #0]
 80a030a:	f88d 3000 	strb.w	r3, [sp]
 80a030e:	233c      	movs	r3, #60	; 0x3c
 80a0310:	f002 f8ee 	bl	80a24f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0314:	a803      	add	r0, sp, #12
 80a0316:	f7ff ff9b 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("on_time", _on_time, PRIVATE);

    return 1;
 80a031a:	2001      	movs	r0, #1
 80a031c:	e003      	b.n	80a0326 <_Z11set_on_time6String+0x5a>
}

int set_on_time(String on_time) {
    static int h, m;
    static long t;
    if(on_time.length() != 4){ return 0; }
 80a031e:	2000      	movs	r0, #0
 80a0320:	e001      	b.n	80a0326 <_Z11set_on_time6String+0x5a>
    t = strtol(on_time.c_str(), 0, 10);
    m = t % 100;
    h = t / 100;

    if(m >= 60 || h >= 24) return -1;
 80a0322:	f04f 30ff 	mov.w	r0, #4294967295
    save_config();
    load_config(); // just to reload some strings
    Particle.publish("on_time", _on_time, PRIVATE);

    return 1;
}
 80a0326:	b005      	add	sp, #20
 80a0328:	f85d fb04 	ldr.w	pc, [sp], #4
 80a032c:	200003c0 	.word	0x200003c0
 80a0330:	2000040c 	.word	0x2000040c
 80a0334:	080a4286 	.word	0x080a4286
 80a0338:	200003d4 	.word	0x200003d4

080a033c <_Z12set_off_time6String>:

int set_off_time(String off_time) {
 80a033c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static int h, m;
    static long t;
    if(off_time.length() != 4){ return 0; }
 80a033e:	6883      	ldr	r3, [r0, #8]
 80a0340:	2b04      	cmp	r3, #4
 80a0342:	d001      	beq.n	80a0348 <_Z12set_off_time6String+0xc>
 80a0344:	2000      	movs	r0, #0
 80a0346:	e023      	b.n	80a0390 <_Z12set_off_time6String+0x54>
    t = strtol(off_time.c_str(), 0, 10);
 80a0348:	220a      	movs	r2, #10
 80a034a:	2100      	movs	r1, #0
 80a034c:	6800      	ldr	r0, [r0, #0]
 80a034e:	f003 fbe5 	bl	80a3b1c <strtol>
    m = t % 100;
 80a0352:	2364      	movs	r3, #100	; 0x64
 80a0354:	fb90 f2f3 	sdiv	r2, r0, r3
 80a0358:	fb03 0012 	mls	r0, r3, r2, r0
    h = t / 100;

    if(m >= 60 || h >= 24) return 0;
 80a035c:	283b      	cmp	r0, #59	; 0x3b
 80a035e:	dcf1      	bgt.n	80a0344 <_Z12set_off_time6String+0x8>
 80a0360:	2a17      	cmp	r2, #23
 80a0362:	dcef      	bgt.n	80a0344 <_Z12set_off_time6String+0x8>
    cfg.off_hr = h;
 80a0364:	4b0c      	ldr	r3, [pc, #48]	; (80a0398 <_Z12set_off_time6String+0x5c>)
 80a0366:	749a      	strb	r2, [r3, #18]
    cfg.off_min = m;
 80a0368:	74d8      	strb	r0, [r3, #19]

    save_config();
 80a036a:	f7ff fea5 	bl	80a00b8 <_Z11save_configv>
    load_config(); // just to reload some strings
 80a036e:	f7ff feaf 	bl	80a00d0 <_Z11load_configv>
 80a0372:	4b0a      	ldr	r3, [pc, #40]	; (80a039c <_Z12set_off_time6String+0x60>)
 80a0374:	490a      	ldr	r1, [pc, #40]	; (80a03a0 <_Z12set_off_time6String+0x64>)
 80a0376:	681a      	ldr	r2, [r3, #0]
 80a0378:	4b0a      	ldr	r3, [pc, #40]	; (80a03a4 <_Z12set_off_time6String+0x68>)
 80a037a:	a802      	add	r0, sp, #8
 80a037c:	781b      	ldrb	r3, [r3, #0]
 80a037e:	f88d 3000 	strb.w	r3, [sp]
 80a0382:	233c      	movs	r3, #60	; 0x3c
 80a0384:	f002 f8b4 	bl	80a24f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0388:	a803      	add	r0, sp, #12
 80a038a:	f7ff ff61 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("off_time", _off_time, PRIVATE);

    return 1;
 80a038e:	2001      	movs	r0, #1
}
 80a0390:	b005      	add	sp, #20
 80a0392:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0396:	bf00      	nop
 80a0398:	200003c0 	.word	0x200003c0
 80a039c:	200003d8 	.word	0x200003d8
 80a03a0:	080a428e 	.word	0x080a428e
 80a03a4:	200003d4 	.word	0x200003d4

080a03a8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a03a8:	4602      	mov	r2, r0
 80a03aa:	4801      	ldr	r0, [pc, #4]	; (80a03b0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a03ac:	f001 bf97 	b.w	80a22de <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a03b0:	080a22b3 	.word	0x080a22b3

080a03b4 <_ZN10CloudClass8variableIA11_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a03b4:	2300      	movs	r3, #0
 80a03b6:	2202      	movs	r2, #2
 80a03b8:	f001 bc14 	b.w	80a1be4 <spark_variable>

080a03bc <_ZN10CloudClass8variableIA9_cI6StringEEEbRKT_DpRKT0_>:


public:

    template <typename T, class ... Types>
    static inline bool variable(const T &name, const Types& ... args)
 80a03bc:	b507      	push	{r0, r1, r2, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
 80a03be:	2308      	movs	r3, #8
 80a03c0:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
 80a03c4:	4b04      	ldr	r3, [pc, #16]	; (80a03d8 <_ZN10CloudClass8variableIA9_cI6StringEEEbRKT_DpRKT0_+0x1c>)
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 80a03c6:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a03c8:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 80a03ca:	466b      	mov	r3, sp
 80a03cc:	f001 fc0a 	bl	80a1be4 <spark_variable>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
    }
 80a03d0:	b003      	add	sp, #12
 80a03d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a03d6:	bf00      	nop
 80a03d8:	080a00b3 	.word	0x080a00b3

080a03dc <setup>:
void save_config() {
    EEPROM.put(0, cfg);
}

void setup()
{
 80a03dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    load_config();

    Time.zone(cfg.tz);
 80a03e0:	4c21      	ldr	r4, [pc, #132]	; (80a0468 <setup+0x8c>)
    EEPROM.put(0, cfg);
}

void setup()
{
    load_config();
 80a03e2:	f7ff fe75 	bl	80a00d0 <_Z11load_configv>

    Time.zone(cfg.tz);
 80a03e6:	4625      	mov	r5, r4

    Particle.function("color", set_color);
 80a03e8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80a0494 <setup+0xb8>

void setup()
{
    load_config();

    Time.zone(cfg.tz);
 80a03ec:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80a03f0:	f002 ff3e 	bl	80a3270 <__aeabi_i2f>

    Particle.function("color", set_color);
    Particle.function("on_time", set_on_time);
 80a03f4:	4f1d      	ldr	r7, [pc, #116]	; (80a046c <setup+0x90>)

void setup()
{
    load_config();

    Time.zone(cfg.tz);
 80a03f6:	f001 fe01 	bl	80a1ffc <_ZN9TimeClass4zoneEf>

    Particle.function("color", set_color);
    Particle.function("on_time", set_on_time);
    Particle.function("off_time", set_off_time);
 80a03fa:	4e1d      	ldr	r6, [pc, #116]	; (80a0470 <setup+0x94>)
{
    load_config();

    Time.zone(cfg.tz);

    Particle.function("color", set_color);
 80a03fc:	491d      	ldr	r1, [pc, #116]	; (80a0474 <setup+0x98>)
 80a03fe:	4648      	mov	r0, r9
 80a0400:	f7ff ffd2 	bl	80a03a8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("on_time", set_on_time);
    Particle.function("off_time", set_off_time);
    Particle.function("brightness", set_brightness);
 80a0404:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80a0498 <setup+0xbc>
    load_config();

    Time.zone(cfg.tz);

    Particle.function("color", set_color);
    Particle.function("on_time", set_on_time);
 80a0408:	491b      	ldr	r1, [pc, #108]	; (80a0478 <setup+0x9c>)
 80a040a:	4638      	mov	r0, r7
 80a040c:	f7ff ffcc 	bl	80a03a8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("off_time", set_off_time);
 80a0410:	491a      	ldr	r1, [pc, #104]	; (80a047c <setup+0xa0>)
 80a0412:	4630      	mov	r0, r6
 80a0414:	f7ff ffc8 	bl	80a03a8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("brightness", set_brightness);
 80a0418:	4919      	ldr	r1, [pc, #100]	; (80a0480 <setup+0xa4>)
 80a041a:	4640      	mov	r0, r8
 80a041c:	f7ff ffc4 	bl	80a03a8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

    Particle.variable("tz", cfg.tz);
 80a0420:	4629      	mov	r1, r5
 80a0422:	4818      	ldr	r0, [pc, #96]	; (80a0484 <setup+0xa8>)
 80a0424:	f7ff ffc6 	bl	80a03b4 <_ZN10CloudClass8variableIA11_cIiEEEbRKT_DpRKT0_>
    Particle.variable("color", cfg.color);
 80a0428:	f104 0108 	add.w	r1, r4, #8
 80a042c:	4648      	mov	r0, r9
 80a042e:	f7ff ffc1 	bl	80a03b4 <_ZN10CloudClass8variableIA11_cIiEEEbRKT_DpRKT0_>
    Particle.variable("brightness", cfg.brightness);
 80a0432:	f104 010c 	add.w	r1, r4, #12
 80a0436:	4640      	mov	r0, r8
 80a0438:	f7ff ffbc 	bl	80a03b4 <_ZN10CloudClass8variableIA11_cIiEEEbRKT_DpRKT0_>
    Particle.variable("on_time", _on_time);
    Particle.variable("off_time", _off_time);

    strip.begin();
 80a043c:	4c12      	ldr	r4, [pc, #72]	; (80a0488 <setup+0xac>)
    Particle.function("brightness", set_brightness);

    Particle.variable("tz", cfg.tz);
    Particle.variable("color", cfg.color);
    Particle.variable("brightness", cfg.brightness);
    Particle.variable("on_time", _on_time);
 80a043e:	4913      	ldr	r1, [pc, #76]	; (80a048c <setup+0xb0>)
 80a0440:	4638      	mov	r0, r7
 80a0442:	f7ff ffbb 	bl	80a03bc <_ZN10CloudClass8variableIA9_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("off_time", _off_time);
 80a0446:	4912      	ldr	r1, [pc, #72]	; (80a0490 <setup+0xb4>)
 80a0448:	4630      	mov	r0, r6
 80a044a:	f7ff ffb7 	bl	80a03bc <_ZN10CloudClass8variableIA9_cI6StringEEEbRKT_DpRKT0_>

    strip.begin();
 80a044e:	4620      	mov	r0, r4
 80a0450:	f000 f898 	bl	80a0584 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.setBrightness(64);
 80a0454:	4620      	mov	r0, r4
 80a0456:	2140      	movs	r1, #64	; 0x40
 80a0458:	f001 f9d6 	bl	80a1808 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    strip.show(); // Initialize all pixels to 'off'
 80a045c:	4620      	mov	r0, r4
}
 80a045e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Particle.variable("on_time", _on_time);
    Particle.variable("off_time", _off_time);

    strip.begin();
    strip.setBrightness(64);
    strip.show(); // Initialize all pixels to 'off'
 80a0462:	f000 b8c5 	b.w	80a05f0 <_ZN17Adafruit_NeoPixel4showEv>
 80a0466:	bf00      	nop
 80a0468:	200003c0 	.word	0x200003c0
 80a046c:	080a4286 	.word	0x080a4286
 80a0470:	080a428e 	.word	0x080a428e
 80a0474:	080a027d 	.word	0x080a027d
 80a0478:	080a02cd 	.word	0x080a02cd
 80a047c:	080a033d 	.word	0x080a033d
 80a0480:	080a015d 	.word	0x080a015d
 80a0484:	080a42a2 	.word	0x080a42a2
 80a0488:	200003e8 	.word	0x200003e8
 80a048c:	2000040c 	.word	0x2000040c
 80a0490:	200003d8 	.word	0x200003d8
 80a0494:	080a4280 	.word	0x080a4280
 80a0498:	080a4297 	.word	0x080a4297

080a049c <_GLOBAL__sub_I_strip>:
      }
      else {
        _is_on = (cur_min >= on_min && cur_min < off_min);
      }
  }
}
 80a049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a049e:	4b1a      	ldr	r3, [pc, #104]	; (80a0508 <_GLOBAL__sub_I_strip+0x6c>)
// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_PIN D0
#define PIXEL_COUNT 10
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a04a0:	4d1a      	ldr	r5, [pc, #104]	; (80a050c <_GLOBAL__sub_I_strip+0x70>)
 80a04a2:	4c1b      	ldr	r4, [pc, #108]	; (80a0510 <_GLOBAL__sub_I_strip+0x74>)
 80a04a4:	2201      	movs	r2, #1
    uint8_t   off_min;
};

DisplayConfig cfg;

String _on_time;
 80a04a6:	4e1b      	ldr	r6, [pc, #108]	; (80a0514 <_GLOBAL__sub_I_strip+0x78>)
 80a04a8:	701a      	strb	r2, [r3, #0]
 80a04aa:	4f1b      	ldr	r7, [pc, #108]	; (80a0518 <_GLOBAL__sub_I_strip+0x7c>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a04ac:	f001 f9dc 	bl	80a1868 <HAL_Pin_Map>
// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_PIN D0
#define PIXEL_COUNT 10
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a04b0:	2302      	movs	r3, #2
 80a04b2:	2200      	movs	r2, #0
 80a04b4:	210a      	movs	r1, #10
 80a04b6:	4628      	mov	r0, r5
 80a04b8:	f000 f889 	bl	80a05ce <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04bc:	4622      	mov	r2, r4
 80a04be:	4917      	ldr	r1, [pc, #92]	; (80a051c <_GLOBAL__sub_I_strip+0x80>)
 80a04c0:	4628      	mov	r0, r5
 80a04c2:	f002 fccb 	bl	80a2e5c <__aeabi_atexit>
    uint8_t   off_min;
};

DisplayConfig cfg;

String _on_time;
 80a04c6:	4d16      	ldr	r5, [pc, #88]	; (80a0520 <_GLOBAL__sub_I_strip+0x84>)
 80a04c8:	4631      	mov	r1, r6
 80a04ca:	4638      	mov	r0, r7
 80a04cc:	f001 fc6d 	bl	80a1daa <_ZN6StringC1EPK19__FlashStringHelper>
 80a04d0:	4638      	mov	r0, r7
String _off_time;
 80a04d2:	4f14      	ldr	r7, [pc, #80]	; (80a0524 <_GLOBAL__sub_I_strip+0x88>)
    uint8_t   off_min;
};

DisplayConfig cfg;

String _on_time;
 80a04d4:	4622      	mov	r2, r4
 80a04d6:	4629      	mov	r1, r5
 80a04d8:	f002 fcc0 	bl	80a2e5c <__aeabi_atexit>
String _off_time;
 80a04dc:	4631      	mov	r1, r6
 80a04de:	4638      	mov	r0, r7
 80a04e0:	f001 fc63 	bl	80a1daa <_ZN6StringC1EPK19__FlashStringHelper>
 80a04e4:	4638      	mov	r0, r7
String _cur_time;
 80a04e6:	4f10      	ldr	r7, [pc, #64]	; (80a0528 <_GLOBAL__sub_I_strip+0x8c>)
};

DisplayConfig cfg;

String _on_time;
String _off_time;
 80a04e8:	4622      	mov	r2, r4
 80a04ea:	4629      	mov	r1, r5
 80a04ec:	f002 fcb6 	bl	80a2e5c <__aeabi_atexit>
String _cur_time;
 80a04f0:	4631      	mov	r1, r6
 80a04f2:	4638      	mov	r0, r7
 80a04f4:	f001 fc59 	bl	80a1daa <_ZN6StringC1EPK19__FlashStringHelper>
 80a04f8:	4622      	mov	r2, r4
 80a04fa:	4629      	mov	r1, r5
 80a04fc:	4638      	mov	r0, r7
      }
      else {
        _is_on = (cur_min >= on_min && cur_min < off_min);
      }
  }
}
 80a04fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

DisplayConfig cfg;

String _on_time;
String _off_time;
String _cur_time;
 80a0502:	f002 bcab 	b.w	80a2e5c <__aeabi_atexit>
 80a0506:	bf00      	nop
 80a0508:	200003d4 	.word	0x200003d4
 80a050c:	200003e8 	.word	0x200003e8
 80a0510:	200003bc 	.word	0x200003bc
 80a0514:	080a42e2 	.word	0x080a42e2
 80a0518:	2000040c 	.word	0x2000040c
 80a051c:	080a0531 	.word	0x080a0531
 80a0520:	080a1d1d 	.word	0x080a1d1d
 80a0524:	200003d8 	.word	0x200003d8
 80a0528:	200003fc 	.word	0x200003fc

080a052c <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a052c:	f001 b9d4 	b.w	80a18d8 <HAL_Timer_Get_Micro_Seconds>

080a0530 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0530:	b510      	push	{r4, lr}
 80a0532:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0534:	68c0      	ldr	r0, [r0, #12]
 80a0536:	b108      	cbz	r0, 80a053c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0538:	f001 fb94 	bl	80a1c64 <free>
  if (begun) pinMode(pin, INPUT);
 80a053c:	7823      	ldrb	r3, [r4, #0]
 80a053e:	b11b      	cbz	r3, 80a0548 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0540:	2100      	movs	r1, #0
 80a0542:	79e0      	ldrb	r0, [r4, #7]
 80a0544:	f002 fbf2 	bl	80a2d2c <pinMode>
}
 80a0548:	4620      	mov	r0, r4
 80a054a:	bd10      	pop	{r4, pc}

080a054c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a054c:	b538      	push	{r3, r4, r5, lr}
 80a054e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0550:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0552:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0554:	b108      	cbz	r0, 80a055a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0556:	f001 fb85 	bl	80a1c64 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a055a:	79a3      	ldrb	r3, [r4, #6]
 80a055c:	2b06      	cmp	r3, #6
 80a055e:	bf0c      	ite	eq
 80a0560:	2004      	moveq	r0, #4
 80a0562:	2003      	movne	r0, #3
 80a0564:	4368      	muls	r0, r5
 80a0566:	b280      	uxth	r0, r0
 80a0568:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a056a:	f001 fb73 	bl	80a1c54 <malloc>
 80a056e:	60e0      	str	r0, [r4, #12]
 80a0570:	b128      	cbz	r0, 80a057e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0572:	88a2      	ldrh	r2, [r4, #4]
 80a0574:	2100      	movs	r1, #0
 80a0576:	f003 f9d0 	bl	80a391a <memset>
    numLEDs = n;
 80a057a:	8065      	strh	r5, [r4, #2]
 80a057c:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a057e:	80a0      	strh	r0, [r4, #4]
 80a0580:	8060      	strh	r0, [r4, #2]
 80a0582:	bd38      	pop	{r3, r4, r5, pc}

080a0584 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0584:	b510      	push	{r4, lr}
 80a0586:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0588:	2101      	movs	r1, #1
 80a058a:	79c0      	ldrb	r0, [r0, #7]
 80a058c:	f002 fbce 	bl	80a2d2c <pinMode>
  digitalWrite(pin, LOW);
 80a0590:	2100      	movs	r1, #0
 80a0592:	79e0      	ldrb	r0, [r4, #7]
 80a0594:	f002 fbdb 	bl	80a2d4e <digitalWrite>
  begun = true;
 80a0598:	2301      	movs	r3, #1
 80a059a:	7023      	strb	r3, [r4, #0]
 80a059c:	bd10      	pop	{r4, pc}

080a059e <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a059e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a05a0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a05a2:	4605      	mov	r5, r0
 80a05a4:	460c      	mov	r4, r1
    if (begun) {
 80a05a6:	b11b      	cbz	r3, 80a05b0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a05a8:	2100      	movs	r1, #0
 80a05aa:	79c0      	ldrb	r0, [r0, #7]
 80a05ac:	f002 fbbe 	bl	80a2d2c <pinMode>
    }
    pin = p;
    if (begun) {
 80a05b0:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a05b2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a05b4:	b153      	cbz	r3, 80a05cc <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a05b6:	b2a4      	uxth	r4, r4
 80a05b8:	4620      	mov	r0, r4
 80a05ba:	2101      	movs	r1, #1
 80a05bc:	f002 fbb6 	bl	80a2d2c <pinMode>
        digitalWrite(p, LOW);
 80a05c0:	4620      	mov	r0, r4
    }
}
 80a05c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a05c6:	2100      	movs	r1, #0
 80a05c8:	f002 bbc1 	b.w	80a2d4e <digitalWrite>
 80a05cc:	bd38      	pop	{r3, r4, r5, pc}

080a05ce <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a05ce:	b570      	push	{r4, r5, r6, lr}
 80a05d0:	4604      	mov	r4, r0
 80a05d2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a05d4:	2500      	movs	r5, #0
 80a05d6:	7183      	strb	r3, [r0, #6]
 80a05d8:	7005      	strb	r5, [r0, #0]
 80a05da:	7205      	strb	r5, [r0, #8]
 80a05dc:	60c5      	str	r5, [r0, #12]
 80a05de:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a05e0:	f7ff ffb4 	bl	80a054c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a05e4:	4620      	mov	r0, r4
 80a05e6:	4631      	mov	r1, r6
 80a05e8:	f7ff ffd9 	bl	80a059e <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a05ec:	4620      	mov	r0, r4
 80a05ee:	bd70      	pop	{r4, r5, r6, pc}

080a05f0 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a05f0:	68c3      	ldr	r3, [r0, #12]
 80a05f2:	2b00      	cmp	r3, #0
 80a05f4:	f000 858e 	beq.w	80a1114 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a05f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a05fc:	4604      	mov	r4, r0
 80a05fe:	7983      	ldrb	r3, [r0, #6]
 80a0600:	b086      	sub	sp, #24
 80a0602:	3b02      	subs	r3, #2
 80a0604:	b2db      	uxtb	r3, r3
 80a0606:	2b04      	cmp	r3, #4
 80a0608:	bf96      	itet	ls
 80a060a:	4a29      	ldrls	r2, [pc, #164]	; (80a06b0 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a060c:	2532      	movhi	r5, #50	; 0x32
 80a060e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0612:	f7ff ff8b 	bl	80a052c <micros>
 80a0616:	6923      	ldr	r3, [r4, #16]
 80a0618:	1ac0      	subs	r0, r0, r3
 80a061a:	42a8      	cmp	r0, r5
 80a061c:	d3f9      	bcc.n	80a0612 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a061e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0620:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0622:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0624:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0626:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a062a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a062e:	f000 8272 	beq.w	80a0b16 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0632:	2907      	cmp	r1, #7
 80a0634:	f000 826f 	beq.w	80a0b16 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0638:	2906      	cmp	r1, #6
 80a063a:	f000 8432 	beq.w	80a0ea2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a063e:	2905      	cmp	r1, #5
 80a0640:	f000 83ab 	beq.w	80a0d9a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0644:	2908      	cmp	r1, #8
 80a0646:	f000 83a8 	beq.w	80a0d9a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a064a:	2900      	cmp	r1, #0
 80a064c:	f040 8563 	bne.w	80a1116 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0650:	4a18      	ldr	r2, [pc, #96]	; (80a06b4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0652:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0656:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a065a:	b29b      	uxth	r3, r3
 80a065c:	2b00      	cmp	r3, #0
 80a065e:	f000 8395 	beq.w	80a0d8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0662:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0664:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0668:	f10e 0503 	add.w	r5, lr, #3
 80a066c:	3b03      	subs	r3, #3
 80a066e:	b29b      	uxth	r3, r3
 80a0670:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0674:	f89e 3000 	ldrb.w	r3, [lr]
 80a0678:	b2db      	uxtb	r3, r3
 80a067a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a067e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0682:	b2db      	uxtb	r3, r3
 80a0684:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0688:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a068c:	b2db      	uxtb	r3, r3
 80a068e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0692:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0696:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a069a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a069e:	021b      	lsls	r3, r3, #8
 80a06a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a06a4:	4303      	orrs	r3, r0
 80a06a6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a06a8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a06ac:	e11b      	b.n	80a08e6 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a06ae:	bf00      	nop
 80a06b0:	080a42a8 	.word	0x080a42a8
 80a06b4:	20000420 	.word	0x20000420
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a06b8:	4600      	mov	r0, r0
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a07c0:	79e3      	ldrb	r3, [r4, #7]
 80a07c2:	6810      	ldr	r0, [r2, #0]
 80a07c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a07c8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a07cc:	88bf      	ldrh	r7, [r7, #4]
 80a07ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a07d2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a07d4:	4600      	mov	r0, r0
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a08ce:	9b04      	ldr	r3, [sp, #16]
 80a08d0:	085b      	lsrs	r3, r3, #1
 80a08d2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a08d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a08d8:	3301      	adds	r3, #1
 80a08da:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a08dc:	2b17      	cmp	r3, #23
 80a08de:	f88d 3005 	strb.w	r3, [sp, #5]
 80a08e2:	f200 82db 	bhi.w	80a0e9c <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a08e6:	79e3      	ldrb	r3, [r4, #7]
 80a08e8:	6810      	ldr	r0, [r2, #0]
 80a08ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08ee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a08f2:	88bf      	ldrh	r7, [r7, #4]
 80a08f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08f8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a08fa:	9803      	ldr	r0, [sp, #12]
 80a08fc:	9b04      	ldr	r3, [sp, #16]
 80a08fe:	4218      	tst	r0, r3
 80a0900:	f47f aeda 	bne.w	80a06b8 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0904:	4600      	mov	r0, r0
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0956:	79e3      	ldrb	r3, [r4, #7]
 80a0958:	6810      	ldr	r0, [r2, #0]
 80a095a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a095e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0962:	88bf      	ldrh	r7, [r7, #4]
 80a0964:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0968:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a096a:	4600      	mov	r0, r0
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	e6db      	b.n	80a08ce <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0b1a:	4a17      	ldr	r2, [pc, #92]	; (80a0b78 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0b1c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0b1e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0b22:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b24:	2b00      	cmp	r3, #0
 80a0b26:	f000 8131 	beq.w	80a0d8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0b2a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0b2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0b30:	f10e 0103 	add.w	r1, lr, #3
 80a0b34:	3b03      	subs	r3, #3
 80a0b36:	b29b      	uxth	r3, r3
 80a0b38:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0b3c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0b40:	b2db      	uxtb	r3, r3
 80a0b42:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0b46:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0b4a:	b2db      	uxtb	r3, r3
 80a0b4c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b50:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0b54:	b2db      	uxtb	r3, r3
 80a0b56:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0b5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0b62:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0b66:	0200      	lsls	r0, r0, #8
 80a0b68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0b6c:	433b      	orrs	r3, r7
 80a0b6e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b70:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0b74:	e080      	b.n	80a0c78 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0b76:	bf00      	nop
 80a0b78:	20000420 	.word	0x20000420
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b7c:	4600      	mov	r0, r0
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0c16:	79e3      	ldrb	r3, [r4, #7]
 80a0c18:	6810      	ldr	r0, [r2, #0]
 80a0c1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c1e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c22:	88bf      	ldrh	r7, [r7, #4]
 80a0c24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c28:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c2a:	4600      	mov	r0, r0
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0c60:	9b04      	ldr	r3, [sp, #16]
 80a0c62:	085b      	lsrs	r3, r3, #1
 80a0c64:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c6a:	3301      	adds	r3, #1
 80a0c6c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c6e:	2b17      	cmp	r3, #23
 80a0c70:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c74:	f200 8083 	bhi.w	80a0d7e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0c78:	79e3      	ldrb	r3, [r4, #7]
 80a0c7a:	6810      	ldr	r0, [r2, #0]
 80a0c7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c80:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c84:	88bf      	ldrh	r7, [r7, #4]
 80a0c86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c8a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c8c:	9803      	ldr	r0, [sp, #12]
 80a0c8e:	9b04      	ldr	r3, [sp, #16]
 80a0c90:	4218      	tst	r0, r3
 80a0c92:	f47f af73 	bne.w	80a0b7c <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c96:	4600      	mov	r0, r0
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0cbe:	79e3      	ldrb	r3, [r4, #7]
 80a0cc0:	6810      	ldr	r0, [r2, #0]
 80a0cc2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cc6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cca:	88bf      	ldrh	r7, [r7, #4]
 80a0ccc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cd0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0cd2:	4600      	mov	r0, r0
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	e770      	b.n	80a0c60 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0d82:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d84:	b29b      	uxth	r3, r3
 80a0d86:	2b00      	cmp	r3, #0
 80a0d88:	f47f aecf 	bne.w	80a0b2a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0d8c:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0d8e:	f7ff fbcd 	bl	80a052c <micros>
 80a0d92:	6120      	str	r0, [r4, #16]
}
 80a0d94:	b006      	add	sp, #24
 80a0d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0d9a:	4b5e      	ldr	r3, [pc, #376]	; (80a0f14 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0d9c:	4a5e      	ldr	r2, [pc, #376]	; (80a0f18 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0d9e:	4618      	mov	r0, r3
 80a0da0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0da2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0da6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0da8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0dac:	b292      	uxth	r2, r2
 80a0dae:	2a00      	cmp	r2, #0
 80a0db0:	d0ec      	beq.n	80a0d8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0db2:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0db6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0dba:	f10e 0503 	add.w	r5, lr, #3
 80a0dbe:	3a03      	subs	r2, #3
 80a0dc0:	b292      	uxth	r2, r2
 80a0dc2:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0dc6:	f89e 2000 	ldrb.w	r2, [lr]
 80a0dca:	b2d2      	uxtb	r2, r2
 80a0dcc:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0dd0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0dd4:	b2d2      	uxtb	r2, r2
 80a0dd6:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0dda:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0dde:	b2d2      	uxtb	r2, r2
 80a0de0:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0de4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0de8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0dec:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0df0:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0df4:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0df8:	ea42 020c 	orr.w	r2, r2, ip
 80a0dfc:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0dfe:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0e02:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0e04:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0e06:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0e0a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0e0e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0e12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0e16:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0e18:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0e1c:	9e03      	ldr	r6, [sp, #12]
 80a0e1e:	9a04      	ldr	r2, [sp, #16]
 80a0e20:	4216      	tst	r6, r2
 80a0e22:	d023      	beq.n	80a0e6c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0e24:	685a      	ldr	r2, [r3, #4]
 80a0e26:	9e05      	ldr	r6, [sp, #20]
 80a0e28:	1b92      	subs	r2, r2, r6
 80a0e2a:	2a4f      	cmp	r2, #79	; 0x4f
 80a0e2c:	d9fa      	bls.n	80a0e24 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0e2e:	79e2      	ldrb	r2, [r4, #7]
 80a0e30:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0e34:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0e38:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0e3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0e40:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0e44:	6842      	ldr	r2, [r0, #4]
 80a0e46:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0e48:	685a      	ldr	r2, [r3, #4]
 80a0e4a:	9e05      	ldr	r6, [sp, #20]
 80a0e4c:	1b92      	subs	r2, r2, r6
 80a0e4e:	2a07      	cmp	r2, #7
 80a0e50:	d9fa      	bls.n	80a0e48 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0e52:	9a04      	ldr	r2, [sp, #16]
 80a0e54:	0852      	lsrs	r2, r2, #1
 80a0e56:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0e58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0e5c:	3201      	adds	r2, #1
 80a0e5e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0e60:	2a17      	cmp	r2, #23
 80a0e62:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0e66:	d9cc      	bls.n	80a0e02 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0e68:	46ae      	mov	lr, r5
 80a0e6a:	e79d      	b.n	80a0da8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0e6c:	685a      	ldr	r2, [r3, #4]
 80a0e6e:	9e05      	ldr	r6, [sp, #20]
 80a0e70:	1b92      	subs	r2, r2, r6
 80a0e72:	2a18      	cmp	r2, #24
 80a0e74:	d9fa      	bls.n	80a0e6c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0e76:	79e2      	ldrb	r2, [r4, #7]
 80a0e78:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0e7c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0e80:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0e84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0e88:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0e8c:	6842      	ldr	r2, [r0, #4]
 80a0e8e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0e90:	685a      	ldr	r2, [r3, #4]
 80a0e92:	9e05      	ldr	r6, [sp, #20]
 80a0e94:	1b92      	subs	r2, r2, r6
 80a0e96:	2a45      	cmp	r2, #69	; 0x45
 80a0e98:	d9fa      	bls.n	80a0e90 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0e9a:	e7da      	b.n	80a0e52 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0e9c:	46ae      	mov	lr, r5
 80a0e9e:	f7ff bbda 	b.w	80a0656 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0ea2:	4a1d      	ldr	r2, [pc, #116]	; (80a0f18 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0ea4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0ea8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0eaa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0eae:	b29b      	uxth	r3, r3
 80a0eb0:	2b00      	cmp	r3, #0
 80a0eb2:	f43f af6b 	beq.w	80a0d8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0eb6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0eb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0ebc:	f10e 0104 	add.w	r1, lr, #4
 80a0ec0:	3b04      	subs	r3, #4
 80a0ec2:	b29b      	uxth	r3, r3
 80a0ec4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ec8:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ecc:	b2db      	uxtb	r3, r3
 80a0ece:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0ed2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0ed6:	b2db      	uxtb	r3, r3
 80a0ed8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0edc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0ee0:	b2db      	uxtb	r3, r3
 80a0ee2:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0ee6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0eea:	b2db      	uxtb	r3, r3
 80a0eec:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0ef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0ef4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0ef8:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0efc:	043f      	lsls	r7, r7, #16
 80a0efe:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0f02:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0f06:	4303      	orrs	r3, r0
 80a0f08:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0f0c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0f0e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0f12:	e07e      	b.n	80a1012 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0f14:	e0001000 	.word	0xe0001000
 80a0f18:	20000420 	.word	0x20000420
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f1c:	4600      	mov	r0, r0
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0f8a:	79e3      	ldrb	r3, [r4, #7]
 80a0f8c:	6810      	ldr	r0, [r2, #0]
 80a0f8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f92:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f96:	88bf      	ldrh	r7, [r7, #4]
 80a0f98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f9c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f9e:	4600      	mov	r0, r0
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0ffc:	9b04      	ldr	r3, [sp, #16]
 80a0ffe:	085b      	lsrs	r3, r3, #1
 80a1000:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1002:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1006:	3301      	adds	r3, #1
 80a1008:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a100a:	2b1f      	cmp	r3, #31
 80a100c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1010:	d87e      	bhi.n	80a1110 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1012:	79e3      	ldrb	r3, [r4, #7]
 80a1014:	6810      	ldr	r0, [r2, #0]
 80a1016:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a101a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a101e:	88bf      	ldrh	r7, [r7, #4]
 80a1020:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1024:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1026:	9803      	ldr	r0, [sp, #12]
 80a1028:	9b04      	ldr	r3, [sp, #16]
 80a102a:	4218      	tst	r0, r3
 80a102c:	f47f af76 	bne.w	80a0f1c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1030:	4600      	mov	r0, r0
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1058:	79e3      	ldrb	r3, [r4, #7]
 80a105a:	6810      	ldr	r0, [r2, #0]
 80a105c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1060:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1064:	88bf      	ldrh	r7, [r7, #4]
 80a1066:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a106a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a106c:	4600      	mov	r0, r0
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	e775      	b.n	80a0ffc <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1110:	468e      	mov	lr, r1
 80a1112:	e6ca      	b.n	80a0eaa <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1114:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1116:	2903      	cmp	r1, #3
 80a1118:	f000 812e 	beq.w	80a1378 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a111c:	4a1e      	ldr	r2, [pc, #120]	; (80a1198 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a111e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1122:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1124:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1128:	b29b      	uxth	r3, r3
 80a112a:	2b00      	cmp	r3, #0
 80a112c:	f43f ae2e 	beq.w	80a0d8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1130:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1132:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1136:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1138:	3b03      	subs	r3, #3
 80a113a:	b29b      	uxth	r3, r3
 80a113c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1140:	f89e 3000 	ldrb.w	r3, [lr]
 80a1144:	f10e 0103 	add.w	r1, lr, #3
 80a1148:	b2db      	uxtb	r3, r3
 80a114a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a114e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1152:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1156:	b2db      	uxtb	r3, r3
 80a1158:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a115c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1160:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1164:	b2db      	uxtb	r3, r3
 80a1166:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a116a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a116e:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1172:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1176:	021b      	lsls	r3, r3, #8
 80a1178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a117c:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1180:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1184:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1188:	433b      	orrs	r3, r7
 80a118a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a118c:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1190:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a1194:	e07d      	b.n	80a1292 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a1196:	bf00      	nop
 80a1198:	20000420 	.word	0x20000420
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a119c:	9b04      	ldr	r3, [sp, #16]
 80a119e:	085b      	lsrs	r3, r3, #1
 80a11a0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11a2:	4600      	mov	r0, r0
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1228:	79e0      	ldrb	r0, [r4, #7]
 80a122a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a122c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1230:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1234:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1238:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a123c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1240:	3301      	adds	r3, #1
 80a1242:	b2db      	uxtb	r3, r3
 80a1244:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1248:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a124c:	4600      	mov	r0, r0
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
          if(j==24) break;
 80a1276:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a127a:	2b18      	cmp	r3, #24
 80a127c:	d07a      	beq.n	80a1374 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a127e:	79e3      	ldrb	r3, [r4, #7]
 80a1280:	6810      	ldr	r0, [r2, #0]
 80a1282:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1286:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a128a:	88bf      	ldrh	r7, [r7, #4]
 80a128c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1290:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1292:	9803      	ldr	r0, [sp, #12]
 80a1294:	9b04      	ldr	r3, [sp, #16]
 80a1296:	4218      	tst	r0, r3
 80a1298:	d180      	bne.n	80a119c <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a129a:	4600      	mov	r0, r0
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a12bc:	79e3      	ldrb	r3, [r4, #7]
 80a12be:	6810      	ldr	r0, [r2, #0]
 80a12c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12c4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12c8:	88bf      	ldrh	r7, [r7, #4]
 80a12ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12ce:	831f      	strh	r7, [r3, #24]
          j++;
 80a12d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a12d4:	3301      	adds	r3, #1
 80a12d6:	b2db      	uxtb	r3, r3
 80a12d8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a12dc:	9b04      	ldr	r3, [sp, #16]
 80a12de:	085b      	lsrs	r3, r3, #1
 80a12e0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12e2:	4600      	mov	r0, r0
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
          if(j==24) break;
 80a136c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1370:	2b18      	cmp	r3, #24
 80a1372:	d184      	bne.n	80a127e <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1374:	468e      	mov	lr, r1
 80a1376:	e6d5      	b.n	80a1124 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1378:	4a17      	ldr	r2, [pc, #92]	; (80a13d8 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a137a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a137e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1380:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1384:	b29b      	uxth	r3, r3
 80a1386:	2b00      	cmp	r3, #0
 80a1388:	f43f ad00 	beq.w	80a0d8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a138c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a138e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1392:	f10e 0103 	add.w	r1, lr, #3
 80a1396:	3b03      	subs	r3, #3
 80a1398:	b29b      	uxth	r3, r3
 80a139a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a139e:	f89e 3000 	ldrb.w	r3, [lr]
 80a13a2:	b2db      	uxtb	r3, r3
 80a13a4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a13a8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a13ac:	b2db      	uxtb	r3, r3
 80a13ae:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a13b2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a13b6:	b2db      	uxtb	r3, r3
 80a13b8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a13bc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a13c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a13c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a13c8:	021b      	lsls	r3, r3, #8
 80a13ca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a13ce:	4303      	orrs	r3, r0
 80a13d0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a13d2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a13d6:	e0e0      	b.n	80a159a <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a13d8:	20000420 	.word	0x20000420
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13dc:	4600      	mov	r0, r0
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a14fe:	79e3      	ldrb	r3, [r4, #7]
 80a1500:	6810      	ldr	r0, [r2, #0]
 80a1502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1506:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a150a:	88bf      	ldrh	r7, [r7, #4]
 80a150c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1510:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1512:	4600      	mov	r0, r0
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1582:	9b04      	ldr	r3, [sp, #16]
 80a1584:	085b      	lsrs	r3, r3, #1
 80a1586:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1588:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a158c:	3301      	adds	r3, #1
 80a158e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1590:	2b17      	cmp	r3, #23
 80a1592:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1596:	f200 80e3 	bhi.w	80a1760 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a159a:	79e3      	ldrb	r3, [r4, #7]
 80a159c:	6810      	ldr	r0, [r2, #0]
 80a159e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15a6:	88bf      	ldrh	r7, [r7, #4]
 80a15a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15ac:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a15ae:	9803      	ldr	r0, [sp, #12]
 80a15b0:	9b04      	ldr	r3, [sp, #16]
 80a15b2:	4218      	tst	r0, r3
 80a15b4:	f47f af12 	bne.w	80a13dc <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15b8:	4600      	mov	r0, r0
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a163a:	79e3      	ldrb	r3, [r4, #7]
 80a163c:	6810      	ldr	r0, [r2, #0]
 80a163e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1642:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1646:	88bf      	ldrh	r7, [r7, #4]
 80a1648:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a164c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a164e:	4600      	mov	r0, r0
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	e710      	b.n	80a1582 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1760:	468e      	mov	lr, r1
 80a1762:	e60d      	b.n	80a1380 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1764 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1764:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1766:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1768:	428b      	cmp	r3, r1
 80a176a:	d945      	bls.n	80a17f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a176c:	7a05      	ldrb	r5, [r0, #8]
 80a176e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1772:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1776:	b2d6      	uxtb	r6, r2
 80a1778:	b145      	cbz	r5, 80a178c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a177a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a177c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a177e:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1780:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1784:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1788:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a178c:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1790:	68c7      	ldr	r7, [r0, #12]
 80a1792:	f1bc 0f06 	cmp.w	ip, #6
 80a1796:	bf0c      	ite	eq
 80a1798:	2504      	moveq	r5, #4
 80a179a:	2503      	movne	r5, #3
 80a179c:	4369      	muls	r1, r5
 80a179e:	f1bc 0f08 	cmp.w	ip, #8
 80a17a2:	eb07 0501 	add.w	r5, r7, r1
 80a17a6:	d824      	bhi.n	80a17f2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a17a8:	f04f 0e01 	mov.w	lr, #1
 80a17ac:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a17b0:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a17b4:	d10c      	bne.n	80a17d0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a17b6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a17ba:	d10d      	bne.n	80a17d8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a17bc:	f01e 0f10 	tst.w	lr, #16
 80a17c0:	d017      	beq.n	80a17f2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a17c2:	2bff      	cmp	r3, #255	; 0xff
 80a17c4:	bf08      	it	eq
 80a17c6:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a17c8:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a17ca:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a17cc:	70ac      	strb	r4, [r5, #2]
        } break;
 80a17ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a17d0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a17d2:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a17d4:	70ae      	strb	r6, [r5, #2]
        } break;
 80a17d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a17d8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a17da:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a17dc:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a17de:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a17e0:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a17e2:	b90b      	cbnz	r3, 80a17e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a17e4:	b2d2      	uxtb	r2, r2
 80a17e6:	e002      	b.n	80a17ee <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a17e8:	435a      	muls	r2, r3
 80a17ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a17ee:	70ea      	strb	r2, [r5, #3]
        } break;
 80a17f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a17f2:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a17f4:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a17f6:	70ae      	strb	r6, [r5, #2]
 80a17f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a17fa <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a17fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a17fe:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1802:	4770      	bx	lr

080a1804 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a1804:	8840      	ldrh	r0, [r0, #2]
 80a1806:	4770      	bx	lr

080a1808 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1808:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a180a:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a180c:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a180e:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1810:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1812:	d01e      	beq.n	80a1852 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1814:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1816:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a181a:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a181c:	d00c      	beq.n	80a1838 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a181e:	29ff      	cmp	r1, #255	; 0xff
 80a1820:	bf0f      	iteee	eq
 80a1822:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1826:	0211      	lslne	r1, r2, #8
 80a1828:	f101 31ff 	addne.w	r1, r1, #4294967295
 80a182c:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1830:	bf0c      	ite	eq
 80a1832:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1836:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1838:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a183a:	1b29      	subs	r1, r5, r4
 80a183c:	8886      	ldrh	r6, [r0, #4]
 80a183e:	b289      	uxth	r1, r1
 80a1840:	428e      	cmp	r6, r1
 80a1842:	d905      	bls.n	80a1850 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a1844:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a1846:	4359      	muls	r1, r3
 80a1848:	1209      	asrs	r1, r1, #8
 80a184a:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a184e:	e7f4      	b.n	80a183a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a1850:	7202      	strb	r2, [r0, #8]
 80a1852:	bd70      	pop	{r4, r5, r6, pc}

080a1854 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1854:	b508      	push	{r3, lr}
 80a1856:	f000 f807 	bl	80a1868 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a185a:	f000 f805 	bl	80a1868 <HAL_Pin_Map>
 80a185e:	4b01      	ldr	r3, [pc, #4]	; (80a1864 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1860:	6018      	str	r0, [r3, #0]
 80a1862:	bd08      	pop	{r3, pc}
 80a1864:	20000420 	.word	0x20000420

080a1868 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <HAL_Pin_Map+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	681b      	ldr	r3, [r3, #0]
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	080601b0 	.word	0x080601b0

080a1878 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <HAL_Pin_Mode+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	689b      	ldr	r3, [r3, #8]
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601b0 	.word	0x080601b0

080a1888 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <HAL_Get_Pin_Mode+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	68db      	ldr	r3, [r3, #12]
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	080601b0 	.word	0x080601b0

080a1898 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <HAL_GPIO_Write+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	691b      	ldr	r3, [r3, #16]
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601b0 	.word	0x080601b0

080a18a8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <HAL_SPI_Init+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	69db      	ldr	r3, [r3, #28]
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601b4 	.word	0x080601b4

080a18b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <HAL_SPI_Is_Enabled+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	6a1b      	ldr	r3, [r3, #32]
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601b4 	.word	0x080601b4

080a18c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <HAL_RNG_GetRandomNumber+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	685b      	ldr	r3, [r3, #4]
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	0806019c 	.word	0x0806019c

080a18d8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	691b      	ldr	r3, [r3, #16]
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	0806019c 	.word	0x0806019c

080a18e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	695b      	ldr	r3, [r3, #20]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	0806019c 	.word	0x0806019c

080a18f8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <HAL_RTC_Get_UnixTime+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	69db      	ldr	r3, [r3, #28]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	0806019c 	.word	0x0806019c

080a1908 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <HAL_EEPROM_Init+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	0806019c 	.word	0x0806019c

080a1918 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <HAL_EEPROM_Get+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	0806019c 	.word	0x0806019c

080a1928 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <HAL_EEPROM_Put+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	0806019c 	.word	0x0806019c

080a1938 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <HAL_RTC_Time_Is_Valid+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	0806019c 	.word	0x0806019c

080a1948 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <os_mutex_create+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601d0 	.word	0x080601d0

080a1958 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <HAL_USART_Init+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	699b      	ldr	r3, [r3, #24]
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601c4 	.word	0x080601c4

080a1968 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <HAL_USART_Write_Data+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601c4 	.word	0x080601c4

080a1978 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <HAL_USART_Available_Data+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601c4 	.word	0x080601c4

080a1988 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <HAL_USART_Read_Data+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601c4 	.word	0x080601c4

080a1998 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <HAL_USART_Peek_Data+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601c4 	.word	0x080601c4

080a19a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <HAL_USART_Flush_Data+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601c4 	.word	0x080601c4

080a19b8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <HAL_USART_Is_Enabled+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601c4 	.word	0x080601c4

080a19c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a19c8:	b508      	push	{r3, lr}
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a19cc:	681b      	ldr	r3, [r3, #0]
 80a19ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a19d0:	9301      	str	r3, [sp, #4]
 80a19d2:	bd08      	pop	{r3, pc}
 80a19d4:	080601c4 	.word	0x080601c4

080a19d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a19d8:	b508      	push	{r3, lr}
 80a19da:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <HAL_I2C_Write_Data+0xc>)
 80a19dc:	681b      	ldr	r3, [r3, #0]
 80a19de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a19e0:	9301      	str	r3, [sp, #4]
 80a19e2:	bd08      	pop	{r3, pc}
 80a19e4:	080601ac 	.word	0x080601ac

080a19e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <HAL_I2C_Available_Data+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601ac 	.word	0x080601ac

080a19f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a19f8:	b508      	push	{r3, lr}
 80a19fa:	4b02      	ldr	r3, [pc, #8]	; (80a1a04 <HAL_I2C_Read_Data+0xc>)
 80a19fc:	681b      	ldr	r3, [r3, #0]
 80a19fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1a00:	9301      	str	r3, [sp, #4]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	080601ac 	.word	0x080601ac

080a1a08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1a08:	b508      	push	{r3, lr}
 80a1a0a:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <HAL_I2C_Peek_Data+0xc>)
 80a1a0c:	681b      	ldr	r3, [r3, #0]
 80a1a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1a10:	9301      	str	r3, [sp, #4]
 80a1a12:	bd08      	pop	{r3, pc}
 80a1a14:	080601ac 	.word	0x080601ac

080a1a18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <HAL_I2C_Flush_Data+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601ac 	.word	0x080601ac

080a1a28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1a28:	b508      	push	{r3, lr}
 80a1a2a:	4b02      	ldr	r3, [pc, #8]	; (80a1a34 <HAL_I2C_Is_Enabled+0xc>)
 80a1a2c:	681b      	ldr	r3, [r3, #0]
 80a1a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1a30:	9301      	str	r3, [sp, #4]
 80a1a32:	bd08      	pop	{r3, pc}
 80a1a34:	080601ac 	.word	0x080601ac

080a1a38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b03      	ldr	r3, [pc, #12]	; (80a1a48 <HAL_I2C_Init+0x10>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1a42:	9301      	str	r3, [sp, #4]
 80a1a44:	bd08      	pop	{r3, pc}
 80a1a46:	0000      	.short	0x0000
 80a1a48:	080601ac 	.word	0x080601ac

080a1a4c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1a4c:	b508      	push	{r3, lr}
 80a1a4e:	4b02      	ldr	r3, [pc, #8]	; (80a1a58 <HAL_USB_USART_Init+0xc>)
 80a1a50:	681b      	ldr	r3, [r3, #0]
 80a1a52:	681b      	ldr	r3, [r3, #0]
 80a1a54:	9301      	str	r3, [sp, #4]
 80a1a56:	bd08      	pop	{r3, pc}
 80a1a58:	080601d8 	.word	0x080601d8

080a1a5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a5c:	b508      	push	{r3, lr}
 80a1a5e:	4b02      	ldr	r3, [pc, #8]	; (80a1a68 <HAL_USB_USART_Available_Data+0xc>)
 80a1a60:	681b      	ldr	r3, [r3, #0]
 80a1a62:	691b      	ldr	r3, [r3, #16]
 80a1a64:	9301      	str	r3, [sp, #4]
 80a1a66:	bd08      	pop	{r3, pc}
 80a1a68:	080601d8 	.word	0x080601d8

080a1a6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1a6c:	b508      	push	{r3, lr}
 80a1a6e:	4b02      	ldr	r3, [pc, #8]	; (80a1a78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1a70:	681b      	ldr	r3, [r3, #0]
 80a1a72:	695b      	ldr	r3, [r3, #20]
 80a1a74:	9301      	str	r3, [sp, #4]
 80a1a76:	bd08      	pop	{r3, pc}
 80a1a78:	080601d8 	.word	0x080601d8

080a1a7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a7c:	b508      	push	{r3, lr}
 80a1a7e:	4b02      	ldr	r3, [pc, #8]	; (80a1a88 <HAL_USB_USART_Receive_Data+0xc>)
 80a1a80:	681b      	ldr	r3, [r3, #0]
 80a1a82:	699b      	ldr	r3, [r3, #24]
 80a1a84:	9301      	str	r3, [sp, #4]
 80a1a86:	bd08      	pop	{r3, pc}
 80a1a88:	080601d8 	.word	0x080601d8

080a1a8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a8c:	b508      	push	{r3, lr}
 80a1a8e:	4b02      	ldr	r3, [pc, #8]	; (80a1a98 <HAL_USB_USART_Send_Data+0xc>)
 80a1a90:	681b      	ldr	r3, [r3, #0]
 80a1a92:	69db      	ldr	r3, [r3, #28]
 80a1a94:	9301      	str	r3, [sp, #4]
 80a1a96:	bd08      	pop	{r3, pc}
 80a1a98:	080601d8 	.word	0x080601d8

080a1a9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a9c:	b508      	push	{r3, lr}
 80a1a9e:	4b02      	ldr	r3, [pc, #8]	; (80a1aa8 <HAL_USB_USART_Flush_Data+0xc>)
 80a1aa0:	681b      	ldr	r3, [r3, #0]
 80a1aa2:	6a1b      	ldr	r3, [r3, #32]
 80a1aa4:	9301      	str	r3, [sp, #4]
 80a1aa6:	bd08      	pop	{r3, pc}
 80a1aa8:	080601d8 	.word	0x080601d8

080a1aac <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1aac:	b508      	push	{r3, lr}
 80a1aae:	4b02      	ldr	r3, [pc, #8]	; (80a1ab8 <inet_gethostbyname+0xc>)
 80a1ab0:	681b      	ldr	r3, [r3, #0]
 80a1ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ab4:	9301      	str	r3, [sp, #4]
 80a1ab6:	bd08      	pop	{r3, pc}
 80a1ab8:	080601c0 	.word	0x080601c0

080a1abc <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1abc:	b508      	push	{r3, lr}
 80a1abe:	4b02      	ldr	r3, [pc, #8]	; (80a1ac8 <system_mode+0xc>)
 80a1ac0:	681b      	ldr	r3, [r3, #0]
 80a1ac2:	681b      	ldr	r3, [r3, #0]
 80a1ac4:	9301      	str	r3, [sp, #4]
 80a1ac6:	bd08      	pop	{r3, pc}
 80a1ac8:	080601a4 	.word	0x080601a4

080a1acc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1acc:	b508      	push	{r3, lr}
 80a1ace:	4b02      	ldr	r3, [pc, #8]	; (80a1ad8 <set_system_mode+0xc>)
 80a1ad0:	681b      	ldr	r3, [r3, #0]
 80a1ad2:	685b      	ldr	r3, [r3, #4]
 80a1ad4:	9301      	str	r3, [sp, #4]
 80a1ad6:	bd08      	pop	{r3, pc}
 80a1ad8:	080601a4 	.word	0x080601a4

080a1adc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1adc:	b508      	push	{r3, lr}
 80a1ade:	4b02      	ldr	r3, [pc, #8]	; (80a1ae8 <system_delay_ms+0xc>)
 80a1ae0:	681b      	ldr	r3, [r3, #0]
 80a1ae2:	695b      	ldr	r3, [r3, #20]
 80a1ae4:	9301      	str	r3, [sp, #4]
 80a1ae6:	bd08      	pop	{r3, pc}
 80a1ae8:	080601a4 	.word	0x080601a4

080a1aec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1aec:	b508      	push	{r3, lr}
 80a1aee:	4b02      	ldr	r3, [pc, #8]	; (80a1af8 <application_thread_current+0xc>)
 80a1af0:	681b      	ldr	r3, [r3, #0]
 80a1af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1af4:	9301      	str	r3, [sp, #4]
 80a1af6:	bd08      	pop	{r3, pc}
 80a1af8:	080601a4 	.word	0x080601a4

080a1afc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1afc:	b508      	push	{r3, lr}
 80a1afe:	4b02      	ldr	r3, [pc, #8]	; (80a1b08 <application_thread_invoke+0xc>)
 80a1b00:	681b      	ldr	r3, [r3, #0]
 80a1b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1b04:	9301      	str	r3, [sp, #4]
 80a1b06:	bd08      	pop	{r3, pc}
 80a1b08:	080601a4 	.word	0x080601a4

080a1b0c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1b0c:	b508      	push	{r3, lr}
 80a1b0e:	4b02      	ldr	r3, [pc, #8]	; (80a1b18 <system_thread_get_state+0xc>)
 80a1b10:	681b      	ldr	r3, [r3, #0]
 80a1b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1b14:	9301      	str	r3, [sp, #4]
 80a1b16:	bd08      	pop	{r3, pc}
 80a1b18:	080601a4 	.word	0x080601a4

080a1b1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1b1c:	b508      	push	{r3, lr}
 80a1b1e:	4b03      	ldr	r3, [pc, #12]	; (80a1b2c <system_ctrl_set_app_request_handler+0x10>)
 80a1b20:	681b      	ldr	r3, [r3, #0]
 80a1b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1b26:	9301      	str	r3, [sp, #4]
 80a1b28:	bd08      	pop	{r3, pc}
 80a1b2a:	0000      	.short	0x0000
 80a1b2c:	080601a4 	.word	0x080601a4

080a1b30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	4b03      	ldr	r3, [pc, #12]	; (80a1b40 <system_ctrl_set_result+0x10>)
 80a1b34:	681b      	ldr	r3, [r3, #0]
 80a1b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1b3a:	9301      	str	r3, [sp, #4]
 80a1b3c:	bd08      	pop	{r3, pc}
 80a1b3e:	0000      	.short	0x0000
 80a1b40:	080601a4 	.word	0x080601a4

080a1b44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b44:	b508      	push	{r3, lr}
 80a1b46:	4b02      	ldr	r3, [pc, #8]	; (80a1b50 <network_connect+0xc>)
 80a1b48:	681b      	ldr	r3, [r3, #0]
 80a1b4a:	685b      	ldr	r3, [r3, #4]
 80a1b4c:	9301      	str	r3, [sp, #4]
 80a1b4e:	bd08      	pop	{r3, pc}
 80a1b50:	080601c8 	.word	0x080601c8

080a1b54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1b54:	b508      	push	{r3, lr}
 80a1b56:	4b02      	ldr	r3, [pc, #8]	; (80a1b60 <network_connecting+0xc>)
 80a1b58:	681b      	ldr	r3, [r3, #0]
 80a1b5a:	689b      	ldr	r3, [r3, #8]
 80a1b5c:	9301      	str	r3, [sp, #4]
 80a1b5e:	bd08      	pop	{r3, pc}
 80a1b60:	080601c8 	.word	0x080601c8

080a1b64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1b64:	b508      	push	{r3, lr}
 80a1b66:	4b02      	ldr	r3, [pc, #8]	; (80a1b70 <network_disconnect+0xc>)
 80a1b68:	681b      	ldr	r3, [r3, #0]
 80a1b6a:	68db      	ldr	r3, [r3, #12]
 80a1b6c:	9301      	str	r3, [sp, #4]
 80a1b6e:	bd08      	pop	{r3, pc}
 80a1b70:	080601c8 	.word	0x080601c8

080a1b74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1b74:	b508      	push	{r3, lr}
 80a1b76:	4b02      	ldr	r3, [pc, #8]	; (80a1b80 <network_ready+0xc>)
 80a1b78:	681b      	ldr	r3, [r3, #0]
 80a1b7a:	691b      	ldr	r3, [r3, #16]
 80a1b7c:	9301      	str	r3, [sp, #4]
 80a1b7e:	bd08      	pop	{r3, pc}
 80a1b80:	080601c8 	.word	0x080601c8

080a1b84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b84:	b508      	push	{r3, lr}
 80a1b86:	4b02      	ldr	r3, [pc, #8]	; (80a1b90 <network_on+0xc>)
 80a1b88:	681b      	ldr	r3, [r3, #0]
 80a1b8a:	695b      	ldr	r3, [r3, #20]
 80a1b8c:	9301      	str	r3, [sp, #4]
 80a1b8e:	bd08      	pop	{r3, pc}
 80a1b90:	080601c8 	.word	0x080601c8

080a1b94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b94:	b508      	push	{r3, lr}
 80a1b96:	4b02      	ldr	r3, [pc, #8]	; (80a1ba0 <network_off+0xc>)
 80a1b98:	681b      	ldr	r3, [r3, #0]
 80a1b9a:	699b      	ldr	r3, [r3, #24]
 80a1b9c:	9301      	str	r3, [sp, #4]
 80a1b9e:	bd08      	pop	{r3, pc}
 80a1ba0:	080601c8 	.word	0x080601c8

080a1ba4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1ba4:	b508      	push	{r3, lr}
 80a1ba6:	4b02      	ldr	r3, [pc, #8]	; (80a1bb0 <network_listen+0xc>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	69db      	ldr	r3, [r3, #28]
 80a1bac:	9301      	str	r3, [sp, #4]
 80a1bae:	bd08      	pop	{r3, pc}
 80a1bb0:	080601c8 	.word	0x080601c8

080a1bb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1bb4:	b508      	push	{r3, lr}
 80a1bb6:	4b02      	ldr	r3, [pc, #8]	; (80a1bc0 <network_listening+0xc>)
 80a1bb8:	681b      	ldr	r3, [r3, #0]
 80a1bba:	6a1b      	ldr	r3, [r3, #32]
 80a1bbc:	9301      	str	r3, [sp, #4]
 80a1bbe:	bd08      	pop	{r3, pc}
 80a1bc0:	080601c8 	.word	0x080601c8

080a1bc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1bc4:	b508      	push	{r3, lr}
 80a1bc6:	4b02      	ldr	r3, [pc, #8]	; (80a1bd0 <network_set_listen_timeout+0xc>)
 80a1bc8:	681b      	ldr	r3, [r3, #0]
 80a1bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1bcc:	9301      	str	r3, [sp, #4]
 80a1bce:	bd08      	pop	{r3, pc}
 80a1bd0:	080601c8 	.word	0x080601c8

080a1bd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1bd4:	b508      	push	{r3, lr}
 80a1bd6:	4b02      	ldr	r3, [pc, #8]	; (80a1be0 <network_get_listen_timeout+0xc>)
 80a1bd8:	681b      	ldr	r3, [r3, #0]
 80a1bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1bdc:	9301      	str	r3, [sp, #4]
 80a1bde:	bd08      	pop	{r3, pc}
 80a1be0:	080601c8 	.word	0x080601c8

080a1be4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1be4:	b508      	push	{r3, lr}
 80a1be6:	4b02      	ldr	r3, [pc, #8]	; (80a1bf0 <spark_variable+0xc>)
 80a1be8:	681b      	ldr	r3, [r3, #0]
 80a1bea:	681b      	ldr	r3, [r3, #0]
 80a1bec:	9301      	str	r3, [sp, #4]
 80a1bee:	bd08      	pop	{r3, pc}
 80a1bf0:	080601cc 	.word	0x080601cc

080a1bf4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1bf4:	b508      	push	{r3, lr}
 80a1bf6:	4b02      	ldr	r3, [pc, #8]	; (80a1c00 <spark_function+0xc>)
 80a1bf8:	681b      	ldr	r3, [r3, #0]
 80a1bfa:	685b      	ldr	r3, [r3, #4]
 80a1bfc:	9301      	str	r3, [sp, #4]
 80a1bfe:	bd08      	pop	{r3, pc}
 80a1c00:	080601cc 	.word	0x080601cc

080a1c04 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1c04:	b508      	push	{r3, lr}
 80a1c06:	4b02      	ldr	r3, [pc, #8]	; (80a1c10 <spark_process+0xc>)
 80a1c08:	681b      	ldr	r3, [r3, #0]
 80a1c0a:	689b      	ldr	r3, [r3, #8]
 80a1c0c:	9301      	str	r3, [sp, #4]
 80a1c0e:	bd08      	pop	{r3, pc}
 80a1c10:	080601cc 	.word	0x080601cc

080a1c14 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1c14:	b508      	push	{r3, lr}
 80a1c16:	4b02      	ldr	r3, [pc, #8]	; (80a1c20 <spark_cloud_flag_connected+0xc>)
 80a1c18:	681b      	ldr	r3, [r3, #0]
 80a1c1a:	695b      	ldr	r3, [r3, #20]
 80a1c1c:	9301      	str	r3, [sp, #4]
 80a1c1e:	bd08      	pop	{r3, pc}
 80a1c20:	080601cc 	.word	0x080601cc

080a1c24 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1c24:	b508      	push	{r3, lr}
 80a1c26:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <spark_send_event+0xc>)
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	6a1b      	ldr	r3, [r3, #32]
 80a1c2c:	9301      	str	r3, [sp, #4]
 80a1c2e:	bd08      	pop	{r3, pc}
 80a1c30:	080601cc 	.word	0x080601cc

080a1c34 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1c34:	b508      	push	{r3, lr}
 80a1c36:	4b02      	ldr	r3, [pc, #8]	; (80a1c40 <spark_sync_time_pending+0xc>)
 80a1c38:	681b      	ldr	r3, [r3, #0]
 80a1c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1c3c:	9301      	str	r3, [sp, #4]
 80a1c3e:	bd08      	pop	{r3, pc}
 80a1c40:	080601cc 	.word	0x080601cc

080a1c44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1c44:	b508      	push	{r3, lr}
 80a1c46:	4b02      	ldr	r3, [pc, #8]	; (80a1c50 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1c48:	681b      	ldr	r3, [r3, #0]
 80a1c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1c4c:	9301      	str	r3, [sp, #4]
 80a1c4e:	bd08      	pop	{r3, pc}
 80a1c50:	080601cc 	.word	0x080601cc

080a1c54 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1c54:	b508      	push	{r3, lr}
 80a1c56:	4b02      	ldr	r3, [pc, #8]	; (80a1c60 <malloc+0xc>)
 80a1c58:	681b      	ldr	r3, [r3, #0]
 80a1c5a:	681b      	ldr	r3, [r3, #0]
 80a1c5c:	9301      	str	r3, [sp, #4]
 80a1c5e:	bd08      	pop	{r3, pc}
 80a1c60:	080601a0 	.word	0x080601a0

080a1c64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1c64:	b508      	push	{r3, lr}
 80a1c66:	4b02      	ldr	r3, [pc, #8]	; (80a1c70 <free+0xc>)
 80a1c68:	681b      	ldr	r3, [r3, #0]
 80a1c6a:	685b      	ldr	r3, [r3, #4]
 80a1c6c:	9301      	str	r3, [sp, #4]
 80a1c6e:	bd08      	pop	{r3, pc}
 80a1c70:	080601a0 	.word	0x080601a0

080a1c74 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1c74:	b508      	push	{r3, lr}
 80a1c76:	4b02      	ldr	r3, [pc, #8]	; (80a1c80 <realloc+0xc>)
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	689b      	ldr	r3, [r3, #8]
 80a1c7c:	9301      	str	r3, [sp, #4]
 80a1c7e:	bd08      	pop	{r3, pc}
 80a1c80:	080601a0 	.word	0x080601a0

080a1c84 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1c84:	b508      	push	{r3, lr}
 80a1c86:	4b02      	ldr	r3, [pc, #8]	; (80a1c90 <siscanf+0xc>)
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	699b      	ldr	r3, [r3, #24]
 80a1c8c:	9301      	str	r3, [sp, #4]
 80a1c8e:	bd08      	pop	{r3, pc}
 80a1c90:	080601a0 	.word	0x080601a0

080a1c94 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1c94:	b508      	push	{r3, lr}
 80a1c96:	4b02      	ldr	r3, [pc, #8]	; (80a1ca0 <vsnprintf+0xc>)
 80a1c98:	681b      	ldr	r3, [r3, #0]
 80a1c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1c9c:	9301      	str	r3, [sp, #4]
 80a1c9e:	bd08      	pop	{r3, pc}
 80a1ca0:	080601a0 	.word	0x080601a0

080a1ca4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1ca4:	b508      	push	{r3, lr}
 80a1ca6:	4b02      	ldr	r3, [pc, #8]	; (80a1cb0 <abort+0xc>)
 80a1ca8:	681b      	ldr	r3, [r3, #0]
 80a1caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1cac:	9301      	str	r3, [sp, #4]
 80a1cae:	bd08      	pop	{r3, pc}
 80a1cb0:	080601a0 	.word	0x080601a0

080a1cb4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1cb4:	b508      	push	{r3, lr}
 80a1cb6:	4b02      	ldr	r3, [pc, #8]	; (80a1cc0 <_malloc_r+0xc>)
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1cbc:	9301      	str	r3, [sp, #4]
 80a1cbe:	bd08      	pop	{r3, pc}
 80a1cc0:	080601a0 	.word	0x080601a0

080a1cc4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1cc4:	4770      	bx	lr

080a1cc6 <_ZN8SPIClassD0Ev>:
 80a1cc6:	b510      	push	{r4, lr}
 80a1cc8:	4604      	mov	r4, r0
 80a1cca:	f7fe f9e8 	bl	80a009e <_ZdlPv>
 80a1cce:	4620      	mov	r0, r4
 80a1cd0:	bd10      	pop	{r4, pc}
	...

080a1cd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1cd4:	b570      	push	{r4, r5, r6, lr}
 80a1cd6:	4604      	mov	r4, r0
 80a1cd8:	460e      	mov	r6, r1
 80a1cda:	4b07      	ldr	r3, [pc, #28]	; (80a1cf8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1cdc:	2500      	movs	r5, #0
 80a1cde:	6003      	str	r3, [r0, #0]
 80a1ce0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1ce4:	f7ff fe30 	bl	80a1948 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1ce8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1cea:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1cec:	f7ff fddc 	bl	80a18a8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1cf0:	60a5      	str	r5, [r4, #8]
}
 80a1cf2:	4620      	mov	r0, r4
 80a1cf4:	bd70      	pop	{r4, r5, r6, pc}
 80a1cf6:	bf00      	nop
 80a1cf8:	080a42c4 	.word	0x080a42c4

080a1cfc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1cfc:	7900      	ldrb	r0, [r0, #4]
 80a1cfe:	f7ff bddb 	b.w	80a18b8 <HAL_SPI_Is_Enabled>
	...

080a1d04 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1d08:	4b03      	ldr	r3, [pc, #12]	; (80a1d18 <_GLOBAL__sub_I_System+0x14>)
 80a1d0a:	2000      	movs	r0, #0
 80a1d0c:	7018      	strb	r0, [r3, #0]
 80a1d0e:	8058      	strh	r0, [r3, #2]
 80a1d10:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1d12:	f7ff bedb 	b.w	80a1acc <set_system_mode>
 80a1d16:	bf00      	nop
 80a1d18:	20000424 	.word	0x20000424

080a1d1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1d1c:	b510      	push	{r4, lr}
 80a1d1e:	4604      	mov	r4, r0
{
	free(buffer);
 80a1d20:	6800      	ldr	r0, [r0, #0]
 80a1d22:	f7ff ff9f 	bl	80a1c64 <free>
}
 80a1d26:	4620      	mov	r0, r4
 80a1d28:	bd10      	pop	{r4, pc}

080a1d2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1d2a:	b510      	push	{r4, lr}
 80a1d2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1d2e:	6800      	ldr	r0, [r0, #0]
 80a1d30:	b108      	cbz	r0, 80a1d36 <_ZN6String10invalidateEv+0xc>
 80a1d32:	f7ff ff97 	bl	80a1c64 <free>
	buffer = NULL;
 80a1d36:	2300      	movs	r3, #0
 80a1d38:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1d3a:	60a3      	str	r3, [r4, #8]
 80a1d3c:	6063      	str	r3, [r4, #4]
 80a1d3e:	bd10      	pop	{r4, pc}

080a1d40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1d40:	b538      	push	{r3, r4, r5, lr}
 80a1d42:	4604      	mov	r4, r0
 80a1d44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1d46:	6800      	ldr	r0, [r0, #0]
 80a1d48:	3101      	adds	r1, #1
 80a1d4a:	f7ff ff93 	bl	80a1c74 <realloc>
	if (newbuffer) {
 80a1d4e:	b110      	cbz	r0, 80a1d56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1d50:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1d54:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1d56:	bd38      	pop	{r3, r4, r5, pc}

080a1d58 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1d58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1d5a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1d5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1d5e:	b113      	cbz	r3, 80a1d66 <_ZN6String7reserveEj+0xe>
 80a1d60:	6843      	ldr	r3, [r0, #4]
 80a1d62:	428b      	cmp	r3, r1
 80a1d64:	d207      	bcs.n	80a1d76 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	f7ff ffea 	bl	80a1d40 <_ZN6String12changeBufferEj>
 80a1d6c:	b120      	cbz	r0, 80a1d78 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1d6e:	68a3      	ldr	r3, [r4, #8]
 80a1d70:	b90b      	cbnz	r3, 80a1d76 <_ZN6String7reserveEj+0x1e>
 80a1d72:	6822      	ldr	r2, [r4, #0]
 80a1d74:	7013      	strb	r3, [r2, #0]
 80a1d76:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1d78:	bd10      	pop	{r4, pc}

080a1d7a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d7a:	b570      	push	{r4, r5, r6, lr}
 80a1d7c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1d7e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d80:	4604      	mov	r4, r0
 80a1d82:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1d84:	f7ff ffe8 	bl	80a1d58 <_ZN6String7reserveEj>
 80a1d88:	b918      	cbnz	r0, 80a1d92 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1d8a:	4620      	mov	r0, r4
 80a1d8c:	f7ff ffcd 	bl	80a1d2a <_ZN6String10invalidateEv>
		return *this;
 80a1d90:	e009      	b.n	80a1da6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1d92:	462a      	mov	r2, r5
 80a1d94:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1d96:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1d98:	6820      	ldr	r0, [r4, #0]
 80a1d9a:	f001 fdb3 	bl	80a3904 <memcpy>
	buffer[len] = 0;
 80a1d9e:	6822      	ldr	r2, [r4, #0]
 80a1da0:	68a3      	ldr	r3, [r4, #8]
 80a1da2:	2100      	movs	r1, #0
 80a1da4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1da6:	4620      	mov	r0, r4
 80a1da8:	bd70      	pop	{r4, r5, r6, pc}

080a1daa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1daa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1dac:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1dae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1db0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1db2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1db4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1db6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1db8:	460d      	mov	r5, r1
 80a1dba:	b139      	cbz	r1, 80a1dcc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1dbc:	4608      	mov	r0, r1
 80a1dbe:	f001 fe0a 	bl	80a39d6 <strlen>
 80a1dc2:	4629      	mov	r1, r5
 80a1dc4:	4602      	mov	r2, r0
 80a1dc6:	4620      	mov	r0, r4
 80a1dc8:	f7ff ffd7 	bl	80a1d7a <_ZN6String4copyEPKcj>
}
 80a1dcc:	4620      	mov	r0, r4
 80a1dce:	bd38      	pop	{r3, r4, r5, pc}

080a1dd0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1dd0:	b538      	push	{r3, r4, r5, lr}
 80a1dd2:	4605      	mov	r5, r0
	if (buffer) {
 80a1dd4:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1dd6:	460c      	mov	r4, r1
	if (buffer) {
 80a1dd8:	b160      	cbz	r0, 80a1df4 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a1dda:	686a      	ldr	r2, [r5, #4]
 80a1ddc:	688b      	ldr	r3, [r1, #8]
 80a1dde:	429a      	cmp	r2, r3
 80a1de0:	d306      	bcc.n	80a1df0 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1de2:	6809      	ldr	r1, [r1, #0]
 80a1de4:	f001 fdd4 	bl	80a3990 <strcpy>
			len = rhs.len;
 80a1de8:	68a3      	ldr	r3, [r4, #8]
 80a1dea:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a1dec:	2300      	movs	r3, #0
 80a1dee:	e00a      	b.n	80a1e06 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a1df0:	f7ff ff38 	bl	80a1c64 <free>
		}
	}
	buffer = rhs.buffer;
 80a1df4:	6823      	ldr	r3, [r4, #0]
 80a1df6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1df8:	6863      	ldr	r3, [r4, #4]
 80a1dfa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a1dfc:	68a3      	ldr	r3, [r4, #8]
 80a1dfe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1e00:	2300      	movs	r3, #0
 80a1e02:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1e04:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1e06:	60a3      	str	r3, [r4, #8]
 80a1e08:	bd38      	pop	{r3, r4, r5, pc}

080a1e0a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1e0a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1e0c:	b510      	push	{r4, lr}
 80a1e0e:	460b      	mov	r3, r1
 80a1e10:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1e12:	d007      	beq.n	80a1e24 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1e14:	6809      	ldr	r1, [r1, #0]
 80a1e16:	b119      	cbz	r1, 80a1e20 <_ZN6StringaSERKS_+0x16>
 80a1e18:	689a      	ldr	r2, [r3, #8]
 80a1e1a:	f7ff ffae 	bl	80a1d7a <_ZN6String4copyEPKcj>
 80a1e1e:	e001      	b.n	80a1e24 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1e20:	f7ff ff83 	bl	80a1d2a <_ZN6String10invalidateEv>

	return *this;
}
 80a1e24:	4620      	mov	r0, r4
 80a1e26:	bd10      	pop	{r4, pc}

080a1e28 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1e28:	b510      	push	{r4, lr}
 80a1e2a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1e2c:	2300      	movs	r3, #0
 80a1e2e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1e30:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1e32:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1e34:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1e36:	f7ff ffe8 	bl	80a1e0a <_ZN6StringaSERKS_>
}
 80a1e3a:	4620      	mov	r0, r4
 80a1e3c:	bd10      	pop	{r4, pc}

080a1e3e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1e3e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a1e40:	b510      	push	{r4, lr}
 80a1e42:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a1e44:	d001      	beq.n	80a1e4a <_ZN6StringaSEOS_+0xc>
 80a1e46:	f7ff ffc3 	bl	80a1dd0 <_ZN6String4moveERS_>
	return *this;
}
 80a1e4a:	4620      	mov	r0, r4
 80a1e4c:	bd10      	pop	{r4, pc}

080a1e4e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1e4e:	6800      	ldr	r0, [r0, #0]
 80a1e50:	b108      	cbz	r0, 80a1e56 <_ZNK6String5toIntEv+0x8>
 80a1e52:	f001 bc4d 	b.w	80a36f0 <atol>
	return 0;
}
 80a1e56:	4770      	bx	lr

080a1e58 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a1e58:	b40e      	push	{r1, r2, r3}
 80a1e5a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a1e5c:	ac09      	add	r4, sp, #36	; 0x24
 80a1e5e:	f854 7b04 	ldr.w	r7, [r4], #4
 80a1e62:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1e64:	4623      	mov	r3, r4
 80a1e66:	463a      	mov	r2, r7
 80a1e68:	2105      	movs	r1, #5
 80a1e6a:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a1e6c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1e6e:	f7ff ff11 	bl	80a1c94 <vsnprintf>
 80a1e72:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a1e74:	490b      	ldr	r1, [pc, #44]	; (80a1ea4 <_ZN6String6formatEPKcz+0x4c>)
 80a1e76:	4628      	mov	r0, r5
 80a1e78:	f7ff ff97 	bl	80a1daa <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a1e7c:	4631      	mov	r1, r6
 80a1e7e:	4628      	mov	r0, r5
 80a1e80:	f7ff ff6a 	bl	80a1d58 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a1e84:	6828      	ldr	r0, [r5, #0]
 80a1e86:	b130      	cbz	r0, 80a1e96 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1e88:	4623      	mov	r3, r4
 80a1e8a:	463a      	mov	r2, r7
 80a1e8c:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a1e8e:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1e90:	f7ff ff00 	bl	80a1c94 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a1e94:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a1e96:	4628      	mov	r0, r5
 80a1e98:	b004      	add	sp, #16
 80a1e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a1e9e:	b003      	add	sp, #12
 80a1ea0:	4770      	bx	lr
 80a1ea2:	bf00      	nop
 80a1ea4:	080a42e2 	.word	0x080a42e2

080a1ea8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1eaa:	4606      	mov	r6, r0
 80a1eac:	460d      	mov	r5, r1
 80a1eae:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1eb0:	2400      	movs	r4, #0
  while (size--) {
 80a1eb2:	42bd      	cmp	r5, r7
 80a1eb4:	d00c      	beq.n	80a1ed0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1eb6:	6833      	ldr	r3, [r6, #0]
 80a1eb8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1ebc:	689b      	ldr	r3, [r3, #8]
 80a1ebe:	4630      	mov	r0, r6
 80a1ec0:	4798      	blx	r3
     if (chunk>=0)
 80a1ec2:	2800      	cmp	r0, #0
 80a1ec4:	db01      	blt.n	80a1eca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1ec6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1ec8:	e7f3      	b.n	80a1eb2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1eca:	2c00      	cmp	r4, #0
 80a1ecc:	bf08      	it	eq
 80a1ece:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1ed0:	4620      	mov	r0, r4
 80a1ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ed4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1ed4:	b570      	push	{r4, r5, r6, lr}
 80a1ed6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1ed8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1eda:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1edc:	b149      	cbz	r1, 80a1ef2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1ede:	f001 fd7a 	bl	80a39d6 <strlen>
 80a1ee2:	682b      	ldr	r3, [r5, #0]
 80a1ee4:	4602      	mov	r2, r0
 80a1ee6:	4621      	mov	r1, r4
 80a1ee8:	4628      	mov	r0, r5
    }
 80a1eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1eee:	68db      	ldr	r3, [r3, #12]
 80a1ef0:	4718      	bx	r3
    }
 80a1ef2:	bd70      	pop	{r4, r5, r6, pc}

080a1ef4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1ef4:	6803      	ldr	r3, [r0, #0]
 80a1ef6:	689b      	ldr	r3, [r3, #8]
 80a1ef8:	4718      	bx	r3

080a1efa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1efa:	2a01      	cmp	r2, #1
 80a1efc:	bf98      	it	ls
 80a1efe:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1f00:	b530      	push	{r4, r5, lr}
 80a1f02:	460b      	mov	r3, r1
 80a1f04:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1f06:	2100      	movs	r1, #0
 80a1f08:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1f0c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1f10:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1f14:	fb05 3312 	mls	r3, r5, r2, r3
 80a1f18:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1f1a:	2b09      	cmp	r3, #9
 80a1f1c:	bf94      	ite	ls
 80a1f1e:	3330      	addls	r3, #48	; 0x30
 80a1f20:	3337      	addhi	r3, #55	; 0x37
 80a1f22:	b2db      	uxtb	r3, r3
 80a1f24:	4621      	mov	r1, r4
 80a1f26:	f804 3901 	strb.w	r3, [r4], #-1
 80a1f2a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1f2c:	2d00      	cmp	r5, #0
 80a1f2e:	d1ef      	bne.n	80a1f10 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1f30:	f7ff ffd0 	bl	80a1ed4 <_ZN5Print5writeEPKc>
}
 80a1f34:	b00b      	add	sp, #44	; 0x2c
 80a1f36:	bd30      	pop	{r4, r5, pc}

080a1f38 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1f38:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1f3a:	b922      	cbnz	r2, 80a1f46 <_ZN5Print5printEmi+0xe>
 80a1f3c:	6803      	ldr	r3, [r0, #0]
 80a1f3e:	b2c9      	uxtb	r1, r1
 80a1f40:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1f42:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1f44:	4718      	bx	r3
  else return printNumber(n, base);
 80a1f46:	b2d2      	uxtb	r2, r2
}
 80a1f48:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f4a:	f7ff bfd6 	b.w	80a1efa <_ZN5Print11printNumberEmh>

080a1f4e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1f4e:	f7ff bff3 	b.w	80a1f38 <_ZN5Print5printEmi>

080a1f52 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1f52:	2300      	movs	r3, #0
 80a1f54:	461a      	mov	r2, r3
 80a1f56:	4619      	mov	r1, r3
 80a1f58:	6840      	ldr	r0, [r0, #4]
 80a1f5a:	f7ff be13 	b.w	80a1b84 <network_on>

080a1f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1f5e:	680b      	ldr	r3, [r1, #0]
 80a1f60:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1f62:	b113      	cbz	r3, 80a1f6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1f64:	685a      	ldr	r2, [r3, #4]
 80a1f66:	3201      	adds	r2, #1
 80a1f68:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1f6a:	4770      	bx	lr

080a1f6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1f6c:	4a01      	ldr	r2, [pc, #4]	; (80a1f74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1f6e:	4b02      	ldr	r3, [pc, #8]	; (80a1f78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1f70:	601a      	str	r2, [r3, #0]
 80a1f72:	4770      	bx	lr
 80a1f74:	080a4387 	.word	0x080a4387
 80a1f78:	2000042c 	.word	0x2000042c

080a1f7c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a1f7e:	4b14      	ldr	r3, [pc, #80]	; (80a1fd0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1f80:	4f14      	ldr	r7, [pc, #80]	; (80a1fd4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a1f82:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a1f84:	4b14      	ldr	r3, [pc, #80]	; (80a1fd8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a1f86:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a1f88:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a1f8a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a1f8c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a1f8e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1f90:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1f92:	d01b      	beq.n	80a1fcc <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a1f94:	a80a      	add	r0, sp, #40	; 0x28
 80a1f96:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a1f9a:	f001 fbbb 	bl	80a3714 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a1f9e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1fa0:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a1fa2:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1fa4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a1fa8:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a1faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1fb2:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a1fb6:	4c09      	ldr	r4, [pc, #36]	; (80a1fdc <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a1fb8:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a1fbc:	ad01      	add	r5, sp, #4
 80a1fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a1fc6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a1fc8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a1fcc:	b00b      	add	sp, #44	; 0x2c
 80a1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1fd0:	20000460 	.word	0x20000460
 80a1fd4:	2000045c 	.word	0x2000045c
 80a1fd8:	20000458 	.word	0x20000458
 80a1fdc:	20000430 	.word	0x20000430

080a1fe0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a1fe0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1fe2:	2000      	movs	r0, #0
 80a1fe4:	f7ff fe26 	bl	80a1c34 <spark_sync_time_pending>
 80a1fe8:	b128      	cbz	r0, 80a1ff6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1fea:	f7ff fe13 	bl	80a1c14 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1fee:	f080 0001 	eor.w	r0, r0, #1
 80a1ff2:	b2c0      	uxtb	r0, r0
 80a1ff4:	bd08      	pop	{r3, pc}
 80a1ff6:	2001      	movs	r0, #1
    }
 80a1ff8:	bd08      	pop	{r3, pc}
	...

080a1ffc <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a1ffc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a1ffe:	4909      	ldr	r1, [pc, #36]	; (80a2024 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2000:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2002:	f001 fb27 	bl	80a3654 <__aeabi_fcmplt>
 80a2006:	b960      	cbnz	r0, 80a2022 <_ZN9TimeClass4zoneEf+0x26>
 80a2008:	4907      	ldr	r1, [pc, #28]	; (80a2028 <_ZN9TimeClass4zoneEf+0x2c>)
 80a200a:	4620      	mov	r0, r4
 80a200c:	f001 fb40 	bl	80a3690 <__aeabi_fcmpgt>
 80a2010:	b938      	cbnz	r0, 80a2022 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a2012:	4906      	ldr	r1, [pc, #24]	; (80a202c <_ZN9TimeClass4zoneEf+0x30>)
 80a2014:	4620      	mov	r0, r4
 80a2016:	f001 f97f 	bl	80a3318 <__aeabi_fmul>
 80a201a:	f001 fb43 	bl	80a36a4 <__aeabi_f2iz>
 80a201e:	4b04      	ldr	r3, [pc, #16]	; (80a2030 <_ZN9TimeClass4zoneEf+0x34>)
 80a2020:	6018      	str	r0, [r3, #0]
 80a2022:	bd10      	pop	{r4, pc}
 80a2024:	c1400000 	.word	0xc1400000
 80a2028:	41600000 	.word	0x41600000
 80a202c:	45610000 	.word	0x45610000
 80a2030:	20000460 	.word	0x20000460

080a2034 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2034:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2036:	2000      	movs	r0, #0
 80a2038:	f7ff fc7e 	bl	80a1938 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a203c:	4604      	mov	r4, r0
 80a203e:	b968      	cbnz	r0, 80a205c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2040:	f7ff fd3c 	bl	80a1abc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2044:	2801      	cmp	r0, #1
 80a2046:	d10b      	bne.n	80a2060 <_ZN9TimeClass7isValidEv+0x2c>
 80a2048:	4620      	mov	r0, r4
 80a204a:	f7ff fd5f 	bl	80a1b0c <system_thread_get_state>
 80a204e:	b938      	cbnz	r0, 80a2060 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2050:	f7ff ffc6 	bl	80a1fe0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2054:	b930      	cbnz	r0, 80a2064 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2056:	f7ff fdd5 	bl	80a1c04 <spark_process>
 80a205a:	e7f9      	b.n	80a2050 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a205c:	2001      	movs	r0, #1
 80a205e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2060:	2000      	movs	r0, #0
 80a2062:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2064:	f7ff ffbc 	bl	80a1fe0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2068:	2000      	movs	r0, #0
 80a206a:	f7ff fc65 	bl	80a1938 <HAL_RTC_Time_Is_Valid>
 80a206e:	3000      	adds	r0, #0
 80a2070:	bf18      	it	ne
 80a2072:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2074:	bd10      	pop	{r4, pc}

080a2076 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2076:	b508      	push	{r3, lr}
    (void)isValid();
 80a2078:	f7ff ffdc 	bl	80a2034 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a207c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2080:	f7ff bc3a 	b.w	80a18f8 <HAL_RTC_Get_UnixTime>

080a2084 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a2084:	b508      	push	{r3, lr}
	return hour(now());
 80a2086:	f7ff fff6 	bl	80a2076 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a208a:	f7ff ff77 	bl	80a1f7c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a208e:	4b01      	ldr	r3, [pc, #4]	; (80a2094 <_ZN9TimeClass4hourEv+0x10>)
 80a2090:	6898      	ldr	r0, [r3, #8]
 80a2092:	bd08      	pop	{r3, pc}
 80a2094:	20000430 	.word	0x20000430

080a2098 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a2098:	b508      	push	{r3, lr}
	return minute(now());
 80a209a:	f7ff ffec 	bl	80a2076 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a209e:	f7ff ff6d 	bl	80a1f7c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a20a2:	4b01      	ldr	r3, [pc, #4]	; (80a20a8 <_ZN9TimeClass6minuteEv+0x10>)
 80a20a4:	6858      	ldr	r0, [r3, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	20000430 	.word	0x20000430

080a20ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a20ac:	4b02      	ldr	r3, [pc, #8]	; (80a20b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a20ae:	681a      	ldr	r2, [r3, #0]
 80a20b0:	4b02      	ldr	r3, [pc, #8]	; (80a20bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a20b2:	601a      	str	r2, [r3, #0]
 80a20b4:	4770      	bx	lr
 80a20b6:	bf00      	nop
 80a20b8:	20000304 	.word	0x20000304
 80a20bc:	20000454 	.word	0x20000454

080a20c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a20c0:	2100      	movs	r1, #0
 80a20c2:	f7ff bd0b 	b.w	80a1adc <system_delay_ms>

080a20c6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a20c6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a20c8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a20ca:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a20cc:	b113      	cbz	r3, 80a20d4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a20ce:	2203      	movs	r2, #3
 80a20d0:	4601      	mov	r1, r0
 80a20d2:	4798      	blx	r3
    }
 80a20d4:	4620      	mov	r0, r4
 80a20d6:	bd10      	pop	{r4, pc}

080a20d8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a20d8:	b510      	push	{r4, lr}
 80a20da:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a20dc:	f7ff fff3 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
 80a20e0:	4620      	mov	r0, r4
 80a20e2:	bd10      	pop	{r4, pc}

080a20e4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a20e4:	b513      	push	{r0, r1, r4, lr}
 80a20e6:	460b      	mov	r3, r1
 80a20e8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a20ea:	c803      	ldmia	r0, {r0, r1}
 80a20ec:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a20f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a20f4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a20f8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a20fc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2100:	b002      	add	sp, #8
 80a2102:	bd10      	pop	{r4, pc}

080a2104 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2104:	4803      	ldr	r0, [pc, #12]	; (80a2114 <_GLOBAL__sub_I_RGB+0x10>)
 80a2106:	2300      	movs	r3, #0
 80a2108:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a210a:	4a03      	ldr	r2, [pc, #12]	; (80a2118 <_GLOBAL__sub_I_RGB+0x14>)
 80a210c:	4903      	ldr	r1, [pc, #12]	; (80a211c <_GLOBAL__sub_I_RGB+0x18>)
 80a210e:	f000 bea5 	b.w	80a2e5c <__aeabi_atexit>
 80a2112:	bf00      	nop
 80a2114:	20000464 	.word	0x20000464
 80a2118:	200003bc 	.word	0x200003bc
 80a211c:	080a20d9 	.word	0x080a20d9

080a2120 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2120:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2122:	4b14      	ldr	r3, [pc, #80]	; (80a2174 <serialEventRun+0x54>)
 80a2124:	b133      	cbz	r3, 80a2134 <serialEventRun+0x14>
 80a2126:	f000 fbfd 	bl	80a2924 <_Z16_fetch_usbserialv>
 80a212a:	6803      	ldr	r3, [r0, #0]
 80a212c:	691b      	ldr	r3, [r3, #16]
 80a212e:	4798      	blx	r3
 80a2130:	2800      	cmp	r0, #0
 80a2132:	dc16      	bgt.n	80a2162 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2134:	4b10      	ldr	r3, [pc, #64]	; (80a2178 <serialEventRun+0x58>)
 80a2136:	b133      	cbz	r3, 80a2146 <serialEventRun+0x26>
 80a2138:	f000 fc9a 	bl	80a2a70 <_Z22__fetch_global_Serial1v>
 80a213c:	6803      	ldr	r3, [r0, #0]
 80a213e:	691b      	ldr	r3, [r3, #16]
 80a2140:	4798      	blx	r3
 80a2142:	2800      	cmp	r0, #0
 80a2144:	dc10      	bgt.n	80a2168 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2146:	4b0d      	ldr	r3, [pc, #52]	; (80a217c <serialEventRun+0x5c>)
 80a2148:	b10b      	cbz	r3, 80a214e <serialEventRun+0x2e>
 80a214a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a214e:	4b0c      	ldr	r3, [pc, #48]	; (80a2180 <serialEventRun+0x60>)
 80a2150:	b17b      	cbz	r3, 80a2172 <serialEventRun+0x52>
 80a2152:	f000 fc23 	bl	80a299c <_Z17_fetch_usbserial1v>
 80a2156:	6803      	ldr	r3, [r0, #0]
 80a2158:	691b      	ldr	r3, [r3, #16]
 80a215a:	4798      	blx	r3
 80a215c:	2800      	cmp	r0, #0
 80a215e:	dc06      	bgt.n	80a216e <serialEventRun+0x4e>
 80a2160:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2162:	f3af 8000 	nop.w
 80a2166:	e7e5      	b.n	80a2134 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2168:	f3af 8000 	nop.w
 80a216c:	e7eb      	b.n	80a2146 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a216e:	f3af 8000 	nop.w
 80a2172:	bd08      	pop	{r3, pc}
	...

080a2184 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2184:	b508      	push	{r3, lr}
	serialEventRun();
 80a2186:	f7ff ffcb 	bl	80a2120 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a218a:	f7ff fbad 	bl	80a18e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a218e:	4b01      	ldr	r3, [pc, #4]	; (80a2194 <_post_loop+0x10>)
 80a2190:	6018      	str	r0, [r3, #0]
 80a2192:	bd08      	pop	{r3, pc}
 80a2194:	20000908 	.word	0x20000908

080a2198 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2198:	4802      	ldr	r0, [pc, #8]	; (80a21a4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a219a:	4a03      	ldr	r2, [pc, #12]	; (80a21a8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a219c:	4903      	ldr	r1, [pc, #12]	; (80a21ac <_Z33system_initialize_user_backup_ramv+0x14>)
 80a219e:	1a12      	subs	r2, r2, r0
 80a21a0:	f001 bbb0 	b.w	80a3904 <memcpy>
 80a21a4:	40024000 	.word	0x40024000
 80a21a8:	40024004 	.word	0x40024004
 80a21ac:	080a4740 	.word	0x080a4740

080a21b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a21b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21b2:	2300      	movs	r3, #0
 80a21b4:	9300      	str	r3, [sp, #0]
 80a21b6:	461a      	mov	r2, r3
 80a21b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21bc:	f7ff fcb8 	bl	80a1b30 <system_ctrl_set_result>
}
 80a21c0:	b003      	add	sp, #12
 80a21c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a21c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a21c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a21ca:	8843      	ldrh	r3, [r0, #2]
 80a21cc:	2b0a      	cmp	r3, #10
 80a21ce:	d008      	beq.n	80a21e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a21d0:	2b50      	cmp	r3, #80	; 0x50
 80a21d2:	d109      	bne.n	80a21e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a21d4:	4b09      	ldr	r3, [pc, #36]	; (80a21fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a21d6:	681b      	ldr	r3, [r3, #0]
 80a21d8:	b13b      	cbz	r3, 80a21ea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a21da:	b003      	add	sp, #12
 80a21dc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a21e0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a21e2:	f7ff ffe5 	bl	80a21b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a21e6:	e006      	b.n	80a21f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21e8:	2300      	movs	r3, #0
 80a21ea:	9300      	str	r3, [sp, #0]
 80a21ec:	461a      	mov	r2, r3
 80a21ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21f2:	f7ff fc9d 	bl	80a1b30 <system_ctrl_set_result>
        break;
    }
}
 80a21f6:	b003      	add	sp, #12
 80a21f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a21fc:	20000474 	.word	0x20000474

080a2200 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2200:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2202:	4c10      	ldr	r4, [pc, #64]	; (80a2244 <module_user_init_hook+0x44>)
 80a2204:	4d10      	ldr	r5, [pc, #64]	; (80a2248 <module_user_init_hook+0x48>)
 80a2206:	6823      	ldr	r3, [r4, #0]
 80a2208:	42ab      	cmp	r3, r5
 80a220a:	4b10      	ldr	r3, [pc, #64]	; (80a224c <module_user_init_hook+0x4c>)
 80a220c:	bf0c      	ite	eq
 80a220e:	2201      	moveq	r2, #1
 80a2210:	2200      	movne	r2, #0
 80a2212:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2214:	d002      	beq.n	80a221c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2216:	f7ff ffbf 	bl	80a2198 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a221a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a221c:	f7ff fb54 	bl	80a18c8 <HAL_RNG_GetRandomNumber>
 80a2220:	4604      	mov	r4, r0
    srand(seed);
 80a2222:	f001 fb83 	bl	80a392c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2226:	4b0a      	ldr	r3, [pc, #40]	; (80a2250 <module_user_init_hook+0x50>)
 80a2228:	b113      	cbz	r3, 80a2230 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a222a:	4620      	mov	r0, r4
 80a222c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2230:	2100      	movs	r1, #0
 80a2232:	4807      	ldr	r0, [pc, #28]	; (80a2250 <module_user_init_hook+0x50>)
 80a2234:	f7ff fd06 	bl	80a1c44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a223c:	2100      	movs	r1, #0
 80a223e:	4805      	ldr	r0, [pc, #20]	; (80a2254 <module_user_init_hook+0x54>)
 80a2240:	f7ff bc6c 	b.w	80a1b1c <system_ctrl_set_app_request_handler>
 80a2244:	40024000 	.word	0x40024000
 80a2248:	9a271c1e 	.word	0x9a271c1e
 80a224c:	20000478 	.word	0x20000478
 80a2250:	00000000 	.word	0x00000000
 80a2254:	080a21c9 	.word	0x080a21c9

080a2258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2258:	4770      	bx	lr

080a225a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a225a:	2000      	movs	r0, #0
 80a225c:	4770      	bx	lr

080a225e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a225e:	b510      	push	{r4, lr}
 80a2260:	4604      	mov	r4, r0
 80a2262:	f7fd ff1c 	bl	80a009e <_ZdlPv>
 80a2266:	4620      	mov	r0, r4
 80a2268:	bd10      	pop	{r4, pc}

080a226a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a226a:	b508      	push	{r3, lr}
      { delete this; }
 80a226c:	b108      	cbz	r0, 80a2272 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a226e:	f7ff fff6 	bl	80a225e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2272:	bd08      	pop	{r3, pc}

080a2274 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a2274:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2276:	68c4      	ldr	r4, [r0, #12]
 80a2278:	b1d4      	cbz	r4, 80a22b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a227a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a227c:	2b02      	cmp	r3, #2
 80a227e:	d102      	bne.n	80a2286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a2280:	68e0      	ldr	r0, [r4, #12]
 80a2282:	f7ff fcef 	bl	80a1c64 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2286:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2288:	b12d      	cbz	r5, 80a2296 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a228a:	4628      	mov	r0, r5
 80a228c:	f7ff ff1b 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
 80a2290:	4628      	mov	r0, r5
 80a2292:	f7fd ff04 	bl	80a009e <_ZdlPv>
 80a2296:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2298:	b12d      	cbz	r5, 80a22a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a229a:	4628      	mov	r0, r5
 80a229c:	f7ff ff13 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
 80a22a0:	4628      	mov	r0, r5
 80a22a2:	f7fd fefc 	bl	80a009e <_ZdlPv>
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a22ac:	f7fd bef7 	b.w	80a009e <_ZdlPv>
 80a22b0:	bd38      	pop	{r3, r4, r5, pc}

080a22b2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a22b2:	b510      	push	{r4, lr}
 80a22b4:	b088      	sub	sp, #32
 80a22b6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a22b8:	4668      	mov	r0, sp
 80a22ba:	f7ff fd76 	bl	80a1daa <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a22be:	4669      	mov	r1, sp
 80a22c0:	a804      	add	r0, sp, #16
 80a22c2:	f7ff fdb1 	bl	80a1e28 <_ZN6StringC1ERKS_>
 80a22c6:	a804      	add	r0, sp, #16
 80a22c8:	47a0      	blx	r4
 80a22ca:	4604      	mov	r4, r0
 80a22cc:	a804      	add	r0, sp, #16
 80a22ce:	f7ff fd25 	bl	80a1d1c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a22d2:	4668      	mov	r0, sp
 80a22d4:	f7ff fd22 	bl	80a1d1c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a22d8:	4620      	mov	r0, r4
 80a22da:	b008      	add	sp, #32
 80a22dc:	bd10      	pop	{r4, pc}

080a22de <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a22de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a22e0:	4607      	mov	r7, r0
 80a22e2:	460e      	mov	r6, r1
 80a22e4:	4615      	mov	r5, r2
 80a22e6:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a22e8:	2410      	movs	r4, #16
 80a22ea:	4622      	mov	r2, r4
 80a22ec:	2100      	movs	r1, #0
 80a22ee:	4668      	mov	r0, sp
 80a22f0:	f001 fb13 	bl	80a391a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a22f4:	2200      	movs	r2, #0
 80a22f6:	4669      	mov	r1, sp
 80a22f8:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a22fa:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a22fe:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a2300:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a2302:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2304:	f7ff fc76 	bl	80a1bf4 <spark_function>
}
 80a2308:	b005      	add	sp, #20
 80a230a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a230c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a230c:	b513      	push	{r0, r1, r4, lr}
 80a230e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2310:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2314:	2300      	movs	r3, #0
 80a2316:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2318:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a231a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a231c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a231e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2320:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2322:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2324:	f7fd ff94 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2328:	4620      	mov	r0, r4
 80a232a:	b002      	add	sp, #8
 80a232c:	bd10      	pop	{r4, pc}

080a232e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a232e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2330:	460c      	mov	r4, r1
 80a2332:	4606      	mov	r6, r0
 80a2334:	460f      	mov	r7, r1
 80a2336:	f854 3b04 	ldr.w	r3, [r4], #4
 80a233a:	ad02      	add	r5, sp, #8
 80a233c:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2340:	4621      	mov	r1, r4
 80a2342:	a801      	add	r0, sp, #4
 80a2344:	f7ff fe0b 	bl	80a1f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2348:	4629      	mov	r1, r5
 80a234a:	4630      	mov	r0, r6
 80a234c:	f7ff ffde 	bl	80a230c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2350:	a801      	add	r0, sp, #4
 80a2352:	f7fd ff7d 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2356:	4620      	mov	r0, r4
 80a2358:	f7fd ff7a 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a235c:	4638      	mov	r0, r7
 80a235e:	f7fd fe9e 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a2362:	4630      	mov	r0, r6
 80a2364:	b003      	add	sp, #12
 80a2366:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2368 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2368:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a236a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a236c:	b90a      	cbnz	r2, 80a2372 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a236e:	f000 fd7a 	bl	80a2e66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2372:	68c3      	ldr	r3, [r0, #12]
    }
 80a2374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2378:	4718      	bx	r3

080a237a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a237a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a237c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a237e:	f100 0110 	add.w	r1, r0, #16
 80a2382:	f7ff fff1 	bl	80a2368 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2386:	bd08      	pop	{r3, pc}

080a2388 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2388:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a238a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a238c:	b90a      	cbnz	r2, 80a2392 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a238e:	f000 fd6a 	bl	80a2e66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2392:	68c3      	ldr	r3, [r0, #12]
    }
 80a2394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2398:	4718      	bx	r3

080a239a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a239a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a239c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a239e:	f100 0110 	add.w	r1, r0, #16
 80a23a2:	f7ff fff1 	bl	80a2388 <_ZNKSt8functionIFvRKbEEclES1_>
 80a23a6:	bd08      	pop	{r3, pc}

080a23a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a23a8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a23aa:	2300      	movs	r3, #0
 80a23ac:	6083      	str	r3, [r0, #8]
 80a23ae:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a23b0:	4604      	mov	r4, r0
 80a23b2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a23b4:	b12b      	cbz	r3, 80a23c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a23b6:	2202      	movs	r2, #2
 80a23b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a23ba:	68eb      	ldr	r3, [r5, #12]
 80a23bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a23be:	68ab      	ldr	r3, [r5, #8]
 80a23c0:	60a3      	str	r3, [r4, #8]
	}
    }
 80a23c2:	4620      	mov	r0, r4
 80a23c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a23c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a23c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a23cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a23d0:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a23d2:	f04f 0002 	mov.w	r0, #2
 80a23d6:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a23d8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a23dc:	808b      	strh	r3, [r1, #4]
 80a23de:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a23e0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a23e2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a23e6:	600b      	str	r3, [r1, #0]
 80a23e8:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a23ec:	4299      	cmp	r1, r3
 80a23ee:	d103      	bne.n	80a23f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a23f0:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a23f4:	2d00      	cmp	r5, #0
 80a23f6:	d1f7      	bne.n	80a23e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a23f8:	d002      	beq.n	80a2400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a23fa:	f88d 1000 	strb.w	r1, [sp]
 80a23fe:	e06b      	b.n	80a24d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a2400:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2404:	bf1c      	itt	ne
 80a2406:	60e7      	strne	r7, [r4, #12]
 80a2408:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a240a:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a240e:	bf18      	it	ne
 80a2410:	461f      	movne	r7, r3
 80a2412:	2301      	movs	r3, #1
 80a2414:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2416:	f3bf 8f5f 	dmb	sy
 80a241a:	f104 0308 	add.w	r3, r4, #8
 80a241e:	2000      	movs	r0, #0
 80a2420:	e853 6f00 	ldrex	r6, [r3]
 80a2424:	e843 0200 	strex	r2, r0, [r3]
 80a2428:	2a00      	cmp	r2, #0
 80a242a:	d1f9      	bne.n	80a2420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a242c:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2430:	2e00      	cmp	r6, #0
 80a2432:	d051      	beq.n	80a24d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2434:	f7ff fb5a 	bl	80a1aec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2438:	b120      	cbz	r0, 80a2444 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a243a:	4629      	mov	r1, r5
 80a243c:	4630      	mov	r0, r6
 80a243e:	f7ff ff93 	bl	80a2368 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2442:	e043      	b.n	80a24cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2444:	4631      	mov	r1, r6
 80a2446:	4668      	mov	r0, sp
 80a2448:	f7ff ffae 	bl	80a23a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a244c:	68e0      	ldr	r0, [r4, #12]
 80a244e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2452:	b108      	cbz	r0, 80a2458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a2454:	f001 faa4 	bl	80a39a0 <strdup>
 80a2458:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a245a:	2010      	movs	r0, #16
 80a245c:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a2460:	f7fd fe1b 	bl	80a009a <_Znwj>
 80a2464:	4605      	mov	r5, r0
 80a2466:	b330      	cbz	r0, 80a24b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2468:	f04f 0800 	mov.w	r8, #0
 80a246c:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2470:	2018      	movs	r0, #24
 80a2472:	f7fd fe12 	bl	80a009a <_Znwj>
 80a2476:	4604      	mov	r4, r0
 80a2478:	b1c0      	cbz	r0, 80a24ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a247a:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a247e:	4601      	mov	r1, r0
 80a2480:	4668      	mov	r0, sp
 80a2482:	f7ff fe2f 	bl	80a20e4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2486:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2488:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a248a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a248c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a248e:	9202      	str	r2, [sp, #8]
 80a2490:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2492:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2494:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a2498:	9203      	str	r2, [sp, #12]
 80a249a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a249c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a24a0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a24a4:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24a6:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a24aa:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a24ac:	4b0d      	ldr	r3, [pc, #52]	; (80a24e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a24ae:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a24b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a24b2:	4b0d      	ldr	r3, [pc, #52]	; (80a24e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a24b4:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a24b6:	9804      	ldr	r0, [sp, #16]
 80a24b8:	f7ff fbd4 	bl	80a1c64 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a24bc:	4668      	mov	r0, sp
 80a24be:	f7ff fe02 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a24c2:	2200      	movs	r2, #0
 80a24c4:	4629      	mov	r1, r5
 80a24c6:	4809      	ldr	r0, [pc, #36]	; (80a24ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a24c8:	f7ff fb18 	bl	80a1afc <application_thread_invoke>
 80a24cc:	4630      	mov	r0, r6
 80a24ce:	f7ff fdfa 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a24d2:	4630      	mov	r0, r6
 80a24d4:	f7fd fde3 	bl	80a009e <_ZdlPv>
 80a24d8:	4638      	mov	r0, r7
 80a24da:	f7ff fbc3 	bl	80a1c64 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a24de:	b006      	add	sp, #24
 80a24e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a24e4:	080a237b 	.word	0x080a237b
 80a24e8:	080a25d9 	.word	0x080a25d9
 80a24ec:	080a2abd 	.word	0x080a2abd

080a24f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a24f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a24f4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a24f6:	ad07      	add	r5, sp, #28
 80a24f8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a24fc:	4606      	mov	r6, r0
 80a24fe:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2500:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2502:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2504:	460f      	mov	r7, r1
 80a2506:	4690      	mov	r8, r2
 80a2508:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a250c:	f8c5 b004 	str.w	fp, [r5, #4]
 80a2510:	f8c5 b008 	str.w	fp, [r5, #8]
 80a2514:	9307      	str	r3, [sp, #28]
 80a2516:	f7fd fdc0 	bl	80a009a <_Znwj>
 80a251a:	4604      	mov	r4, r0
 80a251c:	b138      	cbz	r0, 80a252e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a251e:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2522:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2526:	f8c0 b004 	str.w	fp, [r0, #4]
 80a252a:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a252e:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2530:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2532:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2534:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2536:	f7fd fdb0 	bl	80a009a <_Znwj>
 80a253a:	b128      	cbz	r0, 80a2548 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a253c:	2301      	movs	r3, #1
 80a253e:	6043      	str	r3, [r0, #4]
 80a2540:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2542:	4b23      	ldr	r3, [pc, #140]	; (80a25d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a2544:	60c4      	str	r4, [r0, #12]
 80a2546:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2548:	4b22      	ldr	r3, [pc, #136]	; (80a25d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a254a:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a254c:	2008      	movs	r0, #8
 80a254e:	9308      	str	r3, [sp, #32]
 80a2550:	f7fd fda3 	bl	80a009a <_Znwj>
 80a2554:	4604      	mov	r4, r0
 80a2556:	b128      	cbz	r0, 80a2564 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2558:	9b03      	ldr	r3, [sp, #12]
 80a255a:	a904      	add	r1, sp, #16
 80a255c:	f840 3b04 	str.w	r3, [r0], #4
 80a2560:	f7ff fcfd 	bl	80a1f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2564:	9500      	str	r5, [sp, #0]
 80a2566:	fa5f f38a 	uxtb.w	r3, sl
 80a256a:	464a      	mov	r2, r9
 80a256c:	4641      	mov	r1, r8
 80a256e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2570:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2572:	f7ff fb57 	bl	80a1c24 <spark_send_event>
 80a2576:	b9b8      	cbnz	r0, 80a25a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2578:	9b03      	ldr	r3, [sp, #12]
 80a257a:	785b      	ldrb	r3, [r3, #1]
 80a257c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2580:	b993      	cbnz	r3, 80a25a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2582:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2586:	a905      	add	r1, sp, #20
 80a2588:	a803      	add	r0, sp, #12
 80a258a:	9205      	str	r2, [sp, #20]
 80a258c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2590:	f7ff ff1a 	bl	80a23c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a2594:	9805      	ldr	r0, [sp, #20]
 80a2596:	f7ff fb65 	bl	80a1c64 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a259a:	a805      	add	r0, sp, #20
 80a259c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a259e:	f7ff fec6 	bl	80a232e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a25a2:	a806      	add	r0, sp, #24
 80a25a4:	f7fd fe54 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a25a8:	9b03      	ldr	r3, [sp, #12]
 80a25aa:	a904      	add	r1, sp, #16
 80a25ac:	a806      	add	r0, sp, #24
 80a25ae:	9305      	str	r3, [sp, #20]
 80a25b0:	f7ff fcd5 	bl	80a1f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a25b4:	a905      	add	r1, sp, #20
 80a25b6:	4630      	mov	r0, r6
 80a25b8:	f7ff fea8 	bl	80a230c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a25bc:	a806      	add	r0, sp, #24
 80a25be:	f7fd fe47 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a25c2:	a804      	add	r0, sp, #16
 80a25c4:	f7fd fe44 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a25c8:	4630      	mov	r0, r6
 80a25ca:	b00b      	add	sp, #44	; 0x2c
 80a25cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a25d0:	080a43e0 	.word	0x080a43e0
 80a25d4:	080a2741 	.word	0x080a2741

080a25d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a25d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a25da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a25dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a25de:	d006      	beq.n	80a25ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a25e0:	2a03      	cmp	r2, #3
 80a25e2:	d017      	beq.n	80a2614 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a25e4:	2a01      	cmp	r2, #1
 80a25e6:	d120      	bne.n	80a262a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a25e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a25ea:	6003      	str	r3, [r0, #0]
	      break;
 80a25ec:	e01d      	b.n	80a262a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a25ee:	2018      	movs	r0, #24
 80a25f0:	680e      	ldr	r6, [r1, #0]
 80a25f2:	f7fd fd52 	bl	80a009a <_Znwj>
 80a25f6:	4605      	mov	r5, r0
 80a25f8:	b150      	cbz	r0, 80a2610 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a25fa:	4631      	mov	r1, r6
 80a25fc:	f7ff fed4 	bl	80a23a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2600:	6930      	ldr	r0, [r6, #16]
 80a2602:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2606:	b108      	cbz	r0, 80a260c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2608:	f001 f9ca 	bl	80a39a0 <strdup>
 80a260c:	6128      	str	r0, [r5, #16]
 80a260e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2610:	6025      	str	r5, [r4, #0]
 80a2612:	e00a      	b.n	80a262a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2614:	6804      	ldr	r4, [r0, #0]
 80a2616:	b144      	cbz	r4, 80a262a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a2618:	6920      	ldr	r0, [r4, #16]
 80a261a:	f7ff fb23 	bl	80a1c64 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a261e:	4620      	mov	r0, r4
 80a2620:	f7ff fd51 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2624:	4620      	mov	r0, r4
 80a2626:	f7fd fd3a 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a262a:	2000      	movs	r0, #0
 80a262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a262e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a262e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2630:	2300      	movs	r3, #0
 80a2632:	6083      	str	r3, [r0, #8]
 80a2634:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2636:	4604      	mov	r4, r0
 80a2638:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a263a:	b12b      	cbz	r3, 80a2648 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a263c:	2202      	movs	r2, #2
 80a263e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2640:	68eb      	ldr	r3, [r5, #12]
 80a2642:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2644:	68ab      	ldr	r3, [r5, #8]
 80a2646:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2648:	4620      	mov	r0, r4
 80a264a:	bd38      	pop	{r3, r4, r5, pc}

080a264c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a264c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a264e:	b570      	push	{r4, r5, r6, lr}
 80a2650:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2652:	d006      	beq.n	80a2662 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2654:	2a03      	cmp	r2, #3
 80a2656:	d011      	beq.n	80a267c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2658:	2a01      	cmp	r2, #1
 80a265a:	d117      	bne.n	80a268c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a265c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a265e:	6003      	str	r3, [r0, #0]
	      break;
 80a2660:	e014      	b.n	80a268c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2662:	2014      	movs	r0, #20
 80a2664:	680e      	ldr	r6, [r1, #0]
 80a2666:	f7fd fd18 	bl	80a009a <_Znwj>
 80a266a:	4605      	mov	r5, r0
 80a266c:	b120      	cbz	r0, 80a2678 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a266e:	4631      	mov	r1, r6
 80a2670:	f7ff ffdd 	bl	80a262e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2674:	7c33      	ldrb	r3, [r6, #16]
 80a2676:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2678:	6025      	str	r5, [r4, #0]
 80a267a:	e007      	b.n	80a268c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a267c:	6804      	ldr	r4, [r0, #0]
 80a267e:	b12c      	cbz	r4, 80a268c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2680:	4620      	mov	r0, r4
 80a2682:	f7ff fd20 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2686:	4620      	mov	r0, r4
 80a2688:	f7fd fd09 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a268c:	2000      	movs	r0, #0
 80a268e:	bd70      	pop	{r4, r5, r6, pc}

080a2690 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2690:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2692:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2694:	f3bf 8f5f 	dmb	sy
 80a2698:	b087      	sub	sp, #28
 80a269a:	2300      	movs	r3, #0
 80a269c:	e850 6f00 	ldrex	r6, [r0]
 80a26a0:	e840 3200 	strex	r2, r3, [r0]
 80a26a4:	2a00      	cmp	r2, #0
 80a26a6:	d1f9      	bne.n	80a269c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a26a8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a26ac:	2e00      	cmp	r6, #0
 80a26ae:	d03e      	beq.n	80a272e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a26b0:	4618      	mov	r0, r3
 80a26b2:	f7ff fa1b 	bl	80a1aec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a26b6:	4607      	mov	r7, r0
 80a26b8:	b120      	cbz	r0, 80a26c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a26ba:	4621      	mov	r1, r4
 80a26bc:	4630      	mov	r0, r6
 80a26be:	f7ff fe63 	bl	80a2388 <_ZNKSt8functionIFvRKbEEclES1_>
 80a26c2:	e02e      	b.n	80a2722 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a26c4:	4631      	mov	r1, r6
 80a26c6:	a801      	add	r0, sp, #4
 80a26c8:	f7ff ffb1 	bl	80a262e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a26cc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a26ce:	2010      	movs	r0, #16
 80a26d0:	f88d 3014 	strb.w	r3, [sp, #20]
 80a26d4:	f7fd fce1 	bl	80a009a <_Znwj>
 80a26d8:	4605      	mov	r5, r0
 80a26da:	b1d0      	cbz	r0, 80a2712 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a26dc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a26de:	2014      	movs	r0, #20
 80a26e0:	f7fd fcdb 	bl	80a009a <_Znwj>
 80a26e4:	4604      	mov	r4, r0
 80a26e6:	b178      	cbz	r0, 80a2708 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a26e8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a26ea:	4601      	mov	r1, r0
 80a26ec:	a801      	add	r0, sp, #4
 80a26ee:	f7ff fcf9 	bl	80a20e4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26f2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a26f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26f6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a26fa:	9203      	str	r2, [sp, #12]
 80a26fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26fe:	60e3      	str	r3, [r4, #12]
 80a2700:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2704:	9204      	str	r2, [sp, #16]
 80a2706:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2708:	4b0a      	ldr	r3, [pc, #40]	; (80a2734 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a270a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a270c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a270e:	4b0a      	ldr	r3, [pc, #40]	; (80a2738 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2710:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2712:	a801      	add	r0, sp, #4
 80a2714:	f7ff fcd7 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2718:	2200      	movs	r2, #0
 80a271a:	4629      	mov	r1, r5
 80a271c:	4807      	ldr	r0, [pc, #28]	; (80a273c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a271e:	f7ff f9ed 	bl	80a1afc <application_thread_invoke>
 80a2722:	4630      	mov	r0, r6
 80a2724:	f7ff fccf 	bl	80a20c6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2728:	4630      	mov	r0, r6
 80a272a:	f7fd fcb8 	bl	80a009e <_ZdlPv>
        }
    }
 80a272e:	b007      	add	sp, #28
 80a2730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2732:	bf00      	nop
 80a2734:	080a239b 	.word	0x080a239b
 80a2738:	080a264d 	.word	0x080a264d
 80a273c:	080a2abd 	.word	0x080a2abd

080a2740 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2740:	b530      	push	{r4, r5, lr}
 80a2742:	4604      	mov	r4, r0
 80a2744:	b085      	sub	sp, #20
 80a2746:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2748:	4668      	mov	r0, sp
 80a274a:	4611      	mov	r1, r2
 80a274c:	f7ff fdef 	bl	80a232e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2750:	b17c      	cbz	r4, 80a2772 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2752:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2754:	4628      	mov	r0, r5
 80a2756:	b10d      	cbz	r5, 80a275c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2758:	f001 f922 	bl	80a39a0 <strdup>
 80a275c:	9002      	str	r0, [sp, #8]
 80a275e:	a902      	add	r1, sp, #8
 80a2760:	4668      	mov	r0, sp
 80a2762:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a2766:	f7ff fe2f 	bl	80a23c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a276a:	9802      	ldr	r0, [sp, #8]
 80a276c:	f7ff fa7a 	bl	80a1c64 <free>
 80a2770:	e01d      	b.n	80a27ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2772:	f04f 0201 	mov.w	r2, #1
 80a2776:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2778:	f88d 4008 	strb.w	r4, [sp, #8]
 80a277c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2780:	42a3      	cmp	r3, r4
 80a2782:	d103      	bne.n	80a278c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2784:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2788:	2900      	cmp	r1, #0
 80a278a:	d1f7      	bne.n	80a277c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a278c:	d002      	beq.n	80a2794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a278e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2792:	e00c      	b.n	80a27ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2794:	f110 010c 	adds.w	r1, r0, #12
 80a2798:	f04f 0301 	mov.w	r3, #1
 80a279c:	bf18      	it	ne
 80a279e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a27a0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a27a4:	3004      	adds	r0, #4
 80a27a6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a27aa:	f7ff ff71 	bl	80a2690 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a27ae:	a801      	add	r0, sp, #4
 80a27b0:	f7fd fd4e 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a27b4:	b005      	add	sp, #20
 80a27b6:	bd30      	pop	{r4, r5, pc}

080a27b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a27b8:	4770      	bx	lr

080a27ba <_ZN9IPAddressD0Ev>:
 80a27ba:	b510      	push	{r4, lr}
 80a27bc:	4604      	mov	r4, r0
 80a27be:	f7fd fc6e 	bl	80a009e <_ZdlPv>
 80a27c2:	4620      	mov	r0, r4
 80a27c4:	bd10      	pop	{r4, pc}

080a27c6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a27c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27c8:	460f      	mov	r7, r1
 80a27ca:	f100 0608 	add.w	r6, r0, #8
 80a27ce:	1d05      	adds	r5, r0, #4
 80a27d0:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a27d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a27d6:	220a      	movs	r2, #10
 80a27d8:	4638      	mov	r0, r7
 80a27da:	f7ff fbb8 	bl	80a1f4e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a27de:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a27e0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a27e2:	d007      	beq.n	80a27f4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a27e4:	2c00      	cmp	r4, #0
 80a27e6:	d0f4      	beq.n	80a27d2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a27e8:	212e      	movs	r1, #46	; 0x2e
 80a27ea:	4638      	mov	r0, r7
 80a27ec:	f7ff fb82 	bl	80a1ef4 <_ZN5Print5printEc>
 80a27f0:	4404      	add	r4, r0
 80a27f2:	e7ee      	b.n	80a27d2 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a27f4:	4620      	mov	r0, r4
 80a27f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a27f8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a27f8:	b510      	push	{r4, lr}
 80a27fa:	4604      	mov	r4, r0
 80a27fc:	4b04      	ldr	r3, [pc, #16]	; (80a2810 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a27fe:	2211      	movs	r2, #17
 80a2800:	f840 3b04 	str.w	r3, [r0], #4
 80a2804:	2100      	movs	r1, #0
 80a2806:	f001 f888 	bl	80a391a <memset>
{
    clear();
}
 80a280a:	4620      	mov	r0, r4
 80a280c:	bd10      	pop	{r4, pc}
 80a280e:	bf00      	nop
 80a2810:	080a43fc 	.word	0x080a43fc

080a2814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2814:	4603      	mov	r3, r0
 80a2816:	4a07      	ldr	r2, [pc, #28]	; (80a2834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2818:	b510      	push	{r4, lr}
 80a281a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a281e:	f101 0210 	add.w	r2, r1, #16
 80a2822:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2826:	4291      	cmp	r1, r2
 80a2828:	f843 4b04 	str.w	r4, [r3], #4
 80a282c:	d1f9      	bne.n	80a2822 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a282e:	780a      	ldrb	r2, [r1, #0]
 80a2830:	701a      	strb	r2, [r3, #0]
}
 80a2832:	bd10      	pop	{r4, pc}
 80a2834:	080a43fc 	.word	0x080a43fc

080a2838 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2838:	4a02      	ldr	r2, [pc, #8]	; (80a2844 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a283a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a283c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a283e:	2204      	movs	r2, #4
 80a2840:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2842:	4770      	bx	lr
 80a2844:	080a43fc 	.word	0x080a43fc

080a2848 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2848:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a284a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a284e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2852:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2856:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a285a:	2304      	movs	r3, #4
 80a285c:	6041      	str	r1, [r0, #4]
 80a285e:	7503      	strb	r3, [r0, #20]
 80a2860:	bd10      	pop	{r4, pc}
	...

080a2864 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2866:	4d04      	ldr	r5, [pc, #16]	; (80a2878 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2868:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a286a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a286e:	9500      	str	r5, [sp, #0]
 80a2870:	f7ff ffea 	bl	80a2848 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2874:	b003      	add	sp, #12
 80a2876:	bd30      	pop	{r4, r5, pc}
 80a2878:	080a43fc 	.word	0x080a43fc

080a287c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a287c:	7441      	strb	r1, [r0, #17]
 80a287e:	4770      	bx	lr

080a2880 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2880:	4770      	bx	lr

080a2882 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a2882:	2100      	movs	r1, #0
 80a2884:	7c00      	ldrb	r0, [r0, #16]
 80a2886:	f7ff b8f9 	b.w	80a1a7c <HAL_USB_USART_Receive_Data>

080a288a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a288a:	2101      	movs	r1, #1
 80a288c:	7c00      	ldrb	r0, [r0, #16]
 80a288e:	f7ff b8f5 	b.w	80a1a7c <HAL_USB_USART_Receive_Data>

080a2892 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a2892:	7c00      	ldrb	r0, [r0, #16]
 80a2894:	f7ff b8ea 	b.w	80a1a6c <HAL_USB_USART_Available_Data_For_Write>

080a2898 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a2898:	7c00      	ldrb	r0, [r0, #16]
 80a289a:	f7ff b8df 	b.w	80a1a5c <HAL_USB_USART_Available_Data>

080a289e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a289e:	b538      	push	{r3, r4, r5, lr}
 80a28a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a28a2:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a28a4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a28a6:	f7ff f8e1 	bl	80a1a6c <HAL_USB_USART_Available_Data_For_Write>
 80a28aa:	2800      	cmp	r0, #0
 80a28ac:	dc01      	bgt.n	80a28b2 <_ZN9USBSerial5writeEh+0x14>
 80a28ae:	7c60      	ldrb	r0, [r4, #17]
 80a28b0:	b120      	cbz	r0, 80a28bc <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a28b2:	4629      	mov	r1, r5
 80a28b4:	7c20      	ldrb	r0, [r4, #16]
 80a28b6:	f7ff f8e9 	bl	80a1a8c <HAL_USB_USART_Send_Data>
    return 1;
 80a28ba:	2001      	movs	r0, #1
  }
  return 0;
}
 80a28bc:	bd38      	pop	{r3, r4, r5, pc}

080a28be <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a28be:	7c00      	ldrb	r0, [r0, #16]
 80a28c0:	f7ff b8ec 	b.w	80a1a9c <HAL_USB_USART_Flush_Data>

080a28c4 <_ZN9USBSerialD0Ev>:
 80a28c4:	b510      	push	{r4, lr}
 80a28c6:	4604      	mov	r4, r0
 80a28c8:	f7fd fbe9 	bl	80a009e <_ZdlPv>
 80a28cc:	4620      	mov	r0, r4
 80a28ce:	bd10      	pop	{r4, pc}

080a28d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a28d0:	b510      	push	{r4, lr}
 80a28d2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a28d4:	2300      	movs	r3, #0
 80a28d6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a28d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a28dc:	60a3      	str	r3, [r4, #8]
 80a28de:	4b05      	ldr	r3, [pc, #20]	; (80a28f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a28e0:	4608      	mov	r0, r1
 80a28e2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a28e4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a28e6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a28e8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a28ea:	4611      	mov	r1, r2
 80a28ec:	f7ff f8ae 	bl	80a1a4c <HAL_USB_USART_Init>
}
 80a28f0:	4620      	mov	r0, r4
 80a28f2:	bd10      	pop	{r4, pc}
 80a28f4:	080a4410 	.word	0x080a4410

080a28f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a28f8:	b510      	push	{r4, lr}
 80a28fa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a28fc:	2214      	movs	r2, #20
 80a28fe:	2100      	movs	r1, #0
 80a2900:	f001 f80b 	bl	80a391a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2904:	4b05      	ldr	r3, [pc, #20]	; (80a291c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2906:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2908:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a290a:	4b05      	ldr	r3, [pc, #20]	; (80a2920 <_Z19acquireSerialBufferv+0x28>)
 80a290c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a290e:	f240 1301 	movw	r3, #257	; 0x101
 80a2912:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2914:	2381      	movs	r3, #129	; 0x81
 80a2916:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2918:	bd10      	pop	{r4, pc}
 80a291a:	bf00      	nop
 80a291c:	20000501 	.word	0x20000501
 80a2920:	20000480 	.word	0x20000480

080a2924 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2924:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2926:	4d0e      	ldr	r5, [pc, #56]	; (80a2960 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2928:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a292a:	a801      	add	r0, sp, #4
 80a292c:	f7ff ffe4 	bl	80a28f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2930:	6829      	ldr	r1, [r5, #0]
 80a2932:	f011 0401 	ands.w	r4, r1, #1
 80a2936:	d110      	bne.n	80a295a <_Z16_fetch_usbserialv+0x36>
 80a2938:	4628      	mov	r0, r5
 80a293a:	f7fd fbb2 	bl	80a00a2 <__cxa_guard_acquire>
 80a293e:	b160      	cbz	r0, 80a295a <_Z16_fetch_usbserialv+0x36>
 80a2940:	aa01      	add	r2, sp, #4
 80a2942:	4621      	mov	r1, r4
 80a2944:	4807      	ldr	r0, [pc, #28]	; (80a2964 <_Z16_fetch_usbserialv+0x40>)
 80a2946:	f7ff ffc3 	bl	80a28d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a294a:	4628      	mov	r0, r5
 80a294c:	f7fd fbae 	bl	80a00ac <__cxa_guard_release>
 80a2950:	4a05      	ldr	r2, [pc, #20]	; (80a2968 <_Z16_fetch_usbserialv+0x44>)
 80a2952:	4906      	ldr	r1, [pc, #24]	; (80a296c <_Z16_fetch_usbserialv+0x48>)
 80a2954:	4803      	ldr	r0, [pc, #12]	; (80a2964 <_Z16_fetch_usbserialv+0x40>)
 80a2956:	f000 fa81 	bl	80a2e5c <__aeabi_atexit>
	return _usbserial;
}
 80a295a:	4802      	ldr	r0, [pc, #8]	; (80a2964 <_Z16_fetch_usbserialv+0x40>)
 80a295c:	b007      	add	sp, #28
 80a295e:	bd30      	pop	{r4, r5, pc}
 80a2960:	2000047c 	.word	0x2000047c
 80a2964:	20000604 	.word	0x20000604
 80a2968:	200003bc 	.word	0x200003bc
 80a296c:	080a2881 	.word	0x080a2881

080a2970 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2970:	b510      	push	{r4, lr}
 80a2972:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2974:	2214      	movs	r2, #20
 80a2976:	2100      	movs	r1, #0
 80a2978:	f000 ffcf 	bl	80a391a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a297c:	4b05      	ldr	r3, [pc, #20]	; (80a2994 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a297e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2980:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2982:	4b05      	ldr	r3, [pc, #20]	; (80a2998 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2984:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2986:	f240 1301 	movw	r3, #257	; 0x101
 80a298a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a298c:	2381      	movs	r3, #129	; 0x81
 80a298e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2990:	bd10      	pop	{r4, pc}
 80a2992:	bf00      	nop
 80a2994:	200006b4 	.word	0x200006b4
 80a2998:	2000061c 	.word	0x2000061c

080a299c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a299c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a299e:	4c0e      	ldr	r4, [pc, #56]	; (80a29d8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a29a0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a29a2:	a801      	add	r0, sp, #4
 80a29a4:	f7ff ffe4 	bl	80a2970 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a29a8:	6823      	ldr	r3, [r4, #0]
 80a29aa:	07db      	lsls	r3, r3, #31
 80a29ac:	d410      	bmi.n	80a29d0 <_Z17_fetch_usbserial1v+0x34>
 80a29ae:	4620      	mov	r0, r4
 80a29b0:	f7fd fb77 	bl	80a00a2 <__cxa_guard_acquire>
 80a29b4:	b160      	cbz	r0, 80a29d0 <_Z17_fetch_usbserial1v+0x34>
 80a29b6:	aa01      	add	r2, sp, #4
 80a29b8:	2101      	movs	r1, #1
 80a29ba:	4808      	ldr	r0, [pc, #32]	; (80a29dc <_Z17_fetch_usbserial1v+0x40>)
 80a29bc:	f7ff ff88 	bl	80a28d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a29c0:	4620      	mov	r0, r4
 80a29c2:	f7fd fb73 	bl	80a00ac <__cxa_guard_release>
 80a29c6:	4a06      	ldr	r2, [pc, #24]	; (80a29e0 <_Z17_fetch_usbserial1v+0x44>)
 80a29c8:	4906      	ldr	r1, [pc, #24]	; (80a29e4 <_Z17_fetch_usbserial1v+0x48>)
 80a29ca:	4804      	ldr	r0, [pc, #16]	; (80a29dc <_Z17_fetch_usbserial1v+0x40>)
 80a29cc:	f000 fa46 	bl	80a2e5c <__aeabi_atexit>
  return _usbserial1;
}
 80a29d0:	4802      	ldr	r0, [pc, #8]	; (80a29dc <_Z17_fetch_usbserial1v+0x40>)
 80a29d2:	b006      	add	sp, #24
 80a29d4:	bd10      	pop	{r4, pc}
 80a29d6:	bf00      	nop
 80a29d8:	20000618 	.word	0x20000618
 80a29dc:	200006a0 	.word	0x200006a0
 80a29e0:	200003bc 	.word	0x200003bc
 80a29e4:	080a2881 	.word	0x080a2881

080a29e8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a29e8:	4770      	bx	lr

080a29ea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a29ea:	7441      	strb	r1, [r0, #17]
 80a29ec:	4770      	bx	lr

080a29ee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a29ee:	7c00      	ldrb	r0, [r0, #16]
 80a29f0:	f7fe bfea 	b.w	80a19c8 <HAL_USART_Available_Data_For_Write>

080a29f4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a29f4:	7c00      	ldrb	r0, [r0, #16]
 80a29f6:	f7fe bfbf 	b.w	80a1978 <HAL_USART_Available_Data>

080a29fa <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a29fa:	7c00      	ldrb	r0, [r0, #16]
 80a29fc:	f7fe bfcc 	b.w	80a1998 <HAL_USART_Peek_Data>

080a2a00 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2a00:	7c00      	ldrb	r0, [r0, #16]
 80a2a02:	f7fe bfc1 	b.w	80a1988 <HAL_USART_Read_Data>

080a2a06 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2a06:	7c00      	ldrb	r0, [r0, #16]
 80a2a08:	f7fe bfce 	b.w	80a19a8 <HAL_USART_Flush_Data>

080a2a0c <_ZN11USARTSerialD0Ev>:
 80a2a0c:	b510      	push	{r4, lr}
 80a2a0e:	4604      	mov	r4, r0
 80a2a10:	f7fd fb45 	bl	80a009e <_ZdlPv>
 80a2a14:	4620      	mov	r0, r4
 80a2a16:	bd10      	pop	{r4, pc}

080a2a18 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2a18:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2a1a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2a1c:	4604      	mov	r4, r0
 80a2a1e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2a20:	b925      	cbnz	r5, 80a2a2c <_ZN11USARTSerial5writeEh+0x14>
 80a2a22:	7c00      	ldrb	r0, [r0, #16]
 80a2a24:	f7fe ffd0 	bl	80a19c8 <HAL_USART_Available_Data_For_Write>
 80a2a28:	2800      	cmp	r0, #0
 80a2a2a:	dd05      	ble.n	80a2a38 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2a2c:	4631      	mov	r1, r6
 80a2a2e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2a34:	f7fe bf98 	b.w	80a1968 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2a38:	4628      	mov	r0, r5
 80a2a3a:	bd70      	pop	{r4, r5, r6, pc}

080a2a3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2a3c:	b510      	push	{r4, lr}
 80a2a3e:	4604      	mov	r4, r0
 80a2a40:	4608      	mov	r0, r1
 80a2a42:	4611      	mov	r1, r2
 80a2a44:	2200      	movs	r2, #0
 80a2a46:	6062      	str	r2, [r4, #4]
 80a2a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2a4c:	60a2      	str	r2, [r4, #8]
 80a2a4e:	4a05      	ldr	r2, [pc, #20]	; (80a2a64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2a50:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2a52:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2a54:	2201      	movs	r2, #1
 80a2a56:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2a58:	461a      	mov	r2, r3
 80a2a5a:	f7fe ff7d 	bl	80a1958 <HAL_USART_Init>
}
 80a2a5e:	4620      	mov	r0, r4
 80a2a60:	bd10      	pop	{r4, pc}
 80a2a62:	bf00      	nop
 80a2a64:	080a4440 	.word	0x080a4440

080a2a68 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2a68:	7c00      	ldrb	r0, [r0, #16]
 80a2a6a:	f7fe bfa5 	b.w	80a19b8 <HAL_USART_Is_Enabled>
	...

080a2a70 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2a70:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2a72:	4d0c      	ldr	r5, [pc, #48]	; (80a2aa4 <_Z22__fetch_global_Serial1v+0x34>)
 80a2a74:	6829      	ldr	r1, [r5, #0]
 80a2a76:	f011 0401 	ands.w	r4, r1, #1
 80a2a7a:	d111      	bne.n	80a2aa0 <_Z22__fetch_global_Serial1v+0x30>
 80a2a7c:	4628      	mov	r0, r5
 80a2a7e:	f7fd fb10 	bl	80a00a2 <__cxa_guard_acquire>
 80a2a82:	b168      	cbz	r0, 80a2aa0 <_Z22__fetch_global_Serial1v+0x30>
 80a2a84:	4a08      	ldr	r2, [pc, #32]	; (80a2aa8 <_Z22__fetch_global_Serial1v+0x38>)
 80a2a86:	4621      	mov	r1, r4
 80a2a88:	4b08      	ldr	r3, [pc, #32]	; (80a2aac <_Z22__fetch_global_Serial1v+0x3c>)
 80a2a8a:	4809      	ldr	r0, [pc, #36]	; (80a2ab0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a8c:	f7ff ffd6 	bl	80a2a3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2a90:	4628      	mov	r0, r5
 80a2a92:	f7fd fb0b 	bl	80a00ac <__cxa_guard_release>
 80a2a96:	4a07      	ldr	r2, [pc, #28]	; (80a2ab4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2a98:	4907      	ldr	r1, [pc, #28]	; (80a2ab8 <_Z22__fetch_global_Serial1v+0x48>)
 80a2a9a:	4805      	ldr	r0, [pc, #20]	; (80a2ab0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a9c:	f000 f9de 	bl	80a2e5c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2aa0:	4803      	ldr	r0, [pc, #12]	; (80a2ab0 <_Z22__fetch_global_Serial1v+0x40>)
 80a2aa2:	bd38      	pop	{r3, r4, r5, pc}
 80a2aa4:	20000850 	.word	0x20000850
 80a2aa8:	20000854 	.word	0x20000854
 80a2aac:	200007cc 	.word	0x200007cc
 80a2ab0:	200007b8 	.word	0x200007b8
 80a2ab4:	200003bc 	.word	0x200003bc
 80a2ab8:	080a29e9 	.word	0x080a29e9

080a2abc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2abc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2abe:	6883      	ldr	r3, [r0, #8]
 80a2ac0:	4604      	mov	r4, r0
 80a2ac2:	b90b      	cbnz	r3, 80a2ac8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2ac4:	f000 f9cf 	bl	80a2e66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2ac8:	68c3      	ldr	r3, [r0, #12]
 80a2aca:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2acc:	68a3      	ldr	r3, [r4, #8]
 80a2ace:	b11b      	cbz	r3, 80a2ad8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2ad0:	2203      	movs	r2, #3
 80a2ad2:	4621      	mov	r1, r4
 80a2ad4:	4620      	mov	r0, r4
 80a2ad6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2ad8:	4620      	mov	r0, r4
}
 80a2ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2ade:	f7fd bade 	b.w	80a009e <_ZdlPv>

080a2ae2 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2ae2:	4770      	bx	lr

080a2ae4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ae6:	4606      	mov	r6, r0
 80a2ae8:	4615      	mov	r5, r2
 80a2aea:	460c      	mov	r4, r1
 80a2aec:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2aee:	42bc      	cmp	r4, r7
 80a2af0:	d006      	beq.n	80a2b00 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2af2:	6833      	ldr	r3, [r6, #0]
 80a2af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2af8:	689b      	ldr	r3, [r3, #8]
 80a2afa:	4630      	mov	r0, r6
 80a2afc:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2afe:	e7f6      	b.n	80a2aee <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2b00:	4628      	mov	r0, r5
 80a2b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2b04 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2b04:	2200      	movs	r2, #0
 80a2b06:	7c00      	ldrb	r0, [r0, #16]
 80a2b08:	f7fe bf66 	b.w	80a19d8 <HAL_I2C_Write_Data>

080a2b0c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2b0c:	2100      	movs	r1, #0
 80a2b0e:	7c00      	ldrb	r0, [r0, #16]
 80a2b10:	f7fe bf6a 	b.w	80a19e8 <HAL_I2C_Available_Data>

080a2b14 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2b14:	2100      	movs	r1, #0
 80a2b16:	7c00      	ldrb	r0, [r0, #16]
 80a2b18:	f7fe bf6e 	b.w	80a19f8 <HAL_I2C_Read_Data>

080a2b1c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2b1c:	2100      	movs	r1, #0
 80a2b1e:	7c00      	ldrb	r0, [r0, #16]
 80a2b20:	f7fe bf72 	b.w	80a1a08 <HAL_I2C_Peek_Data>

080a2b24 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2b24:	2100      	movs	r1, #0
 80a2b26:	7c00      	ldrb	r0, [r0, #16]
 80a2b28:	f7fe bf76 	b.w	80a1a18 <HAL_I2C_Flush_Data>

080a2b2c <_ZN7TwoWireD0Ev>:
 80a2b2c:	b510      	push	{r4, lr}
 80a2b2e:	4604      	mov	r4, r0
 80a2b30:	f7fd fab5 	bl	80a009e <_ZdlPv>
 80a2b34:	4620      	mov	r0, r4
 80a2b36:	bd10      	pop	{r4, pc}

080a2b38 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2b38:	b510      	push	{r4, lr}
 80a2b3a:	4604      	mov	r4, r0
 80a2b3c:	4608      	mov	r0, r1
 80a2b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2b42:	60a3      	str	r3, [r4, #8]
 80a2b44:	4b04      	ldr	r3, [pc, #16]	; (80a2b58 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2b46:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2b48:	7420      	strb	r0, [r4, #16]
 80a2b4a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2b4c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2b4e:	f7fe ff73 	bl	80a1a38 <HAL_I2C_Init>

}
 80a2b52:	4620      	mov	r0, r4
 80a2b54:	bd10      	pop	{r4, pc}
 80a2b56:	bf00      	nop
 80a2b58:	080a4470 	.word	0x080a4470

080a2b5c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2b5c:	2100      	movs	r1, #0
 80a2b5e:	7c00      	ldrb	r0, [r0, #16]
 80a2b60:	f7fe bf62 	b.w	80a1a28 <HAL_I2C_Is_Enabled>

080a2b64 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2b64:	2200      	movs	r2, #0
 80a2b66:	4611      	mov	r1, r2
 80a2b68:	6840      	ldr	r0, [r0, #4]
 80a2b6a:	f7ff b803 	b.w	80a1b74 <network_ready>

080a2b6e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2b70:	4616      	mov	r6, r2
 80a2b72:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2b74:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2b76:	460f      	mov	r7, r1
 80a2b78:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2b7a:	2100      	movs	r1, #0
 80a2b7c:	a803      	add	r0, sp, #12
 80a2b7e:	f000 fecc 	bl	80a391a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2b82:	4630      	mov	r0, r6
 80a2b84:	f000 ff27 	bl	80a39d6 <strlen>
 80a2b88:	2500      	movs	r5, #0
 80a2b8a:	9500      	str	r5, [sp, #0]
 80a2b8c:	b281      	uxth	r1, r0
 80a2b8e:	687b      	ldr	r3, [r7, #4]
 80a2b90:	aa03      	add	r2, sp, #12
 80a2b92:	4630      	mov	r0, r6
 80a2b94:	f7fe ff8a 	bl	80a1aac <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b98:	b120      	cbz	r0, 80a2ba4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2b9a:	4629      	mov	r1, r5
 80a2b9c:	4620      	mov	r0, r4
 80a2b9e:	f7ff fe4b 	bl	80a2838 <_ZN9IPAddressC1Em>
 80a2ba2:	e003      	b.n	80a2bac <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2ba4:	a903      	add	r1, sp, #12
 80a2ba6:	4620      	mov	r0, r4
 80a2ba8:	f7ff fe34 	bl	80a2814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2bac:	4620      	mov	r0, r4
 80a2bae:	b009      	add	sp, #36	; 0x24
 80a2bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2bb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2bb2:	2200      	movs	r2, #0
 80a2bb4:	4611      	mov	r1, r2
 80a2bb6:	6840      	ldr	r0, [r0, #4]
 80a2bb8:	f7fe bffc 	b.w	80a1bb4 <network_listening>

080a2bbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2bbc:	2200      	movs	r2, #0
 80a2bbe:	4611      	mov	r1, r2
 80a2bc0:	6840      	ldr	r0, [r0, #4]
 80a2bc2:	f7ff b807 	b.w	80a1bd4 <network_get_listen_timeout>

080a2bc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2bc6:	2200      	movs	r2, #0
 80a2bc8:	6840      	ldr	r0, [r0, #4]
 80a2bca:	f7fe bffb 	b.w	80a1bc4 <network_set_listen_timeout>

080a2bce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2bce:	2200      	movs	r2, #0
 80a2bd0:	f081 0101 	eor.w	r1, r1, #1
 80a2bd4:	6840      	ldr	r0, [r0, #4]
 80a2bd6:	f7fe bfe5 	b.w	80a1ba4 <network_listen>

080a2bda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2bda:	2300      	movs	r3, #0
 80a2bdc:	461a      	mov	r2, r3
 80a2bde:	4619      	mov	r1, r3
 80a2be0:	6840      	ldr	r0, [r0, #4]
 80a2be2:	f7fe bfd7 	b.w	80a1b94 <network_off>

080a2be6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2be6:	2200      	movs	r2, #0
 80a2be8:	4611      	mov	r1, r2
 80a2bea:	6840      	ldr	r0, [r0, #4]
 80a2bec:	f7fe bfb2 	b.w	80a1b54 <network_connecting>

080a2bf0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2bf0:	2200      	movs	r2, #0
 80a2bf2:	2102      	movs	r1, #2
 80a2bf4:	6840      	ldr	r0, [r0, #4]
 80a2bf6:	f7fe bfb5 	b.w	80a1b64 <network_disconnect>

080a2bfa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2bfa:	2300      	movs	r3, #0
 80a2bfc:	461a      	mov	r2, r3
 80a2bfe:	6840      	ldr	r0, [r0, #4]
 80a2c00:	f7fe bfa0 	b.w	80a1b44 <network_connect>

080a2c04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2c04:	4b02      	ldr	r3, [pc, #8]	; (80a2c10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2c06:	2204      	movs	r2, #4
 80a2c08:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2c0a:	4a02      	ldr	r2, [pc, #8]	; (80a2c14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2c0c:	601a      	str	r2, [r3, #0]
 80a2c0e:	4770      	bx	lr
 80a2c10:	200008d8 	.word	0x200008d8
 80a2c14:	080a4498 	.word	0x080a4498

080a2c18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2c18:	2300      	movs	r3, #0
 80a2c1a:	461a      	mov	r2, r3
 80a2c1c:	6840      	ldr	r0, [r0, #4]
 80a2c1e:	f7fe bf91 	b.w	80a1b44 <network_connect>

080a2c22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2c22:	2200      	movs	r2, #0
 80a2c24:	2102      	movs	r1, #2
 80a2c26:	6840      	ldr	r0, [r0, #4]
 80a2c28:	f7fe bf9c 	b.w	80a1b64 <network_disconnect>

080a2c2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2c2c:	2200      	movs	r2, #0
 80a2c2e:	4611      	mov	r1, r2
 80a2c30:	6840      	ldr	r0, [r0, #4]
 80a2c32:	f7fe bf8f 	b.w	80a1b54 <network_connecting>

080a2c36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2c36:	2200      	movs	r2, #0
 80a2c38:	4611      	mov	r1, r2
 80a2c3a:	6840      	ldr	r0, [r0, #4]
 80a2c3c:	f7fe bf9a 	b.w	80a1b74 <network_ready>

080a2c40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2c40:	2300      	movs	r3, #0
 80a2c42:	461a      	mov	r2, r3
 80a2c44:	4619      	mov	r1, r3
 80a2c46:	6840      	ldr	r0, [r0, #4]
 80a2c48:	f7fe bf9c 	b.w	80a1b84 <network_on>

080a2c4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2c4c:	2300      	movs	r3, #0
 80a2c4e:	461a      	mov	r2, r3
 80a2c50:	4619      	mov	r1, r3
 80a2c52:	6840      	ldr	r0, [r0, #4]
 80a2c54:	f7fe bf9e 	b.w	80a1b94 <network_off>

080a2c58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2c58:	2200      	movs	r2, #0
 80a2c5a:	f081 0101 	eor.w	r1, r1, #1
 80a2c5e:	6840      	ldr	r0, [r0, #4]
 80a2c60:	f7fe bfa0 	b.w	80a1ba4 <network_listen>

080a2c64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2c64:	2200      	movs	r2, #0
 80a2c66:	6840      	ldr	r0, [r0, #4]
 80a2c68:	f7fe bfac 	b.w	80a1bc4 <network_set_listen_timeout>

080a2c6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2c6c:	2200      	movs	r2, #0
 80a2c6e:	4611      	mov	r1, r2
 80a2c70:	6840      	ldr	r0, [r0, #4]
 80a2c72:	f7fe bfaf 	b.w	80a1bd4 <network_get_listen_timeout>

080a2c76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2c76:	2200      	movs	r2, #0
 80a2c78:	4611      	mov	r1, r2
 80a2c7a:	6840      	ldr	r0, [r0, #4]
 80a2c7c:	f7fe bf9a 	b.w	80a1bb4 <network_listening>

080a2c80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2c80:	b570      	push	{r4, r5, r6, lr}
 80a2c82:	4616      	mov	r6, r2
 80a2c84:	b08e      	sub	sp, #56	; 0x38
 80a2c86:	4604      	mov	r4, r0
    IPAddress addr;
 80a2c88:	a808      	add	r0, sp, #32
 80a2c8a:	f7ff fdb5 	bl	80a27f8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2c8e:	2211      	movs	r2, #17
 80a2c90:	2100      	movs	r1, #0
 80a2c92:	a803      	add	r0, sp, #12
 80a2c94:	f000 fe41 	bl	80a391a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2c98:	4630      	mov	r0, r6
 80a2c9a:	f000 fe9c 	bl	80a39d6 <strlen>
 80a2c9e:	2500      	movs	r5, #0
 80a2ca0:	4b0a      	ldr	r3, [pc, #40]	; (80a2ccc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2ca2:	9500      	str	r5, [sp, #0]
 80a2ca4:	b281      	uxth	r1, r0
 80a2ca6:	685b      	ldr	r3, [r3, #4]
 80a2ca8:	aa03      	add	r2, sp, #12
 80a2caa:	4630      	mov	r0, r6
 80a2cac:	f7fe fefe 	bl	80a1aac <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2cb0:	b120      	cbz	r0, 80a2cbc <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2cb2:	4629      	mov	r1, r5
 80a2cb4:	4620      	mov	r0, r4
 80a2cb6:	f7ff fdbf 	bl	80a2838 <_ZN9IPAddressC1Em>
 80a2cba:	e003      	b.n	80a2cc4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2cbc:	a903      	add	r1, sp, #12
 80a2cbe:	4620      	mov	r0, r4
 80a2cc0:	f7ff fda8 	bl	80a2814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2cc4:	4620      	mov	r0, r4
 80a2cc6:	b00e      	add	sp, #56	; 0x38
 80a2cc8:	bd70      	pop	{r4, r5, r6, pc}
 80a2cca:	bf00      	nop
 80a2ccc:	200008d8 	.word	0x200008d8

080a2cd0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2cd0:	4b02      	ldr	r3, [pc, #8]	; (80a2cdc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2cd2:	4a03      	ldr	r2, [pc, #12]	; (80a2ce0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2cd4:	601a      	str	r2, [r3, #0]
 80a2cd6:	2200      	movs	r2, #0
 80a2cd8:	605a      	str	r2, [r3, #4]
 80a2cda:	4770      	bx	lr
 80a2cdc:	200008e0 	.word	0x200008e0
 80a2ce0:	080a44cc 	.word	0x080a44cc

080a2ce4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2ce4:	b510      	push	{r4, lr}
 80a2ce6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2ce8:	480f      	ldr	r0, [pc, #60]	; (80a2d28 <pinAvailable+0x44>)
 80a2cea:	f7ff f807 	bl	80a1cfc <_ZN8SPIClass9isEnabledEv>
 80a2cee:	b128      	cbz	r0, 80a2cfc <pinAvailable+0x18>
 80a2cf0:	f1a4 030d 	sub.w	r3, r4, #13
 80a2cf4:	2b02      	cmp	r3, #2
 80a2cf6:	d801      	bhi.n	80a2cfc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2cf8:	2000      	movs	r0, #0
 80a2cfa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2cfc:	f000 f88e 	bl	80a2e1c <_Z19__fetch_global_Wirev>
 80a2d00:	f7ff ff2c 	bl	80a2b5c <_ZN7TwoWire9isEnabledEv>
 80a2d04:	b108      	cbz	r0, 80a2d0a <pinAvailable+0x26>
 80a2d06:	2c01      	cmp	r4, #1
 80a2d08:	d9f6      	bls.n	80a2cf8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2d0a:	f7ff feb1 	bl	80a2a70 <_Z22__fetch_global_Serial1v>
 80a2d0e:	f7ff feab 	bl	80a2a68 <_ZN11USARTSerial9isEnabledEv>
 80a2d12:	b118      	cbz	r0, 80a2d1c <pinAvailable+0x38>
 80a2d14:	f1a4 0312 	sub.w	r3, r4, #18
 80a2d18:	2b01      	cmp	r3, #1
 80a2d1a:	d9ed      	bls.n	80a2cf8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2d1c:	2c17      	cmp	r4, #23
 80a2d1e:	bf8c      	ite	hi
 80a2d20:	2000      	movhi	r0, #0
 80a2d22:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2d24:	bd10      	pop	{r4, pc}
 80a2d26:	bf00      	nop
 80a2d28:	200008e8 	.word	0x200008e8

080a2d2c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2d2c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2d2e:	b538      	push	{r3, r4, r5, lr}
 80a2d30:	4604      	mov	r4, r0
 80a2d32:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2d34:	d80a      	bhi.n	80a2d4c <pinMode+0x20>
 80a2d36:	29ff      	cmp	r1, #255	; 0xff
 80a2d38:	d008      	beq.n	80a2d4c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d3a:	f7ff ffd3 	bl	80a2ce4 <pinAvailable>
 80a2d3e:	b128      	cbz	r0, 80a2d4c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2d40:	4629      	mov	r1, r5
 80a2d42:	4620      	mov	r0, r4
}
 80a2d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2d48:	f7fe bd96 	b.w	80a1878 <HAL_Pin_Mode>
 80a2d4c:	bd38      	pop	{r3, r4, r5, pc}

080a2d4e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2d4e:	b538      	push	{r3, r4, r5, lr}
 80a2d50:	4604      	mov	r4, r0
 80a2d52:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2d54:	f7fe fd98 	bl	80a1888 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2d58:	28ff      	cmp	r0, #255	; 0xff
 80a2d5a:	d010      	beq.n	80a2d7e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2d5c:	2806      	cmp	r0, #6
 80a2d5e:	d804      	bhi.n	80a2d6a <digitalWrite+0x1c>
 80a2d60:	234d      	movs	r3, #77	; 0x4d
 80a2d62:	fa23 f000 	lsr.w	r0, r3, r0
 80a2d66:	07c3      	lsls	r3, r0, #31
 80a2d68:	d409      	bmi.n	80a2d7e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d6a:	4620      	mov	r0, r4
 80a2d6c:	f7ff ffba 	bl	80a2ce4 <pinAvailable>
 80a2d70:	b128      	cbz	r0, 80a2d7e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d72:	4629      	mov	r1, r5
 80a2d74:	4620      	mov	r0, r4
}
 80a2d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d7a:	f7fe bd8d 	b.w	80a1898 <HAL_GPIO_Write>
 80a2d7e:	bd38      	pop	{r3, r4, r5, pc}

080a2d80 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2d80:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2d82:	4c0c      	ldr	r4, [pc, #48]	; (80a2db4 <_GLOBAL__sub_I_SPI+0x34>)
 80a2d84:	4e0c      	ldr	r6, [pc, #48]	; (80a2db8 <_GLOBAL__sub_I_SPI+0x38>)
 80a2d86:	4d0d      	ldr	r5, [pc, #52]	; (80a2dbc <_GLOBAL__sub_I_SPI+0x3c>)
 80a2d88:	2100      	movs	r1, #0
 80a2d8a:	4620      	mov	r0, r4
 80a2d8c:	f7fe ffa2 	bl	80a1cd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2d90:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2d92:	4c0b      	ldr	r4, [pc, #44]	; (80a2dc0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2d94:	4632      	mov	r2, r6
 80a2d96:	4629      	mov	r1, r5
 80a2d98:	f000 f860 	bl	80a2e5c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2d9c:	2101      	movs	r1, #1
 80a2d9e:	4620      	mov	r0, r4
 80a2da0:	f7fe ff98 	bl	80a1cd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2da4:	4632      	mov	r2, r6
 80a2da6:	4629      	mov	r1, r5
 80a2da8:	4620      	mov	r0, r4
 80a2daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2dae:	f000 b855 	b.w	80a2e5c <__aeabi_atexit>
 80a2db2:	bf00      	nop
 80a2db4:	200008e8 	.word	0x200008e8
 80a2db8:	200003bc 	.word	0x200003bc
 80a2dbc:	080a1cc5 	.word	0x080a1cc5
 80a2dc0:	200008f8 	.word	0x200008f8

080a2dc4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a2dc4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a2dc6:	4c07      	ldr	r4, [pc, #28]	; (80a2de4 <_Z21__fetch_global_EEPROMv+0x20>)
 80a2dc8:	6823      	ldr	r3, [r4, #0]
 80a2dca:	07db      	lsls	r3, r3, #31
 80a2dcc:	d408      	bmi.n	80a2de0 <_Z21__fetch_global_EEPROMv+0x1c>
 80a2dce:	4620      	mov	r0, r4
 80a2dd0:	f7fd f967 	bl	80a00a2 <__cxa_guard_acquire>
 80a2dd4:	b120      	cbz	r0, 80a2de0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a2dd6:	f7fe fd97 	bl	80a1908 <HAL_EEPROM_Init>
 80a2dda:	4620      	mov	r0, r4
 80a2ddc:	f7fd f966 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a2de0:	4801      	ldr	r0, [pc, #4]	; (80a2de8 <_Z21__fetch_global_EEPROMv+0x24>)
 80a2de2:	bd10      	pop	{r4, pc}
 80a2de4:	2000090c 	.word	0x2000090c
 80a2de8:	20000910 	.word	0x20000910

080a2dec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2dec:	b513      	push	{r0, r1, r4, lr}
 80a2dee:	4c08      	ldr	r4, [pc, #32]	; (80a2e10 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2df0:	2300      	movs	r3, #0
 80a2df2:	461a      	mov	r2, r3
 80a2df4:	4619      	mov	r1, r3
 80a2df6:	9300      	str	r3, [sp, #0]
 80a2df8:	4620      	mov	r0, r4
 80a2dfa:	f7ff fd33 	bl	80a2864 <_ZN9IPAddressC1Ehhhh>
 80a2dfe:	4620      	mov	r0, r4
 80a2e00:	4a04      	ldr	r2, [pc, #16]	; (80a2e14 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2e02:	4905      	ldr	r1, [pc, #20]	; (80a2e18 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2e04:	b002      	add	sp, #8
 80a2e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2e0a:	f000 b827 	b.w	80a2e5c <__aeabi_atexit>
 80a2e0e:	bf00      	nop
 80a2e10:	20000914 	.word	0x20000914
 80a2e14:	200003bc 	.word	0x200003bc
 80a2e18:	080a27b9 	.word	0x080a27b9

080a2e1c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2e1c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2e1e:	4d0b      	ldr	r5, [pc, #44]	; (80a2e4c <_Z19__fetch_global_Wirev+0x30>)
 80a2e20:	6829      	ldr	r1, [r5, #0]
 80a2e22:	f011 0401 	ands.w	r4, r1, #1
 80a2e26:	d10f      	bne.n	80a2e48 <_Z19__fetch_global_Wirev+0x2c>
 80a2e28:	4628      	mov	r0, r5
 80a2e2a:	f7fd f93a 	bl	80a00a2 <__cxa_guard_acquire>
 80a2e2e:	b158      	cbz	r0, 80a2e48 <_Z19__fetch_global_Wirev+0x2c>
 80a2e30:	4621      	mov	r1, r4
 80a2e32:	4807      	ldr	r0, [pc, #28]	; (80a2e50 <_Z19__fetch_global_Wirev+0x34>)
 80a2e34:	f7ff fe80 	bl	80a2b38 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2e38:	4628      	mov	r0, r5
 80a2e3a:	f7fd f937 	bl	80a00ac <__cxa_guard_release>
 80a2e3e:	4a05      	ldr	r2, [pc, #20]	; (80a2e54 <_Z19__fetch_global_Wirev+0x38>)
 80a2e40:	4905      	ldr	r1, [pc, #20]	; (80a2e58 <_Z19__fetch_global_Wirev+0x3c>)
 80a2e42:	4803      	ldr	r0, [pc, #12]	; (80a2e50 <_Z19__fetch_global_Wirev+0x34>)
 80a2e44:	f000 f80a 	bl	80a2e5c <__aeabi_atexit>
	return wire;
}
 80a2e48:	4801      	ldr	r0, [pc, #4]	; (80a2e50 <_Z19__fetch_global_Wirev+0x34>)
 80a2e4a:	bd38      	pop	{r3, r4, r5, pc}
 80a2e4c:	2000092c 	.word	0x2000092c
 80a2e50:	20000930 	.word	0x20000930
 80a2e54:	200003bc 	.word	0x200003bc
 80a2e58:	080a2ae3 	.word	0x080a2ae3

080a2e5c <__aeabi_atexit>:
 80a2e5c:	460b      	mov	r3, r1
 80a2e5e:	4601      	mov	r1, r0
 80a2e60:	4618      	mov	r0, r3
 80a2e62:	f000 bc49 	b.w	80a36f8 <__cxa_atexit>

080a2e66 <_ZSt25__throw_bad_function_callv>:
 80a2e66:	b508      	push	{r3, lr}
 80a2e68:	f7fe ff1c 	bl	80a1ca4 <abort>

080a2e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e6c:	4b18      	ldr	r3, [pc, #96]	; (80a2ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e6e:	681a      	ldr	r2, [r3, #0]
 80a2e70:	07d1      	lsls	r1, r2, #31
 80a2e72:	bf5c      	itt	pl
 80a2e74:	2201      	movpl	r2, #1
 80a2e76:	601a      	strpl	r2, [r3, #0]
 80a2e78:	4b16      	ldr	r3, [pc, #88]	; (80a2ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2e7a:	681a      	ldr	r2, [r3, #0]
 80a2e7c:	07d2      	lsls	r2, r2, #31
 80a2e7e:	bf5c      	itt	pl
 80a2e80:	2201      	movpl	r2, #1
 80a2e82:	601a      	strpl	r2, [r3, #0]
 80a2e84:	4b14      	ldr	r3, [pc, #80]	; (80a2ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2e86:	681a      	ldr	r2, [r3, #0]
 80a2e88:	07d0      	lsls	r0, r2, #31
 80a2e8a:	bf5c      	itt	pl
 80a2e8c:	2201      	movpl	r2, #1
 80a2e8e:	601a      	strpl	r2, [r3, #0]
 80a2e90:	4b12      	ldr	r3, [pc, #72]	; (80a2edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2e92:	681a      	ldr	r2, [r3, #0]
 80a2e94:	07d1      	lsls	r1, r2, #31
 80a2e96:	bf5c      	itt	pl
 80a2e98:	2201      	movpl	r2, #1
 80a2e9a:	601a      	strpl	r2, [r3, #0]
 80a2e9c:	4b10      	ldr	r3, [pc, #64]	; (80a2ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2e9e:	681a      	ldr	r2, [r3, #0]
 80a2ea0:	07d2      	lsls	r2, r2, #31
 80a2ea2:	bf5c      	itt	pl
 80a2ea4:	2201      	movpl	r2, #1
 80a2ea6:	601a      	strpl	r2, [r3, #0]
 80a2ea8:	4b0e      	ldr	r3, [pc, #56]	; (80a2ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2eaa:	681a      	ldr	r2, [r3, #0]
 80a2eac:	07d0      	lsls	r0, r2, #31
 80a2eae:	bf5c      	itt	pl
 80a2eb0:	2201      	movpl	r2, #1
 80a2eb2:	601a      	strpl	r2, [r3, #0]
 80a2eb4:	4b0c      	ldr	r3, [pc, #48]	; (80a2ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2eb6:	681a      	ldr	r2, [r3, #0]
 80a2eb8:	07d1      	lsls	r1, r2, #31
 80a2eba:	bf5c      	itt	pl
 80a2ebc:	2201      	movpl	r2, #1
 80a2ebe:	601a      	strpl	r2, [r3, #0]
 80a2ec0:	4b0a      	ldr	r3, [pc, #40]	; (80a2eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ec2:	681a      	ldr	r2, [r3, #0]
 80a2ec4:	07d2      	lsls	r2, r2, #31
 80a2ec6:	bf5c      	itt	pl
 80a2ec8:	2201      	movpl	r2, #1
 80a2eca:	601a      	strpl	r2, [r3, #0]
 80a2ecc:	4770      	bx	lr
 80a2ece:	bf00      	nop
 80a2ed0:	20000960 	.word	0x20000960
 80a2ed4:	2000095c 	.word	0x2000095c
 80a2ed8:	20000958 	.word	0x20000958
 80a2edc:	20000954 	.word	0x20000954
 80a2ee0:	20000950 	.word	0x20000950
 80a2ee4:	2000094c 	.word	0x2000094c
 80a2ee8:	20000948 	.word	0x20000948
 80a2eec:	20000944 	.word	0x20000944

080a2ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2ef0:	4b24      	ldr	r3, [pc, #144]	; (80a2f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2ef2:	681a      	ldr	r2, [r3, #0]
 80a2ef4:	07d0      	lsls	r0, r2, #31
 80a2ef6:	bf5c      	itt	pl
 80a2ef8:	2201      	movpl	r2, #1
 80a2efa:	601a      	strpl	r2, [r3, #0]
 80a2efc:	4b22      	ldr	r3, [pc, #136]	; (80a2f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2efe:	681a      	ldr	r2, [r3, #0]
 80a2f00:	07d1      	lsls	r1, r2, #31
 80a2f02:	bf5c      	itt	pl
 80a2f04:	2201      	movpl	r2, #1
 80a2f06:	601a      	strpl	r2, [r3, #0]
 80a2f08:	4b20      	ldr	r3, [pc, #128]	; (80a2f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2f0a:	681a      	ldr	r2, [r3, #0]
 80a2f0c:	07d2      	lsls	r2, r2, #31
 80a2f0e:	bf5c      	itt	pl
 80a2f10:	2201      	movpl	r2, #1
 80a2f12:	601a      	strpl	r2, [r3, #0]
 80a2f14:	4b1e      	ldr	r3, [pc, #120]	; (80a2f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2f16:	681a      	ldr	r2, [r3, #0]
 80a2f18:	07d0      	lsls	r0, r2, #31
 80a2f1a:	bf5c      	itt	pl
 80a2f1c:	2201      	movpl	r2, #1
 80a2f1e:	601a      	strpl	r2, [r3, #0]
 80a2f20:	4b1c      	ldr	r3, [pc, #112]	; (80a2f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2f22:	681a      	ldr	r2, [r3, #0]
 80a2f24:	07d1      	lsls	r1, r2, #31
 80a2f26:	bf5c      	itt	pl
 80a2f28:	2201      	movpl	r2, #1
 80a2f2a:	601a      	strpl	r2, [r3, #0]
 80a2f2c:	4b1a      	ldr	r3, [pc, #104]	; (80a2f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2f2e:	681a      	ldr	r2, [r3, #0]
 80a2f30:	07d2      	lsls	r2, r2, #31
 80a2f32:	bf5c      	itt	pl
 80a2f34:	2201      	movpl	r2, #1
 80a2f36:	601a      	strpl	r2, [r3, #0]
 80a2f38:	4b18      	ldr	r3, [pc, #96]	; (80a2f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2f3a:	681a      	ldr	r2, [r3, #0]
 80a2f3c:	07d0      	lsls	r0, r2, #31
 80a2f3e:	bf5c      	itt	pl
 80a2f40:	2201      	movpl	r2, #1
 80a2f42:	601a      	strpl	r2, [r3, #0]
 80a2f44:	4b16      	ldr	r3, [pc, #88]	; (80a2fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2f46:	681a      	ldr	r2, [r3, #0]
 80a2f48:	07d1      	lsls	r1, r2, #31
 80a2f4a:	bf5c      	itt	pl
 80a2f4c:	2201      	movpl	r2, #1
 80a2f4e:	601a      	strpl	r2, [r3, #0]
 80a2f50:	4b14      	ldr	r3, [pc, #80]	; (80a2fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2f52:	681a      	ldr	r2, [r3, #0]
 80a2f54:	07d2      	lsls	r2, r2, #31
 80a2f56:	bf5c      	itt	pl
 80a2f58:	2201      	movpl	r2, #1
 80a2f5a:	601a      	strpl	r2, [r3, #0]
 80a2f5c:	4b12      	ldr	r3, [pc, #72]	; (80a2fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2f5e:	681a      	ldr	r2, [r3, #0]
 80a2f60:	07d0      	lsls	r0, r2, #31
 80a2f62:	bf5c      	itt	pl
 80a2f64:	2201      	movpl	r2, #1
 80a2f66:	601a      	strpl	r2, [r3, #0]
 80a2f68:	4b10      	ldr	r3, [pc, #64]	; (80a2fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2f6a:	681a      	ldr	r2, [r3, #0]
 80a2f6c:	07d1      	lsls	r1, r2, #31
 80a2f6e:	bf5c      	itt	pl
 80a2f70:	2201      	movpl	r2, #1
 80a2f72:	601a      	strpl	r2, [r3, #0]
 80a2f74:	4b0e      	ldr	r3, [pc, #56]	; (80a2fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2f76:	681a      	ldr	r2, [r3, #0]
 80a2f78:	07d2      	lsls	r2, r2, #31
 80a2f7a:	bf5c      	itt	pl
 80a2f7c:	2201      	movpl	r2, #1
 80a2f7e:	601a      	strpl	r2, [r3, #0]
 80a2f80:	4770      	bx	lr
 80a2f82:	bf00      	nop
 80a2f84:	20000990 	.word	0x20000990
 80a2f88:	2000098c 	.word	0x2000098c
 80a2f8c:	20000988 	.word	0x20000988
 80a2f90:	20000984 	.word	0x20000984
 80a2f94:	20000980 	.word	0x20000980
 80a2f98:	2000097c 	.word	0x2000097c
 80a2f9c:	20000978 	.word	0x20000978
 80a2fa0:	20000974 	.word	0x20000974
 80a2fa4:	20000970 	.word	0x20000970
 80a2fa8:	2000096c 	.word	0x2000096c
 80a2fac:	20000968 	.word	0x20000968
 80a2fb0:	20000964 	.word	0x20000964

080a2fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2fb4:	4b24      	ldr	r3, [pc, #144]	; (80a3048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2fb6:	681a      	ldr	r2, [r3, #0]
 80a2fb8:	07d0      	lsls	r0, r2, #31
 80a2fba:	bf5c      	itt	pl
 80a2fbc:	2201      	movpl	r2, #1
 80a2fbe:	601a      	strpl	r2, [r3, #0]
 80a2fc0:	4b22      	ldr	r3, [pc, #136]	; (80a304c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2fc2:	681a      	ldr	r2, [r3, #0]
 80a2fc4:	07d1      	lsls	r1, r2, #31
 80a2fc6:	bf5c      	itt	pl
 80a2fc8:	2201      	movpl	r2, #1
 80a2fca:	601a      	strpl	r2, [r3, #0]
 80a2fcc:	4b20      	ldr	r3, [pc, #128]	; (80a3050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2fce:	681a      	ldr	r2, [r3, #0]
 80a2fd0:	07d2      	lsls	r2, r2, #31
 80a2fd2:	bf5c      	itt	pl
 80a2fd4:	2201      	movpl	r2, #1
 80a2fd6:	601a      	strpl	r2, [r3, #0]
 80a2fd8:	4b1e      	ldr	r3, [pc, #120]	; (80a3054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2fda:	681a      	ldr	r2, [r3, #0]
 80a2fdc:	07d0      	lsls	r0, r2, #31
 80a2fde:	bf5c      	itt	pl
 80a2fe0:	2201      	movpl	r2, #1
 80a2fe2:	601a      	strpl	r2, [r3, #0]
 80a2fe4:	4b1c      	ldr	r3, [pc, #112]	; (80a3058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2fe6:	681a      	ldr	r2, [r3, #0]
 80a2fe8:	07d1      	lsls	r1, r2, #31
 80a2fea:	bf5c      	itt	pl
 80a2fec:	2201      	movpl	r2, #1
 80a2fee:	601a      	strpl	r2, [r3, #0]
 80a2ff0:	4b1a      	ldr	r3, [pc, #104]	; (80a305c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2ff2:	681a      	ldr	r2, [r3, #0]
 80a2ff4:	07d2      	lsls	r2, r2, #31
 80a2ff6:	bf5c      	itt	pl
 80a2ff8:	2201      	movpl	r2, #1
 80a2ffa:	601a      	strpl	r2, [r3, #0]
 80a2ffc:	4b18      	ldr	r3, [pc, #96]	; (80a3060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2ffe:	681a      	ldr	r2, [r3, #0]
 80a3000:	07d0      	lsls	r0, r2, #31
 80a3002:	bf5c      	itt	pl
 80a3004:	2201      	movpl	r2, #1
 80a3006:	601a      	strpl	r2, [r3, #0]
 80a3008:	4b16      	ldr	r3, [pc, #88]	; (80a3064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a300a:	681a      	ldr	r2, [r3, #0]
 80a300c:	07d1      	lsls	r1, r2, #31
 80a300e:	bf5c      	itt	pl
 80a3010:	2201      	movpl	r2, #1
 80a3012:	601a      	strpl	r2, [r3, #0]
 80a3014:	4b14      	ldr	r3, [pc, #80]	; (80a3068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3016:	681a      	ldr	r2, [r3, #0]
 80a3018:	07d2      	lsls	r2, r2, #31
 80a301a:	bf5c      	itt	pl
 80a301c:	2201      	movpl	r2, #1
 80a301e:	601a      	strpl	r2, [r3, #0]
 80a3020:	4b12      	ldr	r3, [pc, #72]	; (80a306c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3022:	681a      	ldr	r2, [r3, #0]
 80a3024:	07d0      	lsls	r0, r2, #31
 80a3026:	bf5c      	itt	pl
 80a3028:	2201      	movpl	r2, #1
 80a302a:	601a      	strpl	r2, [r3, #0]
 80a302c:	4b10      	ldr	r3, [pc, #64]	; (80a3070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a302e:	681a      	ldr	r2, [r3, #0]
 80a3030:	07d1      	lsls	r1, r2, #31
 80a3032:	bf5c      	itt	pl
 80a3034:	2201      	movpl	r2, #1
 80a3036:	601a      	strpl	r2, [r3, #0]
 80a3038:	4b0e      	ldr	r3, [pc, #56]	; (80a3074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a303a:	681a      	ldr	r2, [r3, #0]
 80a303c:	07d2      	lsls	r2, r2, #31
 80a303e:	bf5c      	itt	pl
 80a3040:	2201      	movpl	r2, #1
 80a3042:	601a      	strpl	r2, [r3, #0]
 80a3044:	4770      	bx	lr
 80a3046:	bf00      	nop
 80a3048:	200009c0 	.word	0x200009c0
 80a304c:	200009bc 	.word	0x200009bc
 80a3050:	200009b8 	.word	0x200009b8
 80a3054:	200009b4 	.word	0x200009b4
 80a3058:	200009b0 	.word	0x200009b0
 80a305c:	200009ac 	.word	0x200009ac
 80a3060:	200009a8 	.word	0x200009a8
 80a3064:	200009a4 	.word	0x200009a4
 80a3068:	200009a0 	.word	0x200009a0
 80a306c:	2000099c 	.word	0x2000099c
 80a3070:	20000998 	.word	0x20000998
 80a3074:	20000994 	.word	0x20000994

080a3078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3078:	4b18      	ldr	r3, [pc, #96]	; (80a30dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a307a:	681a      	ldr	r2, [r3, #0]
 80a307c:	07d1      	lsls	r1, r2, #31
 80a307e:	bf5c      	itt	pl
 80a3080:	2201      	movpl	r2, #1
 80a3082:	601a      	strpl	r2, [r3, #0]
 80a3084:	4b16      	ldr	r3, [pc, #88]	; (80a30e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3086:	681a      	ldr	r2, [r3, #0]
 80a3088:	07d2      	lsls	r2, r2, #31
 80a308a:	bf5c      	itt	pl
 80a308c:	2201      	movpl	r2, #1
 80a308e:	601a      	strpl	r2, [r3, #0]
 80a3090:	4b14      	ldr	r3, [pc, #80]	; (80a30e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3092:	681a      	ldr	r2, [r3, #0]
 80a3094:	07d0      	lsls	r0, r2, #31
 80a3096:	bf5c      	itt	pl
 80a3098:	2201      	movpl	r2, #1
 80a309a:	601a      	strpl	r2, [r3, #0]
 80a309c:	4b12      	ldr	r3, [pc, #72]	; (80a30e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a309e:	681a      	ldr	r2, [r3, #0]
 80a30a0:	07d1      	lsls	r1, r2, #31
 80a30a2:	bf5c      	itt	pl
 80a30a4:	2201      	movpl	r2, #1
 80a30a6:	601a      	strpl	r2, [r3, #0]
 80a30a8:	4b10      	ldr	r3, [pc, #64]	; (80a30ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a30aa:	681a      	ldr	r2, [r3, #0]
 80a30ac:	07d2      	lsls	r2, r2, #31
 80a30ae:	bf5c      	itt	pl
 80a30b0:	2201      	movpl	r2, #1
 80a30b2:	601a      	strpl	r2, [r3, #0]
 80a30b4:	4b0e      	ldr	r3, [pc, #56]	; (80a30f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a30b6:	681a      	ldr	r2, [r3, #0]
 80a30b8:	07d0      	lsls	r0, r2, #31
 80a30ba:	bf5c      	itt	pl
 80a30bc:	2201      	movpl	r2, #1
 80a30be:	601a      	strpl	r2, [r3, #0]
 80a30c0:	4b0c      	ldr	r3, [pc, #48]	; (80a30f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a30c2:	681a      	ldr	r2, [r3, #0]
 80a30c4:	07d1      	lsls	r1, r2, #31
 80a30c6:	bf5c      	itt	pl
 80a30c8:	2201      	movpl	r2, #1
 80a30ca:	601a      	strpl	r2, [r3, #0]
 80a30cc:	4b0a      	ldr	r3, [pc, #40]	; (80a30f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a30ce:	681a      	ldr	r2, [r3, #0]
 80a30d0:	07d2      	lsls	r2, r2, #31
 80a30d2:	bf5c      	itt	pl
 80a30d4:	2201      	movpl	r2, #1
 80a30d6:	601a      	strpl	r2, [r3, #0]
 80a30d8:	4770      	bx	lr
 80a30da:	bf00      	nop
 80a30dc:	200009e0 	.word	0x200009e0
 80a30e0:	200009dc 	.word	0x200009dc
 80a30e4:	200009d8 	.word	0x200009d8
 80a30e8:	200009d4 	.word	0x200009d4
 80a30ec:	200009d0 	.word	0x200009d0
 80a30f0:	200009cc 	.word	0x200009cc
 80a30f4:	200009c8 	.word	0x200009c8
 80a30f8:	200009c4 	.word	0x200009c4

080a30fc <__aeabi_frsub>:
 80a30fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3100:	e002      	b.n	80a3108 <__addsf3>
 80a3102:	bf00      	nop

080a3104 <__aeabi_fsub>:
 80a3104:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3108 <__addsf3>:
 80a3108:	0042      	lsls	r2, r0, #1
 80a310a:	bf1f      	itttt	ne
 80a310c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3110:	ea92 0f03 	teqne	r2, r3
 80a3114:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3118:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a311c:	d06a      	beq.n	80a31f4 <__addsf3+0xec>
 80a311e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3122:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3126:	bfc1      	itttt	gt
 80a3128:	18d2      	addgt	r2, r2, r3
 80a312a:	4041      	eorgt	r1, r0
 80a312c:	4048      	eorgt	r0, r1
 80a312e:	4041      	eorgt	r1, r0
 80a3130:	bfb8      	it	lt
 80a3132:	425b      	neglt	r3, r3
 80a3134:	2b19      	cmp	r3, #25
 80a3136:	bf88      	it	hi
 80a3138:	4770      	bxhi	lr
 80a313a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a313e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3142:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3146:	bf18      	it	ne
 80a3148:	4240      	negne	r0, r0
 80a314a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a314e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3152:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3156:	bf18      	it	ne
 80a3158:	4249      	negne	r1, r1
 80a315a:	ea92 0f03 	teq	r2, r3
 80a315e:	d03f      	beq.n	80a31e0 <__addsf3+0xd8>
 80a3160:	f1a2 0201 	sub.w	r2, r2, #1
 80a3164:	fa41 fc03 	asr.w	ip, r1, r3
 80a3168:	eb10 000c 	adds.w	r0, r0, ip
 80a316c:	f1c3 0320 	rsb	r3, r3, #32
 80a3170:	fa01 f103 	lsl.w	r1, r1, r3
 80a3174:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3178:	d502      	bpl.n	80a3180 <__addsf3+0x78>
 80a317a:	4249      	negs	r1, r1
 80a317c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3180:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3184:	d313      	bcc.n	80a31ae <__addsf3+0xa6>
 80a3186:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a318a:	d306      	bcc.n	80a319a <__addsf3+0x92>
 80a318c:	0840      	lsrs	r0, r0, #1
 80a318e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3192:	f102 0201 	add.w	r2, r2, #1
 80a3196:	2afe      	cmp	r2, #254	; 0xfe
 80a3198:	d251      	bcs.n	80a323e <__addsf3+0x136>
 80a319a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a319e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a31a2:	bf08      	it	eq
 80a31a4:	f020 0001 	biceq.w	r0, r0, #1
 80a31a8:	ea40 0003 	orr.w	r0, r0, r3
 80a31ac:	4770      	bx	lr
 80a31ae:	0049      	lsls	r1, r1, #1
 80a31b0:	eb40 0000 	adc.w	r0, r0, r0
 80a31b4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a31b8:	f1a2 0201 	sub.w	r2, r2, #1
 80a31bc:	d1ed      	bne.n	80a319a <__addsf3+0x92>
 80a31be:	fab0 fc80 	clz	ip, r0
 80a31c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a31c6:	ebb2 020c 	subs.w	r2, r2, ip
 80a31ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80a31ce:	bfaa      	itet	ge
 80a31d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a31d4:	4252      	neglt	r2, r2
 80a31d6:	4318      	orrge	r0, r3
 80a31d8:	bfbc      	itt	lt
 80a31da:	40d0      	lsrlt	r0, r2
 80a31dc:	4318      	orrlt	r0, r3
 80a31de:	4770      	bx	lr
 80a31e0:	f092 0f00 	teq	r2, #0
 80a31e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a31e8:	bf06      	itte	eq
 80a31ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a31ee:	3201      	addeq	r2, #1
 80a31f0:	3b01      	subne	r3, #1
 80a31f2:	e7b5      	b.n	80a3160 <__addsf3+0x58>
 80a31f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a31f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a31fc:	bf18      	it	ne
 80a31fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3202:	d021      	beq.n	80a3248 <__addsf3+0x140>
 80a3204:	ea92 0f03 	teq	r2, r3
 80a3208:	d004      	beq.n	80a3214 <__addsf3+0x10c>
 80a320a:	f092 0f00 	teq	r2, #0
 80a320e:	bf08      	it	eq
 80a3210:	4608      	moveq	r0, r1
 80a3212:	4770      	bx	lr
 80a3214:	ea90 0f01 	teq	r0, r1
 80a3218:	bf1c      	itt	ne
 80a321a:	2000      	movne	r0, #0
 80a321c:	4770      	bxne	lr
 80a321e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3222:	d104      	bne.n	80a322e <__addsf3+0x126>
 80a3224:	0040      	lsls	r0, r0, #1
 80a3226:	bf28      	it	cs
 80a3228:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a322c:	4770      	bx	lr
 80a322e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3232:	bf3c      	itt	cc
 80a3234:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3238:	4770      	bxcc	lr
 80a323a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a323e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3246:	4770      	bx	lr
 80a3248:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a324c:	bf16      	itet	ne
 80a324e:	4608      	movne	r0, r1
 80a3250:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3254:	4601      	movne	r1, r0
 80a3256:	0242      	lsls	r2, r0, #9
 80a3258:	bf06      	itte	eq
 80a325a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a325e:	ea90 0f01 	teqeq	r0, r1
 80a3262:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3266:	4770      	bx	lr

080a3268 <__aeabi_ui2f>:
 80a3268:	f04f 0300 	mov.w	r3, #0
 80a326c:	e004      	b.n	80a3278 <__aeabi_i2f+0x8>
 80a326e:	bf00      	nop

080a3270 <__aeabi_i2f>:
 80a3270:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3274:	bf48      	it	mi
 80a3276:	4240      	negmi	r0, r0
 80a3278:	ea5f 0c00 	movs.w	ip, r0
 80a327c:	bf08      	it	eq
 80a327e:	4770      	bxeq	lr
 80a3280:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3284:	4601      	mov	r1, r0
 80a3286:	f04f 0000 	mov.w	r0, #0
 80a328a:	e01c      	b.n	80a32c6 <__aeabi_l2f+0x2a>

080a328c <__aeabi_ul2f>:
 80a328c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3290:	bf08      	it	eq
 80a3292:	4770      	bxeq	lr
 80a3294:	f04f 0300 	mov.w	r3, #0
 80a3298:	e00a      	b.n	80a32b0 <__aeabi_l2f+0x14>
 80a329a:	bf00      	nop

080a329c <__aeabi_l2f>:
 80a329c:	ea50 0201 	orrs.w	r2, r0, r1
 80a32a0:	bf08      	it	eq
 80a32a2:	4770      	bxeq	lr
 80a32a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a32a8:	d502      	bpl.n	80a32b0 <__aeabi_l2f+0x14>
 80a32aa:	4240      	negs	r0, r0
 80a32ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a32b0:	ea5f 0c01 	movs.w	ip, r1
 80a32b4:	bf02      	ittt	eq
 80a32b6:	4684      	moveq	ip, r0
 80a32b8:	4601      	moveq	r1, r0
 80a32ba:	2000      	moveq	r0, #0
 80a32bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a32c0:	bf08      	it	eq
 80a32c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a32c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a32ca:	fabc f28c 	clz	r2, ip
 80a32ce:	3a08      	subs	r2, #8
 80a32d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a32d4:	db10      	blt.n	80a32f8 <__aeabi_l2f+0x5c>
 80a32d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a32da:	4463      	add	r3, ip
 80a32dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80a32e0:	f1c2 0220 	rsb	r2, r2, #32
 80a32e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a32e8:	fa20 f202 	lsr.w	r2, r0, r2
 80a32ec:	eb43 0002 	adc.w	r0, r3, r2
 80a32f0:	bf08      	it	eq
 80a32f2:	f020 0001 	biceq.w	r0, r0, #1
 80a32f6:	4770      	bx	lr
 80a32f8:	f102 0220 	add.w	r2, r2, #32
 80a32fc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3300:	f1c2 0220 	rsb	r2, r2, #32
 80a3304:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3308:	fa21 f202 	lsr.w	r2, r1, r2
 80a330c:	eb43 0002 	adc.w	r0, r3, r2
 80a3310:	bf08      	it	eq
 80a3312:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3316:	4770      	bx	lr

080a3318 <__aeabi_fmul>:
 80a3318:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a331c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3320:	bf1e      	ittt	ne
 80a3322:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3326:	ea92 0f0c 	teqne	r2, ip
 80a332a:	ea93 0f0c 	teqne	r3, ip
 80a332e:	d06f      	beq.n	80a3410 <__aeabi_fmul+0xf8>
 80a3330:	441a      	add	r2, r3
 80a3332:	ea80 0c01 	eor.w	ip, r0, r1
 80a3336:	0240      	lsls	r0, r0, #9
 80a3338:	bf18      	it	ne
 80a333a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a333e:	d01e      	beq.n	80a337e <__aeabi_fmul+0x66>
 80a3340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3344:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3348:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a334c:	fba0 3101 	umull	r3, r1, r0, r1
 80a3350:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3354:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3358:	bf3e      	ittt	cc
 80a335a:	0049      	lslcc	r1, r1, #1
 80a335c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3360:	005b      	lslcc	r3, r3, #1
 80a3362:	ea40 0001 	orr.w	r0, r0, r1
 80a3366:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a336a:	2afd      	cmp	r2, #253	; 0xfd
 80a336c:	d81d      	bhi.n	80a33aa <__aeabi_fmul+0x92>
 80a336e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3372:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3376:	bf08      	it	eq
 80a3378:	f020 0001 	biceq.w	r0, r0, #1
 80a337c:	4770      	bx	lr
 80a337e:	f090 0f00 	teq	r0, #0
 80a3382:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3386:	bf08      	it	eq
 80a3388:	0249      	lsleq	r1, r1, #9
 80a338a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a338e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3392:	3a7f      	subs	r2, #127	; 0x7f
 80a3394:	bfc2      	ittt	gt
 80a3396:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a339a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a339e:	4770      	bxgt	lr
 80a33a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a33a4:	f04f 0300 	mov.w	r3, #0
 80a33a8:	3a01      	subs	r2, #1
 80a33aa:	dc5d      	bgt.n	80a3468 <__aeabi_fmul+0x150>
 80a33ac:	f112 0f19 	cmn.w	r2, #25
 80a33b0:	bfdc      	itt	le
 80a33b2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a33b6:	4770      	bxle	lr
 80a33b8:	f1c2 0200 	rsb	r2, r2, #0
 80a33bc:	0041      	lsls	r1, r0, #1
 80a33be:	fa21 f102 	lsr.w	r1, r1, r2
 80a33c2:	f1c2 0220 	rsb	r2, r2, #32
 80a33c6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a33ca:	ea5f 0031 	movs.w	r0, r1, rrx
 80a33ce:	f140 0000 	adc.w	r0, r0, #0
 80a33d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a33d6:	bf08      	it	eq
 80a33d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a33dc:	4770      	bx	lr
 80a33de:	f092 0f00 	teq	r2, #0
 80a33e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a33e6:	bf02      	ittt	eq
 80a33e8:	0040      	lsleq	r0, r0, #1
 80a33ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a33ee:	3a01      	subeq	r2, #1
 80a33f0:	d0f9      	beq.n	80a33e6 <__aeabi_fmul+0xce>
 80a33f2:	ea40 000c 	orr.w	r0, r0, ip
 80a33f6:	f093 0f00 	teq	r3, #0
 80a33fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a33fe:	bf02      	ittt	eq
 80a3400:	0049      	lsleq	r1, r1, #1
 80a3402:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3406:	3b01      	subeq	r3, #1
 80a3408:	d0f9      	beq.n	80a33fe <__aeabi_fmul+0xe6>
 80a340a:	ea41 010c 	orr.w	r1, r1, ip
 80a340e:	e78f      	b.n	80a3330 <__aeabi_fmul+0x18>
 80a3410:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3414:	ea92 0f0c 	teq	r2, ip
 80a3418:	bf18      	it	ne
 80a341a:	ea93 0f0c 	teqne	r3, ip
 80a341e:	d00a      	beq.n	80a3436 <__aeabi_fmul+0x11e>
 80a3420:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3424:	bf18      	it	ne
 80a3426:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a342a:	d1d8      	bne.n	80a33de <__aeabi_fmul+0xc6>
 80a342c:	ea80 0001 	eor.w	r0, r0, r1
 80a3430:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3434:	4770      	bx	lr
 80a3436:	f090 0f00 	teq	r0, #0
 80a343a:	bf17      	itett	ne
 80a343c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3440:	4608      	moveq	r0, r1
 80a3442:	f091 0f00 	teqne	r1, #0
 80a3446:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a344a:	d014      	beq.n	80a3476 <__aeabi_fmul+0x15e>
 80a344c:	ea92 0f0c 	teq	r2, ip
 80a3450:	d101      	bne.n	80a3456 <__aeabi_fmul+0x13e>
 80a3452:	0242      	lsls	r2, r0, #9
 80a3454:	d10f      	bne.n	80a3476 <__aeabi_fmul+0x15e>
 80a3456:	ea93 0f0c 	teq	r3, ip
 80a345a:	d103      	bne.n	80a3464 <__aeabi_fmul+0x14c>
 80a345c:	024b      	lsls	r3, r1, #9
 80a345e:	bf18      	it	ne
 80a3460:	4608      	movne	r0, r1
 80a3462:	d108      	bne.n	80a3476 <__aeabi_fmul+0x15e>
 80a3464:	ea80 0001 	eor.w	r0, r0, r1
 80a3468:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a346c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3470:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3474:	4770      	bx	lr
 80a3476:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a347a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a347e:	4770      	bx	lr

080a3480 <__aeabi_fdiv>:
 80a3480:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3484:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3488:	bf1e      	ittt	ne
 80a348a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a348e:	ea92 0f0c 	teqne	r2, ip
 80a3492:	ea93 0f0c 	teqne	r3, ip
 80a3496:	d069      	beq.n	80a356c <__aeabi_fdiv+0xec>
 80a3498:	eba2 0203 	sub.w	r2, r2, r3
 80a349c:	ea80 0c01 	eor.w	ip, r0, r1
 80a34a0:	0249      	lsls	r1, r1, #9
 80a34a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a34a6:	d037      	beq.n	80a3518 <__aeabi_fdiv+0x98>
 80a34a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a34ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a34b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a34b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a34b8:	428b      	cmp	r3, r1
 80a34ba:	bf38      	it	cc
 80a34bc:	005b      	lslcc	r3, r3, #1
 80a34be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a34c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a34c6:	428b      	cmp	r3, r1
 80a34c8:	bf24      	itt	cs
 80a34ca:	1a5b      	subcs	r3, r3, r1
 80a34cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a34d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a34d4:	bf24      	itt	cs
 80a34d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a34da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a34de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a34e2:	bf24      	itt	cs
 80a34e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a34e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a34ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a34f0:	bf24      	itt	cs
 80a34f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a34f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a34fa:	011b      	lsls	r3, r3, #4
 80a34fc:	bf18      	it	ne
 80a34fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3502:	d1e0      	bne.n	80a34c6 <__aeabi_fdiv+0x46>
 80a3504:	2afd      	cmp	r2, #253	; 0xfd
 80a3506:	f63f af50 	bhi.w	80a33aa <__aeabi_fmul+0x92>
 80a350a:	428b      	cmp	r3, r1
 80a350c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3510:	bf08      	it	eq
 80a3512:	f020 0001 	biceq.w	r0, r0, #1
 80a3516:	4770      	bx	lr
 80a3518:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a351c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3520:	327f      	adds	r2, #127	; 0x7f
 80a3522:	bfc2      	ittt	gt
 80a3524:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3528:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a352c:	4770      	bxgt	lr
 80a352e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3532:	f04f 0300 	mov.w	r3, #0
 80a3536:	3a01      	subs	r2, #1
 80a3538:	e737      	b.n	80a33aa <__aeabi_fmul+0x92>
 80a353a:	f092 0f00 	teq	r2, #0
 80a353e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3542:	bf02      	ittt	eq
 80a3544:	0040      	lsleq	r0, r0, #1
 80a3546:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a354a:	3a01      	subeq	r2, #1
 80a354c:	d0f9      	beq.n	80a3542 <__aeabi_fdiv+0xc2>
 80a354e:	ea40 000c 	orr.w	r0, r0, ip
 80a3552:	f093 0f00 	teq	r3, #0
 80a3556:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a355a:	bf02      	ittt	eq
 80a355c:	0049      	lsleq	r1, r1, #1
 80a355e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3562:	3b01      	subeq	r3, #1
 80a3564:	d0f9      	beq.n	80a355a <__aeabi_fdiv+0xda>
 80a3566:	ea41 010c 	orr.w	r1, r1, ip
 80a356a:	e795      	b.n	80a3498 <__aeabi_fdiv+0x18>
 80a356c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3570:	ea92 0f0c 	teq	r2, ip
 80a3574:	d108      	bne.n	80a3588 <__aeabi_fdiv+0x108>
 80a3576:	0242      	lsls	r2, r0, #9
 80a3578:	f47f af7d 	bne.w	80a3476 <__aeabi_fmul+0x15e>
 80a357c:	ea93 0f0c 	teq	r3, ip
 80a3580:	f47f af70 	bne.w	80a3464 <__aeabi_fmul+0x14c>
 80a3584:	4608      	mov	r0, r1
 80a3586:	e776      	b.n	80a3476 <__aeabi_fmul+0x15e>
 80a3588:	ea93 0f0c 	teq	r3, ip
 80a358c:	d104      	bne.n	80a3598 <__aeabi_fdiv+0x118>
 80a358e:	024b      	lsls	r3, r1, #9
 80a3590:	f43f af4c 	beq.w	80a342c <__aeabi_fmul+0x114>
 80a3594:	4608      	mov	r0, r1
 80a3596:	e76e      	b.n	80a3476 <__aeabi_fmul+0x15e>
 80a3598:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a359c:	bf18      	it	ne
 80a359e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a35a2:	d1ca      	bne.n	80a353a <__aeabi_fdiv+0xba>
 80a35a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a35a8:	f47f af5c 	bne.w	80a3464 <__aeabi_fmul+0x14c>
 80a35ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a35b0:	f47f af3c 	bne.w	80a342c <__aeabi_fmul+0x114>
 80a35b4:	e75f      	b.n	80a3476 <__aeabi_fmul+0x15e>
 80a35b6:	bf00      	nop

080a35b8 <__gesf2>:
 80a35b8:	f04f 3cff 	mov.w	ip, #4294967295
 80a35bc:	e006      	b.n	80a35cc <__cmpsf2+0x4>
 80a35be:	bf00      	nop

080a35c0 <__lesf2>:
 80a35c0:	f04f 0c01 	mov.w	ip, #1
 80a35c4:	e002      	b.n	80a35cc <__cmpsf2+0x4>
 80a35c6:	bf00      	nop

080a35c8 <__cmpsf2>:
 80a35c8:	f04f 0c01 	mov.w	ip, #1
 80a35cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a35d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a35d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a35d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a35dc:	bf18      	it	ne
 80a35de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a35e2:	d011      	beq.n	80a3608 <__cmpsf2+0x40>
 80a35e4:	b001      	add	sp, #4
 80a35e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a35ea:	bf18      	it	ne
 80a35ec:	ea90 0f01 	teqne	r0, r1
 80a35f0:	bf58      	it	pl
 80a35f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a35f6:	bf88      	it	hi
 80a35f8:	17c8      	asrhi	r0, r1, #31
 80a35fa:	bf38      	it	cc
 80a35fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3600:	bf18      	it	ne
 80a3602:	f040 0001 	orrne.w	r0, r0, #1
 80a3606:	4770      	bx	lr
 80a3608:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a360c:	d102      	bne.n	80a3614 <__cmpsf2+0x4c>
 80a360e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3612:	d105      	bne.n	80a3620 <__cmpsf2+0x58>
 80a3614:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3618:	d1e4      	bne.n	80a35e4 <__cmpsf2+0x1c>
 80a361a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a361e:	d0e1      	beq.n	80a35e4 <__cmpsf2+0x1c>
 80a3620:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3624:	4770      	bx	lr
 80a3626:	bf00      	nop

080a3628 <__aeabi_cfrcmple>:
 80a3628:	4684      	mov	ip, r0
 80a362a:	4608      	mov	r0, r1
 80a362c:	4661      	mov	r1, ip
 80a362e:	e7ff      	b.n	80a3630 <__aeabi_cfcmpeq>

080a3630 <__aeabi_cfcmpeq>:
 80a3630:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3632:	f7ff ffc9 	bl	80a35c8 <__cmpsf2>
 80a3636:	2800      	cmp	r0, #0
 80a3638:	bf48      	it	mi
 80a363a:	f110 0f00 	cmnmi.w	r0, #0
 80a363e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3640 <__aeabi_fcmpeq>:
 80a3640:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3644:	f7ff fff4 	bl	80a3630 <__aeabi_cfcmpeq>
 80a3648:	bf0c      	ite	eq
 80a364a:	2001      	moveq	r0, #1
 80a364c:	2000      	movne	r0, #0
 80a364e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3652:	bf00      	nop

080a3654 <__aeabi_fcmplt>:
 80a3654:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3658:	f7ff ffea 	bl	80a3630 <__aeabi_cfcmpeq>
 80a365c:	bf34      	ite	cc
 80a365e:	2001      	movcc	r0, #1
 80a3660:	2000      	movcs	r0, #0
 80a3662:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3666:	bf00      	nop

080a3668 <__aeabi_fcmple>:
 80a3668:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a366c:	f7ff ffe0 	bl	80a3630 <__aeabi_cfcmpeq>
 80a3670:	bf94      	ite	ls
 80a3672:	2001      	movls	r0, #1
 80a3674:	2000      	movhi	r0, #0
 80a3676:	f85d fb08 	ldr.w	pc, [sp], #8
 80a367a:	bf00      	nop

080a367c <__aeabi_fcmpge>:
 80a367c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3680:	f7ff ffd2 	bl	80a3628 <__aeabi_cfrcmple>
 80a3684:	bf94      	ite	ls
 80a3686:	2001      	movls	r0, #1
 80a3688:	2000      	movhi	r0, #0
 80a368a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a368e:	bf00      	nop

080a3690 <__aeabi_fcmpgt>:
 80a3690:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3694:	f7ff ffc8 	bl	80a3628 <__aeabi_cfrcmple>
 80a3698:	bf34      	ite	cc
 80a369a:	2001      	movcc	r0, #1
 80a369c:	2000      	movcs	r0, #0
 80a369e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36a2:	bf00      	nop

080a36a4 <__aeabi_f2iz>:
 80a36a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a36a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a36ac:	d30f      	bcc.n	80a36ce <__aeabi_f2iz+0x2a>
 80a36ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a36b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a36b6:	d90d      	bls.n	80a36d4 <__aeabi_f2iz+0x30>
 80a36b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a36bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a36c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a36c4:	fa23 f002 	lsr.w	r0, r3, r2
 80a36c8:	bf18      	it	ne
 80a36ca:	4240      	negne	r0, r0
 80a36cc:	4770      	bx	lr
 80a36ce:	f04f 0000 	mov.w	r0, #0
 80a36d2:	4770      	bx	lr
 80a36d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a36d8:	d101      	bne.n	80a36de <__aeabi_f2iz+0x3a>
 80a36da:	0242      	lsls	r2, r0, #9
 80a36dc:	d105      	bne.n	80a36ea <__aeabi_f2iz+0x46>
 80a36de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a36e2:	bf08      	it	eq
 80a36e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a36e8:	4770      	bx	lr
 80a36ea:	f04f 0000 	mov.w	r0, #0
 80a36ee:	4770      	bx	lr

080a36f0 <atol>:
 80a36f0:	220a      	movs	r2, #10
 80a36f2:	2100      	movs	r1, #0
 80a36f4:	f000 ba12 	b.w	80a3b1c <strtol>

080a36f8 <__cxa_atexit>:
 80a36f8:	b510      	push	{r4, lr}
 80a36fa:	4c05      	ldr	r4, [pc, #20]	; (80a3710 <__cxa_atexit+0x18>)
 80a36fc:	4613      	mov	r3, r2
 80a36fe:	b12c      	cbz	r4, 80a370c <__cxa_atexit+0x14>
 80a3700:	460a      	mov	r2, r1
 80a3702:	4601      	mov	r1, r0
 80a3704:	2002      	movs	r0, #2
 80a3706:	f3af 8000 	nop.w
 80a370a:	bd10      	pop	{r4, pc}
 80a370c:	4620      	mov	r0, r4
 80a370e:	bd10      	pop	{r4, pc}
 80a3710:	00000000 	.word	0x00000000

080a3714 <localtime>:
 80a3714:	b538      	push	{r3, r4, r5, lr}
 80a3716:	4b07      	ldr	r3, [pc, #28]	; (80a3734 <localtime+0x20>)
 80a3718:	4605      	mov	r5, r0
 80a371a:	681c      	ldr	r4, [r3, #0]
 80a371c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a371e:	b91b      	cbnz	r3, 80a3728 <localtime+0x14>
 80a3720:	2024      	movs	r0, #36	; 0x24
 80a3722:	f7fe fa97 	bl	80a1c54 <malloc>
 80a3726:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a3728:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a372a:	4628      	mov	r0, r5
 80a372c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3730:	f000 b802 	b.w	80a3738 <localtime_r>
 80a3734:	2000036c 	.word	0x2000036c

080a3738 <localtime_r>:
 80a3738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a373c:	460c      	mov	r4, r1
 80a373e:	4680      	mov	r8, r0
 80a3740:	f000 fcf2 	bl	80a4128 <__gettzinfo>
 80a3744:	4621      	mov	r1, r4
 80a3746:	4607      	mov	r7, r0
 80a3748:	4640      	mov	r0, r8
 80a374a:	f000 fcf1 	bl	80a4130 <gmtime_r>
 80a374e:	6946      	ldr	r6, [r0, #20]
 80a3750:	4604      	mov	r4, r0
 80a3752:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a3756:	07b3      	lsls	r3, r6, #30
 80a3758:	d105      	bne.n	80a3766 <localtime_r+0x2e>
 80a375a:	2264      	movs	r2, #100	; 0x64
 80a375c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a3760:	fb02 6313 	mls	r3, r2, r3, r6
 80a3764:	b94b      	cbnz	r3, 80a377a <localtime_r+0x42>
 80a3766:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a376a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a376e:	fb05 6513 	mls	r5, r5, r3, r6
 80a3772:	fab5 f385 	clz	r3, r5
 80a3776:	095b      	lsrs	r3, r3, #5
 80a3778:	e000      	b.n	80a377c <localtime_r+0x44>
 80a377a:	2301      	movs	r3, #1
 80a377c:	4a5f      	ldr	r2, [pc, #380]	; (80a38fc <localtime_r+0x1c4>)
 80a377e:	2530      	movs	r5, #48	; 0x30
 80a3780:	fb05 2503 	mla	r5, r5, r3, r2
 80a3784:	f000 fb04 	bl	80a3d90 <__tz_lock>
 80a3788:	f000 fb04 	bl	80a3d94 <_tzset_unlocked>
 80a378c:	4b5c      	ldr	r3, [pc, #368]	; (80a3900 <localtime_r+0x1c8>)
 80a378e:	681b      	ldr	r3, [r3, #0]
 80a3790:	b1f3      	cbz	r3, 80a37d0 <localtime_r+0x98>
 80a3792:	687b      	ldr	r3, [r7, #4]
 80a3794:	429e      	cmp	r6, r3
 80a3796:	d105      	bne.n	80a37a4 <localtime_r+0x6c>
 80a3798:	6839      	ldr	r1, [r7, #0]
 80a379a:	f8d8 3000 	ldr.w	r3, [r8]
 80a379e:	69fa      	ldr	r2, [r7, #28]
 80a37a0:	b941      	cbnz	r1, 80a37b4 <localtime_r+0x7c>
 80a37a2:	e00a      	b.n	80a37ba <localtime_r+0x82>
 80a37a4:	4630      	mov	r0, r6
 80a37a6:	f000 fa4b 	bl	80a3c40 <__tzcalc_limits>
 80a37aa:	2800      	cmp	r0, #0
 80a37ac:	d1f4      	bne.n	80a3798 <localtime_r+0x60>
 80a37ae:	f04f 33ff 	mov.w	r3, #4294967295
 80a37b2:	e00d      	b.n	80a37d0 <localtime_r+0x98>
 80a37b4:	4293      	cmp	r3, r2
 80a37b6:	db08      	blt.n	80a37ca <localtime_r+0x92>
 80a37b8:	e001      	b.n	80a37be <localtime_r+0x86>
 80a37ba:	4293      	cmp	r3, r2
 80a37bc:	da07      	bge.n	80a37ce <localtime_r+0x96>
 80a37be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a37c0:	4293      	cmp	r3, r2
 80a37c2:	bfac      	ite	ge
 80a37c4:	2300      	movge	r3, #0
 80a37c6:	2301      	movlt	r3, #1
 80a37c8:	e002      	b.n	80a37d0 <localtime_r+0x98>
 80a37ca:	2300      	movs	r3, #0
 80a37cc:	e000      	b.n	80a37d0 <localtime_r+0x98>
 80a37ce:	2301      	movs	r3, #1
 80a37d0:	6223      	str	r3, [r4, #32]
 80a37d2:	6a23      	ldr	r3, [r4, #32]
 80a37d4:	203c      	movs	r0, #60	; 0x3c
 80a37d6:	2b01      	cmp	r3, #1
 80a37d8:	bf0c      	ite	eq
 80a37da:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a37dc:	6a39      	ldrne	r1, [r7, #32]
 80a37de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a37e2:	fb91 f6f3 	sdiv	r6, r1, r3
 80a37e6:	fb03 1316 	mls	r3, r3, r6, r1
 80a37ea:	fb93 f2f0 	sdiv	r2, r3, r0
 80a37ee:	fb00 3012 	mls	r0, r0, r2, r3
 80a37f2:	6861      	ldr	r1, [r4, #4]
 80a37f4:	6823      	ldr	r3, [r4, #0]
 80a37f6:	1a89      	subs	r1, r1, r2
 80a37f8:	68a2      	ldr	r2, [r4, #8]
 80a37fa:	1a1b      	subs	r3, r3, r0
 80a37fc:	1b92      	subs	r2, r2, r6
 80a37fe:	2b3b      	cmp	r3, #59	; 0x3b
 80a3800:	6023      	str	r3, [r4, #0]
 80a3802:	6061      	str	r1, [r4, #4]
 80a3804:	60a2      	str	r2, [r4, #8]
 80a3806:	dd03      	ble.n	80a3810 <localtime_r+0xd8>
 80a3808:	3101      	adds	r1, #1
 80a380a:	6061      	str	r1, [r4, #4]
 80a380c:	3b3c      	subs	r3, #60	; 0x3c
 80a380e:	e004      	b.n	80a381a <localtime_r+0xe2>
 80a3810:	2b00      	cmp	r3, #0
 80a3812:	da03      	bge.n	80a381c <localtime_r+0xe4>
 80a3814:	3901      	subs	r1, #1
 80a3816:	6061      	str	r1, [r4, #4]
 80a3818:	333c      	adds	r3, #60	; 0x3c
 80a381a:	6023      	str	r3, [r4, #0]
 80a381c:	6863      	ldr	r3, [r4, #4]
 80a381e:	2b3b      	cmp	r3, #59	; 0x3b
 80a3820:	dd03      	ble.n	80a382a <localtime_r+0xf2>
 80a3822:	3201      	adds	r2, #1
 80a3824:	60a2      	str	r2, [r4, #8]
 80a3826:	3b3c      	subs	r3, #60	; 0x3c
 80a3828:	e004      	b.n	80a3834 <localtime_r+0xfc>
 80a382a:	2b00      	cmp	r3, #0
 80a382c:	da03      	bge.n	80a3836 <localtime_r+0xfe>
 80a382e:	3a01      	subs	r2, #1
 80a3830:	60a2      	str	r2, [r4, #8]
 80a3832:	333c      	adds	r3, #60	; 0x3c
 80a3834:	6063      	str	r3, [r4, #4]
 80a3836:	68a3      	ldr	r3, [r4, #8]
 80a3838:	2b17      	cmp	r3, #23
 80a383a:	dd22      	ble.n	80a3882 <localtime_r+0x14a>
 80a383c:	69e2      	ldr	r2, [r4, #28]
 80a383e:	3b18      	subs	r3, #24
 80a3840:	3201      	adds	r2, #1
 80a3842:	61e2      	str	r2, [r4, #28]
 80a3844:	69a2      	ldr	r2, [r4, #24]
 80a3846:	60a3      	str	r3, [r4, #8]
 80a3848:	3201      	adds	r2, #1
 80a384a:	2a06      	cmp	r2, #6
 80a384c:	bfc8      	it	gt
 80a384e:	2200      	movgt	r2, #0
 80a3850:	61a2      	str	r2, [r4, #24]
 80a3852:	68e2      	ldr	r2, [r4, #12]
 80a3854:	6923      	ldr	r3, [r4, #16]
 80a3856:	3201      	adds	r2, #1
 80a3858:	60e2      	str	r2, [r4, #12]
 80a385a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a385e:	428a      	cmp	r2, r1
 80a3860:	dd46      	ble.n	80a38f0 <localtime_r+0x1b8>
 80a3862:	3301      	adds	r3, #1
 80a3864:	2b0c      	cmp	r3, #12
 80a3866:	bf08      	it	eq
 80a3868:	6963      	ldreq	r3, [r4, #20]
 80a386a:	eba2 0201 	sub.w	r2, r2, r1
 80a386e:	60e2      	str	r2, [r4, #12]
 80a3870:	bf05      	ittet	eq
 80a3872:	3301      	addeq	r3, #1
 80a3874:	2200      	moveq	r2, #0
 80a3876:	6123      	strne	r3, [r4, #16]
 80a3878:	6122      	streq	r2, [r4, #16]
 80a387a:	bf04      	itt	eq
 80a387c:	6163      	streq	r3, [r4, #20]
 80a387e:	61e2      	streq	r2, [r4, #28]
 80a3880:	e036      	b.n	80a38f0 <localtime_r+0x1b8>
 80a3882:	2b00      	cmp	r3, #0
 80a3884:	da34      	bge.n	80a38f0 <localtime_r+0x1b8>
 80a3886:	69e2      	ldr	r2, [r4, #28]
 80a3888:	3318      	adds	r3, #24
 80a388a:	3a01      	subs	r2, #1
 80a388c:	61e2      	str	r2, [r4, #28]
 80a388e:	69a2      	ldr	r2, [r4, #24]
 80a3890:	60a3      	str	r3, [r4, #8]
 80a3892:	3a01      	subs	r2, #1
 80a3894:	bf48      	it	mi
 80a3896:	2206      	movmi	r2, #6
 80a3898:	61a2      	str	r2, [r4, #24]
 80a389a:	68e2      	ldr	r2, [r4, #12]
 80a389c:	3a01      	subs	r2, #1
 80a389e:	60e2      	str	r2, [r4, #12]
 80a38a0:	bb32      	cbnz	r2, 80a38f0 <localtime_r+0x1b8>
 80a38a2:	6923      	ldr	r3, [r4, #16]
 80a38a4:	3b01      	subs	r3, #1
 80a38a6:	d401      	bmi.n	80a38ac <localtime_r+0x174>
 80a38a8:	6123      	str	r3, [r4, #16]
 80a38aa:	e01d      	b.n	80a38e8 <localtime_r+0x1b0>
 80a38ac:	230b      	movs	r3, #11
 80a38ae:	6123      	str	r3, [r4, #16]
 80a38b0:	6963      	ldr	r3, [r4, #20]
 80a38b2:	1e5a      	subs	r2, r3, #1
 80a38b4:	f012 0f03 	tst.w	r2, #3
 80a38b8:	6162      	str	r2, [r4, #20]
 80a38ba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a38be:	d105      	bne.n	80a38cc <localtime_r+0x194>
 80a38c0:	2164      	movs	r1, #100	; 0x64
 80a38c2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a38c6:	fb01 3212 	mls	r2, r1, r2, r3
 80a38ca:	b94a      	cbnz	r2, 80a38e0 <localtime_r+0x1a8>
 80a38cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a38d0:	fb93 f2f1 	sdiv	r2, r3, r1
 80a38d4:	fb01 3312 	mls	r3, r1, r2, r3
 80a38d8:	fab3 f383 	clz	r3, r3
 80a38dc:	095b      	lsrs	r3, r3, #5
 80a38de:	e000      	b.n	80a38e2 <localtime_r+0x1aa>
 80a38e0:	2301      	movs	r3, #1
 80a38e2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a38e6:	61e3      	str	r3, [r4, #28]
 80a38e8:	6923      	ldr	r3, [r4, #16]
 80a38ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a38ee:	60e3      	str	r3, [r4, #12]
 80a38f0:	f000 fa4f 	bl	80a3d92 <__tz_unlock>
 80a38f4:	4620      	mov	r0, r4
 80a38f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a38fa:	bf00      	nop
 80a38fc:	080a4660 	.word	0x080a4660
 80a3900:	20000a00 	.word	0x20000a00

080a3904 <memcpy>:
 80a3904:	b510      	push	{r4, lr}
 80a3906:	1e43      	subs	r3, r0, #1
 80a3908:	440a      	add	r2, r1
 80a390a:	4291      	cmp	r1, r2
 80a390c:	d004      	beq.n	80a3918 <memcpy+0x14>
 80a390e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3912:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3916:	e7f8      	b.n	80a390a <memcpy+0x6>
 80a3918:	bd10      	pop	{r4, pc}

080a391a <memset>:
 80a391a:	4603      	mov	r3, r0
 80a391c:	4402      	add	r2, r0
 80a391e:	4293      	cmp	r3, r2
 80a3920:	d002      	beq.n	80a3928 <memset+0xe>
 80a3922:	f803 1b01 	strb.w	r1, [r3], #1
 80a3926:	e7fa      	b.n	80a391e <memset+0x4>
 80a3928:	4770      	bx	lr
	...

080a392c <srand>:
 80a392c:	b538      	push	{r3, r4, r5, lr}
 80a392e:	4b12      	ldr	r3, [pc, #72]	; (80a3978 <srand+0x4c>)
 80a3930:	4605      	mov	r5, r0
 80a3932:	681c      	ldr	r4, [r3, #0]
 80a3934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3936:	b9d3      	cbnz	r3, 80a396e <srand+0x42>
 80a3938:	2018      	movs	r0, #24
 80a393a:	f7fe f98b 	bl	80a1c54 <malloc>
 80a393e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3942:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3944:	8003      	strh	r3, [r0, #0]
 80a3946:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a394a:	8043      	strh	r3, [r0, #2]
 80a394c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3950:	8083      	strh	r3, [r0, #4]
 80a3952:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3956:	80c3      	strh	r3, [r0, #6]
 80a3958:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a395c:	8103      	strh	r3, [r0, #8]
 80a395e:	2305      	movs	r3, #5
 80a3960:	8143      	strh	r3, [r0, #10]
 80a3962:	230b      	movs	r3, #11
 80a3964:	8183      	strh	r3, [r0, #12]
 80a3966:	2201      	movs	r2, #1
 80a3968:	2300      	movs	r3, #0
 80a396a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a396e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3970:	2200      	movs	r2, #0
 80a3972:	611d      	str	r5, [r3, #16]
 80a3974:	615a      	str	r2, [r3, #20]
 80a3976:	bd38      	pop	{r3, r4, r5, pc}
 80a3978:	2000036c 	.word	0x2000036c

080a397c <strcmp>:
 80a397c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3980:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3984:	2a01      	cmp	r2, #1
 80a3986:	bf28      	it	cs
 80a3988:	429a      	cmpcs	r2, r3
 80a398a:	d0f7      	beq.n	80a397c <strcmp>
 80a398c:	1ad0      	subs	r0, r2, r3
 80a398e:	4770      	bx	lr

080a3990 <strcpy>:
 80a3990:	4603      	mov	r3, r0
 80a3992:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3996:	f803 2b01 	strb.w	r2, [r3], #1
 80a399a:	2a00      	cmp	r2, #0
 80a399c:	d1f9      	bne.n	80a3992 <strcpy+0x2>
 80a399e:	4770      	bx	lr

080a39a0 <strdup>:
 80a39a0:	4b02      	ldr	r3, [pc, #8]	; (80a39ac <strdup+0xc>)
 80a39a2:	4601      	mov	r1, r0
 80a39a4:	6818      	ldr	r0, [r3, #0]
 80a39a6:	f000 b803 	b.w	80a39b0 <_strdup_r>
 80a39aa:	bf00      	nop
 80a39ac:	2000036c 	.word	0x2000036c

080a39b0 <_strdup_r>:
 80a39b0:	b570      	push	{r4, r5, r6, lr}
 80a39b2:	4606      	mov	r6, r0
 80a39b4:	4608      	mov	r0, r1
 80a39b6:	460c      	mov	r4, r1
 80a39b8:	f000 f80d 	bl	80a39d6 <strlen>
 80a39bc:	1c45      	adds	r5, r0, #1
 80a39be:	4629      	mov	r1, r5
 80a39c0:	4630      	mov	r0, r6
 80a39c2:	f7fe f977 	bl	80a1cb4 <_malloc_r>
 80a39c6:	4606      	mov	r6, r0
 80a39c8:	b118      	cbz	r0, 80a39d2 <_strdup_r+0x22>
 80a39ca:	462a      	mov	r2, r5
 80a39cc:	4621      	mov	r1, r4
 80a39ce:	f7ff ff99 	bl	80a3904 <memcpy>
 80a39d2:	4630      	mov	r0, r6
 80a39d4:	bd70      	pop	{r4, r5, r6, pc}

080a39d6 <strlen>:
 80a39d6:	4603      	mov	r3, r0
 80a39d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a39dc:	2a00      	cmp	r2, #0
 80a39de:	d1fb      	bne.n	80a39d8 <strlen+0x2>
 80a39e0:	1a18      	subs	r0, r3, r0
 80a39e2:	3801      	subs	r0, #1
 80a39e4:	4770      	bx	lr

080a39e6 <strncmp>:
 80a39e6:	b530      	push	{r4, r5, lr}
 80a39e8:	b182      	cbz	r2, 80a3a0c <strncmp+0x26>
 80a39ea:	1e45      	subs	r5, r0, #1
 80a39ec:	3901      	subs	r1, #1
 80a39ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a39f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a39f6:	42a3      	cmp	r3, r4
 80a39f8:	d106      	bne.n	80a3a08 <strncmp+0x22>
 80a39fa:	43ec      	mvns	r4, r5
 80a39fc:	4414      	add	r4, r2
 80a39fe:	42e0      	cmn	r0, r4
 80a3a00:	d001      	beq.n	80a3a06 <strncmp+0x20>
 80a3a02:	2b00      	cmp	r3, #0
 80a3a04:	d1f3      	bne.n	80a39ee <strncmp+0x8>
 80a3a06:	461c      	mov	r4, r3
 80a3a08:	1b18      	subs	r0, r3, r4
 80a3a0a:	bd30      	pop	{r4, r5, pc}
 80a3a0c:	4610      	mov	r0, r2
 80a3a0e:	bd30      	pop	{r4, r5, pc}

080a3a10 <_strtol_r>:
 80a3a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3a14:	460f      	mov	r7, r1
 80a3a16:	4680      	mov	r8, r0
 80a3a18:	483f      	ldr	r0, [pc, #252]	; (80a3b18 <_strtol_r+0x108>)
 80a3a1a:	f8d0 9000 	ldr.w	r9, [r0]
 80a3a1e:	463d      	mov	r5, r7
 80a3a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3a24:	eb09 0004 	add.w	r0, r9, r4
 80a3a28:	7840      	ldrb	r0, [r0, #1]
 80a3a2a:	f000 0008 	and.w	r0, r0, #8
 80a3a2e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a3a32:	b108      	cbz	r0, 80a3a38 <_strtol_r+0x28>
 80a3a34:	462f      	mov	r7, r5
 80a3a36:	e7f2      	b.n	80a3a1e <_strtol_r+0xe>
 80a3a38:	2c2d      	cmp	r4, #45	; 0x2d
 80a3a3a:	d103      	bne.n	80a3a44 <_strtol_r+0x34>
 80a3a3c:	1cbd      	adds	r5, r7, #2
 80a3a3e:	787c      	ldrb	r4, [r7, #1]
 80a3a40:	2601      	movs	r6, #1
 80a3a42:	e003      	b.n	80a3a4c <_strtol_r+0x3c>
 80a3a44:	2c2b      	cmp	r4, #43	; 0x2b
 80a3a46:	bf04      	itt	eq
 80a3a48:	787c      	ldrbeq	r4, [r7, #1]
 80a3a4a:	1cbd      	addeq	r5, r7, #2
 80a3a4c:	b113      	cbz	r3, 80a3a54 <_strtol_r+0x44>
 80a3a4e:	2b10      	cmp	r3, #16
 80a3a50:	d10a      	bne.n	80a3a68 <_strtol_r+0x58>
 80a3a52:	e05b      	b.n	80a3b0c <_strtol_r+0xfc>
 80a3a54:	2c30      	cmp	r4, #48	; 0x30
 80a3a56:	d157      	bne.n	80a3b08 <_strtol_r+0xf8>
 80a3a58:	7828      	ldrb	r0, [r5, #0]
 80a3a5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3a5e:	2858      	cmp	r0, #88	; 0x58
 80a3a60:	d14d      	bne.n	80a3afe <_strtol_r+0xee>
 80a3a62:	786c      	ldrb	r4, [r5, #1]
 80a3a64:	2310      	movs	r3, #16
 80a3a66:	3502      	adds	r5, #2
 80a3a68:	2e00      	cmp	r6, #0
 80a3a6a:	bf14      	ite	ne
 80a3a6c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a3a70:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a3a74:	fbbc faf3 	udiv	sl, ip, r3
 80a3a78:	2700      	movs	r7, #0
 80a3a7a:	4638      	mov	r0, r7
 80a3a7c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a3a80:	eb09 0e04 	add.w	lr, r9, r4
 80a3a84:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3a88:	f01e 0f04 	tst.w	lr, #4
 80a3a8c:	d001      	beq.n	80a3a92 <_strtol_r+0x82>
 80a3a8e:	3c30      	subs	r4, #48	; 0x30
 80a3a90:	e00b      	b.n	80a3aaa <_strtol_r+0x9a>
 80a3a92:	f01e 0e03 	ands.w	lr, lr, #3
 80a3a96:	d01b      	beq.n	80a3ad0 <_strtol_r+0xc0>
 80a3a98:	f1be 0f01 	cmp.w	lr, #1
 80a3a9c:	bf0c      	ite	eq
 80a3a9e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3aa2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a3aa6:	ebce 0404 	rsb	r4, lr, r4
 80a3aaa:	42a3      	cmp	r3, r4
 80a3aac:	dd10      	ble.n	80a3ad0 <_strtol_r+0xc0>
 80a3aae:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a3ab2:	d00a      	beq.n	80a3aca <_strtol_r+0xba>
 80a3ab4:	4550      	cmp	r0, sl
 80a3ab6:	d806      	bhi.n	80a3ac6 <_strtol_r+0xb6>
 80a3ab8:	d101      	bne.n	80a3abe <_strtol_r+0xae>
 80a3aba:	4564      	cmp	r4, ip
 80a3abc:	dc03      	bgt.n	80a3ac6 <_strtol_r+0xb6>
 80a3abe:	fb03 4000 	mla	r0, r3, r0, r4
 80a3ac2:	2701      	movs	r7, #1
 80a3ac4:	e001      	b.n	80a3aca <_strtol_r+0xba>
 80a3ac6:	f04f 37ff 	mov.w	r7, #4294967295
 80a3aca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3ace:	e7d7      	b.n	80a3a80 <_strtol_r+0x70>
 80a3ad0:	1c7b      	adds	r3, r7, #1
 80a3ad2:	d10c      	bne.n	80a3aee <_strtol_r+0xde>
 80a3ad4:	2e00      	cmp	r6, #0
 80a3ad6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a3ada:	bf14      	ite	ne
 80a3adc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a3ae0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3ae4:	f8c8 3000 	str.w	r3, [r8]
 80a3ae8:	b92a      	cbnz	r2, 80a3af6 <_strtol_r+0xe6>
 80a3aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3aee:	b106      	cbz	r6, 80a3af2 <_strtol_r+0xe2>
 80a3af0:	4240      	negs	r0, r0
 80a3af2:	b172      	cbz	r2, 80a3b12 <_strtol_r+0x102>
 80a3af4:	b107      	cbz	r7, 80a3af8 <_strtol_r+0xe8>
 80a3af6:	1e69      	subs	r1, r5, #1
 80a3af8:	6011      	str	r1, [r2, #0]
 80a3afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3afe:	2430      	movs	r4, #48	; 0x30
 80a3b00:	2b00      	cmp	r3, #0
 80a3b02:	d1b1      	bne.n	80a3a68 <_strtol_r+0x58>
 80a3b04:	2308      	movs	r3, #8
 80a3b06:	e7af      	b.n	80a3a68 <_strtol_r+0x58>
 80a3b08:	230a      	movs	r3, #10
 80a3b0a:	e7ad      	b.n	80a3a68 <_strtol_r+0x58>
 80a3b0c:	2c30      	cmp	r4, #48	; 0x30
 80a3b0e:	d0a3      	beq.n	80a3a58 <_strtol_r+0x48>
 80a3b10:	e7aa      	b.n	80a3a68 <_strtol_r+0x58>
 80a3b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3b16:	bf00      	nop
 80a3b18:	20000308 	.word	0x20000308

080a3b1c <strtol>:
 80a3b1c:	4613      	mov	r3, r2
 80a3b1e:	460a      	mov	r2, r1
 80a3b20:	4601      	mov	r1, r0
 80a3b22:	4802      	ldr	r0, [pc, #8]	; (80a3b2c <strtol+0x10>)
 80a3b24:	6800      	ldr	r0, [r0, #0]
 80a3b26:	f7ff bf73 	b.w	80a3a10 <_strtol_r>
 80a3b2a:	bf00      	nop
 80a3b2c:	2000036c 	.word	0x2000036c

080a3b30 <_strtoul_r>:
 80a3b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3b34:	460e      	mov	r6, r1
 80a3b36:	4680      	mov	r8, r0
 80a3b38:	483b      	ldr	r0, [pc, #236]	; (80a3c28 <_strtoul_r+0xf8>)
 80a3b3a:	f8d0 9000 	ldr.w	r9, [r0]
 80a3b3e:	4635      	mov	r5, r6
 80a3b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3b44:	eb09 0004 	add.w	r0, r9, r4
 80a3b48:	7840      	ldrb	r0, [r0, #1]
 80a3b4a:	f000 0008 	and.w	r0, r0, #8
 80a3b4e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a3b52:	b108      	cbz	r0, 80a3b58 <_strtoul_r+0x28>
 80a3b54:	462e      	mov	r6, r5
 80a3b56:	e7f2      	b.n	80a3b3e <_strtoul_r+0xe>
 80a3b58:	2c2d      	cmp	r4, #45	; 0x2d
 80a3b5a:	d103      	bne.n	80a3b64 <_strtoul_r+0x34>
 80a3b5c:	1cb5      	adds	r5, r6, #2
 80a3b5e:	7874      	ldrb	r4, [r6, #1]
 80a3b60:	2701      	movs	r7, #1
 80a3b62:	e003      	b.n	80a3b6c <_strtoul_r+0x3c>
 80a3b64:	2c2b      	cmp	r4, #43	; 0x2b
 80a3b66:	bf04      	itt	eq
 80a3b68:	7874      	ldrbeq	r4, [r6, #1]
 80a3b6a:	1cb5      	addeq	r5, r6, #2
 80a3b6c:	b113      	cbz	r3, 80a3b74 <_strtoul_r+0x44>
 80a3b6e:	2b10      	cmp	r3, #16
 80a3b70:	d10a      	bne.n	80a3b88 <_strtoul_r+0x58>
 80a3b72:	e053      	b.n	80a3c1c <_strtoul_r+0xec>
 80a3b74:	2c30      	cmp	r4, #48	; 0x30
 80a3b76:	d14f      	bne.n	80a3c18 <_strtoul_r+0xe8>
 80a3b78:	7828      	ldrb	r0, [r5, #0]
 80a3b7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3b7e:	2858      	cmp	r0, #88	; 0x58
 80a3b80:	d145      	bne.n	80a3c0e <_strtoul_r+0xde>
 80a3b82:	786c      	ldrb	r4, [r5, #1]
 80a3b84:	2310      	movs	r3, #16
 80a3b86:	3502      	adds	r5, #2
 80a3b88:	f04f 3cff 	mov.w	ip, #4294967295
 80a3b8c:	fbbc fcf3 	udiv	ip, ip, r3
 80a3b90:	fb03 fa0c 	mul.w	sl, r3, ip
 80a3b94:	2600      	movs	r6, #0
 80a3b96:	ea6f 0a0a 	mvn.w	sl, sl
 80a3b9a:	4630      	mov	r0, r6
 80a3b9c:	eb09 0e04 	add.w	lr, r9, r4
 80a3ba0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3ba4:	f01e 0f04 	tst.w	lr, #4
 80a3ba8:	d001      	beq.n	80a3bae <_strtoul_r+0x7e>
 80a3baa:	3c30      	subs	r4, #48	; 0x30
 80a3bac:	e00b      	b.n	80a3bc6 <_strtoul_r+0x96>
 80a3bae:	f01e 0e03 	ands.w	lr, lr, #3
 80a3bb2:	d01a      	beq.n	80a3bea <_strtoul_r+0xba>
 80a3bb4:	f1be 0f01 	cmp.w	lr, #1
 80a3bb8:	bf0c      	ite	eq
 80a3bba:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3bbe:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a3bc2:	ebce 0404 	rsb	r4, lr, r4
 80a3bc6:	42a3      	cmp	r3, r4
 80a3bc8:	dd0f      	ble.n	80a3bea <_strtoul_r+0xba>
 80a3bca:	2e00      	cmp	r6, #0
 80a3bcc:	db08      	blt.n	80a3be0 <_strtoul_r+0xb0>
 80a3bce:	4560      	cmp	r0, ip
 80a3bd0:	d806      	bhi.n	80a3be0 <_strtoul_r+0xb0>
 80a3bd2:	d101      	bne.n	80a3bd8 <_strtoul_r+0xa8>
 80a3bd4:	4554      	cmp	r4, sl
 80a3bd6:	dc03      	bgt.n	80a3be0 <_strtoul_r+0xb0>
 80a3bd8:	fb03 4000 	mla	r0, r3, r0, r4
 80a3bdc:	2601      	movs	r6, #1
 80a3bde:	e001      	b.n	80a3be4 <_strtoul_r+0xb4>
 80a3be0:	f04f 36ff 	mov.w	r6, #4294967295
 80a3be4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3be8:	e7d8      	b.n	80a3b9c <_strtoul_r+0x6c>
 80a3bea:	2e00      	cmp	r6, #0
 80a3bec:	da07      	bge.n	80a3bfe <_strtoul_r+0xce>
 80a3bee:	2322      	movs	r3, #34	; 0x22
 80a3bf0:	f8c8 3000 	str.w	r3, [r8]
 80a3bf4:	f04f 30ff 	mov.w	r0, #4294967295
 80a3bf8:	b92a      	cbnz	r2, 80a3c06 <_strtoul_r+0xd6>
 80a3bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3bfe:	b107      	cbz	r7, 80a3c02 <_strtoul_r+0xd2>
 80a3c00:	4240      	negs	r0, r0
 80a3c02:	b172      	cbz	r2, 80a3c22 <_strtoul_r+0xf2>
 80a3c04:	b106      	cbz	r6, 80a3c08 <_strtoul_r+0xd8>
 80a3c06:	1e69      	subs	r1, r5, #1
 80a3c08:	6011      	str	r1, [r2, #0]
 80a3c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3c0e:	2430      	movs	r4, #48	; 0x30
 80a3c10:	2b00      	cmp	r3, #0
 80a3c12:	d1b9      	bne.n	80a3b88 <_strtoul_r+0x58>
 80a3c14:	2308      	movs	r3, #8
 80a3c16:	e7b7      	b.n	80a3b88 <_strtoul_r+0x58>
 80a3c18:	230a      	movs	r3, #10
 80a3c1a:	e7b5      	b.n	80a3b88 <_strtoul_r+0x58>
 80a3c1c:	2c30      	cmp	r4, #48	; 0x30
 80a3c1e:	d0ab      	beq.n	80a3b78 <_strtoul_r+0x48>
 80a3c20:	e7b2      	b.n	80a3b88 <_strtoul_r+0x58>
 80a3c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3c26:	bf00      	nop
 80a3c28:	20000308 	.word	0x20000308

080a3c2c <strtoul>:
 80a3c2c:	4613      	mov	r3, r2
 80a3c2e:	460a      	mov	r2, r1
 80a3c30:	4601      	mov	r1, r0
 80a3c32:	4802      	ldr	r0, [pc, #8]	; (80a3c3c <strtoul+0x10>)
 80a3c34:	6800      	ldr	r0, [r0, #0]
 80a3c36:	f7ff bf7b 	b.w	80a3b30 <_strtoul_r>
 80a3c3a:	bf00      	nop
 80a3c3c:	2000036c 	.word	0x2000036c

080a3c40 <__tzcalc_limits>:
 80a3c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3c44:	4604      	mov	r4, r0
 80a3c46:	f000 fa6f 	bl	80a4128 <__gettzinfo>
 80a3c4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a3c4e:	429c      	cmp	r4, r3
 80a3c50:	f340 8096 	ble.w	80a3d80 <__tzcalc_limits+0x140>
 80a3c54:	f240 156d 	movw	r5, #365	; 0x16d
 80a3c58:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a3c5c:	18e3      	adds	r3, r4, r3
 80a3c5e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a3c62:	109b      	asrs	r3, r3, #2
 80a3c64:	fb05 3502 	mla	r5, r5, r2, r3
 80a3c68:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a3c6c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a3c70:	fb92 f3f3 	sdiv	r3, r2, r3
 80a3c74:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a3c78:	442b      	add	r3, r5
 80a3c7a:	18a5      	adds	r5, r4, r2
 80a3c7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3c80:	fb94 f7f2 	sdiv	r7, r4, r2
 80a3c84:	fb95 f5f2 	sdiv	r5, r5, r2
 80a3c88:	fb02 4717 	mls	r7, r2, r7, r4
 80a3c8c:	441d      	add	r5, r3
 80a3c8e:	2364      	movs	r3, #100	; 0x64
 80a3c90:	fb94 f6f3 	sdiv	r6, r4, r3
 80a3c94:	fab7 fe87 	clz	lr, r7
 80a3c98:	4601      	mov	r1, r0
 80a3c9a:	fb03 4616 	mls	r6, r3, r6, r4
 80a3c9e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a3ca2:	9301      	str	r3, [sp, #4]
 80a3ca4:	f004 0303 	and.w	r3, r4, #3
 80a3ca8:	6044      	str	r4, [r0, #4]
 80a3caa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a3cae:	9300      	str	r3, [sp, #0]
 80a3cb0:	f04f 0c07 	mov.w	ip, #7
 80a3cb4:	7a0b      	ldrb	r3, [r1, #8]
 80a3cb6:	2b4a      	cmp	r3, #74	; 0x4a
 80a3cb8:	d10e      	bne.n	80a3cd8 <__tzcalc_limits+0x98>
 80a3cba:	694b      	ldr	r3, [r1, #20]
 80a3cbc:	9a00      	ldr	r2, [sp, #0]
 80a3cbe:	18ec      	adds	r4, r5, r3
 80a3cc0:	b902      	cbnz	r2, 80a3cc4 <__tzcalc_limits+0x84>
 80a3cc2:	b906      	cbnz	r6, 80a3cc6 <__tzcalc_limits+0x86>
 80a3cc4:	b927      	cbnz	r7, 80a3cd0 <__tzcalc_limits+0x90>
 80a3cc6:	2b3b      	cmp	r3, #59	; 0x3b
 80a3cc8:	bfd4      	ite	le
 80a3cca:	2300      	movle	r3, #0
 80a3ccc:	2301      	movgt	r3, #1
 80a3cce:	e000      	b.n	80a3cd2 <__tzcalc_limits+0x92>
 80a3cd0:	2300      	movs	r3, #0
 80a3cd2:	4423      	add	r3, r4
 80a3cd4:	3b01      	subs	r3, #1
 80a3cd6:	e03f      	b.n	80a3d58 <__tzcalc_limits+0x118>
 80a3cd8:	2b44      	cmp	r3, #68	; 0x44
 80a3cda:	d102      	bne.n	80a3ce2 <__tzcalc_limits+0xa2>
 80a3cdc:	694b      	ldr	r3, [r1, #20]
 80a3cde:	442b      	add	r3, r5
 80a3ce0:	e03a      	b.n	80a3d58 <__tzcalc_limits+0x118>
 80a3ce2:	9b00      	ldr	r3, [sp, #0]
 80a3ce4:	b92b      	cbnz	r3, 80a3cf2 <__tzcalc_limits+0xb2>
 80a3ce6:	2e00      	cmp	r6, #0
 80a3ce8:	bf0c      	ite	eq
 80a3cea:	46f0      	moveq	r8, lr
 80a3cec:	f04f 0801 	movne.w	r8, #1
 80a3cf0:	e000      	b.n	80a3cf4 <__tzcalc_limits+0xb4>
 80a3cf2:	46f0      	mov	r8, lr
 80a3cf4:	46a9      	mov	r9, r5
 80a3cf6:	4b24      	ldr	r3, [pc, #144]	; (80a3d88 <__tzcalc_limits+0x148>)
 80a3cf8:	2230      	movs	r2, #48	; 0x30
 80a3cfa:	fb02 3808 	mla	r8, r2, r8, r3
 80a3cfe:	68cc      	ldr	r4, [r1, #12]
 80a3d00:	f1a8 0a04 	sub.w	sl, r8, #4
 80a3d04:	2301      	movs	r3, #1
 80a3d06:	42a3      	cmp	r3, r4
 80a3d08:	da04      	bge.n	80a3d14 <__tzcalc_limits+0xd4>
 80a3d0a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a3d0e:	3301      	adds	r3, #1
 80a3d10:	44d9      	add	r9, fp
 80a3d12:	e7f8      	b.n	80a3d06 <__tzcalc_limits+0xc6>
 80a3d14:	f109 0304 	add.w	r3, r9, #4
 80a3d18:	fb93 fbfc 	sdiv	fp, r3, ip
 80a3d1c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a3d20:	ebca 0a03 	rsb	sl, sl, r3
 80a3d24:	694b      	ldr	r3, [r1, #20]
 80a3d26:	2c01      	cmp	r4, #1
 80a3d28:	bfb8      	it	lt
 80a3d2a:	2401      	movlt	r4, #1
 80a3d2c:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a3d30:	690b      	ldr	r3, [r1, #16]
 80a3d32:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a3d36:	f103 33ff 	add.w	r3, r3, #4294967295
 80a3d3a:	f104 34ff 	add.w	r4, r4, #4294967295
 80a3d3e:	bf48      	it	mi
 80a3d40:	f10a 0a07 	addmi.w	sl, sl, #7
 80a3d44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3d48:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a3d4c:	4453      	add	r3, sl
 80a3d4e:	42a3      	cmp	r3, r4
 80a3d50:	db01      	blt.n	80a3d56 <__tzcalc_limits+0x116>
 80a3d52:	3b07      	subs	r3, #7
 80a3d54:	e7fb      	b.n	80a3d4e <__tzcalc_limits+0x10e>
 80a3d56:	444b      	add	r3, r9
 80a3d58:	698c      	ldr	r4, [r1, #24]
 80a3d5a:	4a0c      	ldr	r2, [pc, #48]	; (80a3d8c <__tzcalc_limits+0x14c>)
 80a3d5c:	fb02 4303 	mla	r3, r2, r3, r4
 80a3d60:	6a0c      	ldr	r4, [r1, #32]
 80a3d62:	4423      	add	r3, r4
 80a3d64:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a3d68:	9b01      	ldr	r3, [sp, #4]
 80a3d6a:	4299      	cmp	r1, r3
 80a3d6c:	d1a2      	bne.n	80a3cb4 <__tzcalc_limits+0x74>
 80a3d6e:	69c3      	ldr	r3, [r0, #28]
 80a3d70:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a3d72:	4293      	cmp	r3, r2
 80a3d74:	bfac      	ite	ge
 80a3d76:	2300      	movge	r3, #0
 80a3d78:	2301      	movlt	r3, #1
 80a3d7a:	6003      	str	r3, [r0, #0]
 80a3d7c:	2001      	movs	r0, #1
 80a3d7e:	e000      	b.n	80a3d82 <__tzcalc_limits+0x142>
 80a3d80:	2000      	movs	r0, #0
 80a3d82:	b003      	add	sp, #12
 80a3d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d88:	080a4660 	.word	0x080a4660
 80a3d8c:	00015180 	.word	0x00015180

080a3d90 <__tz_lock>:
 80a3d90:	4770      	bx	lr

080a3d92 <__tz_unlock>:
 80a3d92:	4770      	bx	lr

080a3d94 <_tzset_unlocked>:
 80a3d94:	4b01      	ldr	r3, [pc, #4]	; (80a3d9c <_tzset_unlocked+0x8>)
 80a3d96:	6818      	ldr	r0, [r3, #0]
 80a3d98:	f000 b802 	b.w	80a3da0 <_tzset_unlocked_r>
 80a3d9c:	2000036c 	.word	0x2000036c

080a3da0 <_tzset_unlocked_r>:
 80a3da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3da4:	b08d      	sub	sp, #52	; 0x34
 80a3da6:	4607      	mov	r7, r0
 80a3da8:	f000 f9be 	bl	80a4128 <__gettzinfo>
 80a3dac:	49b0      	ldr	r1, [pc, #704]	; (80a4070 <_tzset_unlocked_r+0x2d0>)
 80a3dae:	4604      	mov	r4, r0
 80a3db0:	4638      	mov	r0, r7
 80a3db2:	f000 f9b1 	bl	80a4118 <_getenv_r>
 80a3db6:	4eaf      	ldr	r6, [pc, #700]	; (80a4074 <_tzset_unlocked_r+0x2d4>)
 80a3db8:	4605      	mov	r5, r0
 80a3dba:	b960      	cbnz	r0, 80a3dd6 <_tzset_unlocked_r+0x36>
 80a3dbc:	4bae      	ldr	r3, [pc, #696]	; (80a4078 <_tzset_unlocked_r+0x2d8>)
 80a3dbe:	4aaf      	ldr	r2, [pc, #700]	; (80a407c <_tzset_unlocked_r+0x2dc>)
 80a3dc0:	6018      	str	r0, [r3, #0]
 80a3dc2:	4baf      	ldr	r3, [pc, #700]	; (80a4080 <_tzset_unlocked_r+0x2e0>)
 80a3dc4:	6018      	str	r0, [r3, #0]
 80a3dc6:	4baf      	ldr	r3, [pc, #700]	; (80a4084 <_tzset_unlocked_r+0x2e4>)
 80a3dc8:	6830      	ldr	r0, [r6, #0]
 80a3dca:	601a      	str	r2, [r3, #0]
 80a3dcc:	605a      	str	r2, [r3, #4]
 80a3dce:	f7fd ff49 	bl	80a1c64 <free>
 80a3dd2:	6035      	str	r5, [r6, #0]
 80a3dd4:	e148      	b.n	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3dd6:	6831      	ldr	r1, [r6, #0]
 80a3dd8:	b979      	cbnz	r1, 80a3dfa <_tzset_unlocked_r+0x5a>
 80a3dda:	6830      	ldr	r0, [r6, #0]
 80a3ddc:	f7fd ff42 	bl	80a1c64 <free>
 80a3de0:	4628      	mov	r0, r5
 80a3de2:	f7ff fdf8 	bl	80a39d6 <strlen>
 80a3de6:	1c41      	adds	r1, r0, #1
 80a3de8:	4638      	mov	r0, r7
 80a3dea:	f7fd ff63 	bl	80a1cb4 <_malloc_r>
 80a3dee:	6030      	str	r0, [r6, #0]
 80a3df0:	b148      	cbz	r0, 80a3e06 <_tzset_unlocked_r+0x66>
 80a3df2:	4629      	mov	r1, r5
 80a3df4:	f7ff fdcc 	bl	80a3990 <strcpy>
 80a3df8:	e005      	b.n	80a3e06 <_tzset_unlocked_r+0x66>
 80a3dfa:	f7ff fdbf 	bl	80a397c <strcmp>
 80a3dfe:	2800      	cmp	r0, #0
 80a3e00:	f000 8132 	beq.w	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3e04:	e7e9      	b.n	80a3dda <_tzset_unlocked_r+0x3a>
 80a3e06:	782b      	ldrb	r3, [r5, #0]
 80a3e08:	ae0a      	add	r6, sp, #40	; 0x28
 80a3e0a:	2b3a      	cmp	r3, #58	; 0x3a
 80a3e0c:	bf08      	it	eq
 80a3e0e:	3501      	addeq	r5, #1
 80a3e10:	4633      	mov	r3, r6
 80a3e12:	4a9d      	ldr	r2, [pc, #628]	; (80a4088 <_tzset_unlocked_r+0x2e8>)
 80a3e14:	499d      	ldr	r1, [pc, #628]	; (80a408c <_tzset_unlocked_r+0x2ec>)
 80a3e16:	4628      	mov	r0, r5
 80a3e18:	f7fd ff34 	bl	80a1c84 <siscanf>
 80a3e1c:	2800      	cmp	r0, #0
 80a3e1e:	f340 8123 	ble.w	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3e24:	18ef      	adds	r7, r5, r3
 80a3e26:	5ceb      	ldrb	r3, [r5, r3]
 80a3e28:	2b2d      	cmp	r3, #45	; 0x2d
 80a3e2a:	d103      	bne.n	80a3e34 <_tzset_unlocked_r+0x94>
 80a3e2c:	3701      	adds	r7, #1
 80a3e2e:	f04f 35ff 	mov.w	r5, #4294967295
 80a3e32:	e003      	b.n	80a3e3c <_tzset_unlocked_r+0x9c>
 80a3e34:	2b2b      	cmp	r3, #43	; 0x2b
 80a3e36:	bf08      	it	eq
 80a3e38:	3701      	addeq	r7, #1
 80a3e3a:	2501      	movs	r5, #1
 80a3e3c:	f10d 0a20 	add.w	sl, sp, #32
 80a3e40:	f10d 0b1e 	add.w	fp, sp, #30
 80a3e44:	f04f 0800 	mov.w	r8, #0
 80a3e48:	9603      	str	r6, [sp, #12]
 80a3e4a:	f8cd a008 	str.w	sl, [sp, #8]
 80a3e4e:	9601      	str	r6, [sp, #4]
 80a3e50:	f8cd b000 	str.w	fp, [sp]
 80a3e54:	4633      	mov	r3, r6
 80a3e56:	aa07      	add	r2, sp, #28
 80a3e58:	498d      	ldr	r1, [pc, #564]	; (80a4090 <_tzset_unlocked_r+0x2f0>)
 80a3e5a:	4638      	mov	r0, r7
 80a3e5c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a3e60:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a3e64:	f7fd ff0e 	bl	80a1c84 <siscanf>
 80a3e68:	4540      	cmp	r0, r8
 80a3e6a:	f340 80fd 	ble.w	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3e6e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3e72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3e76:	213c      	movs	r1, #60	; 0x3c
 80a3e78:	fb01 3302 	mla	r3, r1, r2, r3
 80a3e7c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a3e80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3e84:	fb01 3302 	mla	r3, r1, r2, r3
 80a3e88:	435d      	muls	r5, r3
 80a3e8a:	4b7f      	ldr	r3, [pc, #508]	; (80a4088 <_tzset_unlocked_r+0x2e8>)
 80a3e8c:	6225      	str	r5, [r4, #32]
 80a3e8e:	4d7d      	ldr	r5, [pc, #500]	; (80a4084 <_tzset_unlocked_r+0x2e4>)
 80a3e90:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a409c <_tzset_unlocked_r+0x2fc>
 80a3e94:	602b      	str	r3, [r5, #0]
 80a3e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3e98:	464a      	mov	r2, r9
 80a3e9a:	441f      	add	r7, r3
 80a3e9c:	497b      	ldr	r1, [pc, #492]	; (80a408c <_tzset_unlocked_r+0x2ec>)
 80a3e9e:	4633      	mov	r3, r6
 80a3ea0:	4638      	mov	r0, r7
 80a3ea2:	f7fd feef 	bl	80a1c84 <siscanf>
 80a3ea6:	4540      	cmp	r0, r8
 80a3ea8:	dc08      	bgt.n	80a3ebc <_tzset_unlocked_r+0x11c>
 80a3eaa:	682b      	ldr	r3, [r5, #0]
 80a3eac:	6a22      	ldr	r2, [r4, #32]
 80a3eae:	606b      	str	r3, [r5, #4]
 80a3eb0:	4b71      	ldr	r3, [pc, #452]	; (80a4078 <_tzset_unlocked_r+0x2d8>)
 80a3eb2:	601a      	str	r2, [r3, #0]
 80a3eb4:	4b72      	ldr	r3, [pc, #456]	; (80a4080 <_tzset_unlocked_r+0x2e0>)
 80a3eb6:	f8c3 8000 	str.w	r8, [r3]
 80a3eba:	e0d5      	b.n	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3ebe:	f8c5 9004 	str.w	r9, [r5, #4]
 80a3ec2:	18fd      	adds	r5, r7, r3
 80a3ec4:	5cfb      	ldrb	r3, [r7, r3]
 80a3ec6:	2b2d      	cmp	r3, #45	; 0x2d
 80a3ec8:	d103      	bne.n	80a3ed2 <_tzset_unlocked_r+0x132>
 80a3eca:	3501      	adds	r5, #1
 80a3ecc:	f04f 37ff 	mov.w	r7, #4294967295
 80a3ed0:	e003      	b.n	80a3eda <_tzset_unlocked_r+0x13a>
 80a3ed2:	2b2b      	cmp	r3, #43	; 0x2b
 80a3ed4:	bf08      	it	eq
 80a3ed6:	3501      	addeq	r5, #1
 80a3ed8:	2701      	movs	r7, #1
 80a3eda:	2300      	movs	r3, #0
 80a3edc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3ee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3ee4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3ee8:	930a      	str	r3, [sp, #40]	; 0x28
 80a3eea:	9603      	str	r6, [sp, #12]
 80a3eec:	f8cd a008 	str.w	sl, [sp, #8]
 80a3ef0:	9601      	str	r6, [sp, #4]
 80a3ef2:	f8cd b000 	str.w	fp, [sp]
 80a3ef6:	4633      	mov	r3, r6
 80a3ef8:	aa07      	add	r2, sp, #28
 80a3efa:	4965      	ldr	r1, [pc, #404]	; (80a4090 <_tzset_unlocked_r+0x2f0>)
 80a3efc:	4628      	mov	r0, r5
 80a3efe:	f7fd fec1 	bl	80a1c84 <siscanf>
 80a3f02:	2800      	cmp	r0, #0
 80a3f04:	dc04      	bgt.n	80a3f10 <_tzset_unlocked_r+0x170>
 80a3f06:	6a23      	ldr	r3, [r4, #32]
 80a3f08:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a3f0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a3f0e:	e00e      	b.n	80a3f2e <_tzset_unlocked_r+0x18e>
 80a3f10:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3f14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3f18:	213c      	movs	r1, #60	; 0x3c
 80a3f1a:	fb01 3302 	mla	r3, r1, r2, r3
 80a3f1e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a3f22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3f26:	fb01 3302 	mla	r3, r1, r2, r3
 80a3f2a:	435f      	muls	r7, r3
 80a3f2c:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a3f2e:	4627      	mov	r7, r4
 80a3f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3f32:	f04f 0900 	mov.w	r9, #0
 80a3f36:	441d      	add	r5, r3
 80a3f38:	782b      	ldrb	r3, [r5, #0]
 80a3f3a:	2b2c      	cmp	r3, #44	; 0x2c
 80a3f3c:	bf08      	it	eq
 80a3f3e:	3501      	addeq	r5, #1
 80a3f40:	f895 8000 	ldrb.w	r8, [r5]
 80a3f44:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a3f48:	d126      	bne.n	80a3f98 <_tzset_unlocked_r+0x1f8>
 80a3f4a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a3f4e:	9302      	str	r3, [sp, #8]
 80a3f50:	ab09      	add	r3, sp, #36	; 0x24
 80a3f52:	9300      	str	r3, [sp, #0]
 80a3f54:	9603      	str	r6, [sp, #12]
 80a3f56:	9601      	str	r6, [sp, #4]
 80a3f58:	4633      	mov	r3, r6
 80a3f5a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a3f5e:	494d      	ldr	r1, [pc, #308]	; (80a4094 <_tzset_unlocked_r+0x2f4>)
 80a3f60:	4628      	mov	r0, r5
 80a3f62:	f7fd fe8f 	bl	80a1c84 <siscanf>
 80a3f66:	2803      	cmp	r0, #3
 80a3f68:	d17e      	bne.n	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3f6a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a3f6e:	1e4b      	subs	r3, r1, #1
 80a3f70:	2b0b      	cmp	r3, #11
 80a3f72:	d879      	bhi.n	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3f74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a3f78:	1e53      	subs	r3, r2, #1
 80a3f7a:	2b04      	cmp	r3, #4
 80a3f7c:	d874      	bhi.n	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3f7e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a3f82:	2b06      	cmp	r3, #6
 80a3f84:	d870      	bhi.n	80a4068 <_tzset_unlocked_r+0x2c8>
 80a3f86:	f887 8008 	strb.w	r8, [r7, #8]
 80a3f8a:	60f9      	str	r1, [r7, #12]
 80a3f8c:	613a      	str	r2, [r7, #16]
 80a3f8e:	617b      	str	r3, [r7, #20]
 80a3f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3f92:	eb05 0803 	add.w	r8, r5, r3
 80a3f96:	e02a      	b.n	80a3fee <_tzset_unlocked_r+0x24e>
 80a3f98:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a3f9c:	bf06      	itte	eq
 80a3f9e:	4643      	moveq	r3, r8
 80a3fa0:	3501      	addeq	r5, #1
 80a3fa2:	2344      	movne	r3, #68	; 0x44
 80a3fa4:	220a      	movs	r2, #10
 80a3fa6:	a90b      	add	r1, sp, #44	; 0x2c
 80a3fa8:	4628      	mov	r0, r5
 80a3faa:	9305      	str	r3, [sp, #20]
 80a3fac:	f7ff fe3e 	bl	80a3c2c <strtoul>
 80a3fb0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a3fb4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a3fb8:	4545      	cmp	r5, r8
 80a3fba:	9b05      	ldr	r3, [sp, #20]
 80a3fbc:	d114      	bne.n	80a3fe8 <_tzset_unlocked_r+0x248>
 80a3fbe:	234d      	movs	r3, #77	; 0x4d
 80a3fc0:	f1b9 0f00 	cmp.w	r9, #0
 80a3fc4:	d107      	bne.n	80a3fd6 <_tzset_unlocked_r+0x236>
 80a3fc6:	7223      	strb	r3, [r4, #8]
 80a3fc8:	2303      	movs	r3, #3
 80a3fca:	60e3      	str	r3, [r4, #12]
 80a3fcc:	2302      	movs	r3, #2
 80a3fce:	6123      	str	r3, [r4, #16]
 80a3fd0:	f8c4 9014 	str.w	r9, [r4, #20]
 80a3fd4:	e00b      	b.n	80a3fee <_tzset_unlocked_r+0x24e>
 80a3fd6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a3fda:	230b      	movs	r3, #11
 80a3fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 80a3fde:	2301      	movs	r3, #1
 80a3fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a3fe2:	2300      	movs	r3, #0
 80a3fe4:	6323      	str	r3, [r4, #48]	; 0x30
 80a3fe6:	e002      	b.n	80a3fee <_tzset_unlocked_r+0x24e>
 80a3fe8:	b280      	uxth	r0, r0
 80a3fea:	723b      	strb	r3, [r7, #8]
 80a3fec:	6178      	str	r0, [r7, #20]
 80a3fee:	2302      	movs	r3, #2
 80a3ff0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3ff4:	2300      	movs	r3, #0
 80a3ff6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3ffa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3ffe:	930a      	str	r3, [sp, #40]	; 0x28
 80a4000:	f898 3000 	ldrb.w	r3, [r8]
 80a4004:	2b2f      	cmp	r3, #47	; 0x2f
 80a4006:	d10b      	bne.n	80a4020 <_tzset_unlocked_r+0x280>
 80a4008:	9603      	str	r6, [sp, #12]
 80a400a:	f8cd a008 	str.w	sl, [sp, #8]
 80a400e:	9601      	str	r6, [sp, #4]
 80a4010:	f8cd b000 	str.w	fp, [sp]
 80a4014:	4633      	mov	r3, r6
 80a4016:	aa07      	add	r2, sp, #28
 80a4018:	491f      	ldr	r1, [pc, #124]	; (80a4098 <_tzset_unlocked_r+0x2f8>)
 80a401a:	4640      	mov	r0, r8
 80a401c:	f7fd fe32 	bl	80a1c84 <siscanf>
 80a4020:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4024:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4028:	213c      	movs	r1, #60	; 0x3c
 80a402a:	fb01 3302 	mla	r3, r1, r2, r3
 80a402e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a4032:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4036:	fb01 3302 	mla	r3, r1, r2, r3
 80a403a:	61bb      	str	r3, [r7, #24]
 80a403c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a403e:	f109 0901 	add.w	r9, r9, #1
 80a4042:	f1b9 0f02 	cmp.w	r9, #2
 80a4046:	4445      	add	r5, r8
 80a4048:	f107 071c 	add.w	r7, r7, #28
 80a404c:	f47f af74 	bne.w	80a3f38 <_tzset_unlocked_r+0x198>
 80a4050:	6860      	ldr	r0, [r4, #4]
 80a4052:	f7ff fdf5 	bl	80a3c40 <__tzcalc_limits>
 80a4056:	6a22      	ldr	r2, [r4, #32]
 80a4058:	4b07      	ldr	r3, [pc, #28]	; (80a4078 <_tzset_unlocked_r+0x2d8>)
 80a405a:	601a      	str	r2, [r3, #0]
 80a405c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a405e:	1a9b      	subs	r3, r3, r2
 80a4060:	4a07      	ldr	r2, [pc, #28]	; (80a4080 <_tzset_unlocked_r+0x2e0>)
 80a4062:	bf18      	it	ne
 80a4064:	2301      	movne	r3, #1
 80a4066:	6013      	str	r3, [r2, #0]
 80a4068:	b00d      	add	sp, #52	; 0x34
 80a406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a406e:	bf00      	nop
 80a4070:	080a46c0 	.word	0x080a46c0
 80a4074:	200009fc 	.word	0x200009fc
 80a4078:	20000a04 	.word	0x20000a04
 80a407c:	080a46c3 	.word	0x080a46c3
 80a4080:	20000a00 	.word	0x20000a00
 80a4084:	20000370 	.word	0x20000370
 80a4088:	200009ef 	.word	0x200009ef
 80a408c:	080a46c7 	.word	0x080a46c7
 80a4090:	080a46ea 	.word	0x080a46ea
 80a4094:	080a46d6 	.word	0x080a46d6
 80a4098:	080a46e9 	.word	0x080a46e9
 80a409c:	200009e4 	.word	0x200009e4

080a40a0 <_findenv_r>:
 80a40a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a40a4:	4607      	mov	r7, r0
 80a40a6:	468b      	mov	fp, r1
 80a40a8:	4690      	mov	r8, r2
 80a40aa:	f000 f8d7 	bl	80a425c <__env_lock>
 80a40ae:	4b19      	ldr	r3, [pc, #100]	; (80a4114 <_findenv_r+0x74>)
 80a40b0:	681d      	ldr	r5, [r3, #0]
 80a40b2:	469a      	mov	sl, r3
 80a40b4:	b13d      	cbz	r5, 80a40c6 <_findenv_r+0x26>
 80a40b6:	465c      	mov	r4, fp
 80a40b8:	4623      	mov	r3, r4
 80a40ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a40be:	b142      	cbz	r2, 80a40d2 <_findenv_r+0x32>
 80a40c0:	2a3d      	cmp	r2, #61	; 0x3d
 80a40c2:	461c      	mov	r4, r3
 80a40c4:	d1f8      	bne.n	80a40b8 <_findenv_r+0x18>
 80a40c6:	4638      	mov	r0, r7
 80a40c8:	f000 f8c9 	bl	80a425e <__env_unlock>
 80a40cc:	2000      	movs	r0, #0
 80a40ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a40d2:	ebcb 0404 	rsb	r4, fp, r4
 80a40d6:	46a9      	mov	r9, r5
 80a40d8:	f859 0b04 	ldr.w	r0, [r9], #4
 80a40dc:	2800      	cmp	r0, #0
 80a40de:	d0f2      	beq.n	80a40c6 <_findenv_r+0x26>
 80a40e0:	4622      	mov	r2, r4
 80a40e2:	4659      	mov	r1, fp
 80a40e4:	f7ff fc7f 	bl	80a39e6 <strncmp>
 80a40e8:	b988      	cbnz	r0, 80a410e <_findenv_r+0x6e>
 80a40ea:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a40ee:	191e      	adds	r6, r3, r4
 80a40f0:	5d1b      	ldrb	r3, [r3, r4]
 80a40f2:	2b3d      	cmp	r3, #61	; 0x3d
 80a40f4:	d10b      	bne.n	80a410e <_findenv_r+0x6e>
 80a40f6:	f8da 3000 	ldr.w	r3, [sl]
 80a40fa:	4638      	mov	r0, r7
 80a40fc:	1aed      	subs	r5, r5, r3
 80a40fe:	10ad      	asrs	r5, r5, #2
 80a4100:	f8c8 5000 	str.w	r5, [r8]
 80a4104:	f000 f8ab 	bl	80a425e <__env_unlock>
 80a4108:	1c70      	adds	r0, r6, #1
 80a410a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a410e:	464d      	mov	r5, r9
 80a4110:	e7e1      	b.n	80a40d6 <_findenv_r+0x36>
 80a4112:	bf00      	nop
 80a4114:	200003b8 	.word	0x200003b8

080a4118 <_getenv_r>:
 80a4118:	b507      	push	{r0, r1, r2, lr}
 80a411a:	aa01      	add	r2, sp, #4
 80a411c:	f7ff ffc0 	bl	80a40a0 <_findenv_r>
 80a4120:	b003      	add	sp, #12
 80a4122:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4128 <__gettzinfo>:
 80a4128:	4800      	ldr	r0, [pc, #0]	; (80a412c <__gettzinfo+0x4>)
 80a412a:	4770      	bx	lr
 80a412c:	20000378 	.word	0x20000378

080a4130 <gmtime_r>:
 80a4130:	6802      	ldr	r2, [r0, #0]
 80a4132:	4b46      	ldr	r3, [pc, #280]	; (80a424c <gmtime_r+0x11c>)
 80a4134:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4136:	fb92 f4f3 	sdiv	r4, r2, r3
 80a413a:	fb03 2214 	mls	r2, r3, r4, r2
 80a413e:	2a00      	cmp	r2, #0
 80a4140:	bfbc      	itt	lt
 80a4142:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a4146:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a414a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a414e:	fb92 f3f0 	sdiv	r3, r2, r0
 80a4152:	fb00 2213 	mls	r2, r0, r3, r2
 80a4156:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a415a:	608b      	str	r3, [r1, #8]
 80a415c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a4160:	fb00 2213 	mls	r2, r0, r3, r2
 80a4164:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a4168:	bfac      	ite	ge
 80a416a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a416e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a4172:	604b      	str	r3, [r1, #4]
 80a4174:	600a      	str	r2, [r1, #0]
 80a4176:	2307      	movs	r3, #7
 80a4178:	1ce2      	adds	r2, r4, #3
 80a417a:	fb92 f3f3 	sdiv	r3, r2, r3
 80a417e:	4d34      	ldr	r5, [pc, #208]	; (80a4250 <gmtime_r+0x120>)
 80a4180:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a4184:	fb94 f5f5 	sdiv	r5, r4, r5
 80a4188:	1ad3      	subs	r3, r2, r3
 80a418a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a418e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a4192:	618b      	str	r3, [r1, #24]
 80a4194:	4b2f      	ldr	r3, [pc, #188]	; (80a4254 <gmtime_r+0x124>)
 80a4196:	4830      	ldr	r0, [pc, #192]	; (80a4258 <gmtime_r+0x128>)
 80a4198:	fb03 4405 	mla	r4, r3, r5, r4
 80a419c:	fbb4 f2f2 	udiv	r2, r4, r2
 80a41a0:	fbb4 f3f7 	udiv	r3, r4, r7
 80a41a4:	fbb4 f0f0 	udiv	r0, r4, r0
 80a41a8:	4422      	add	r2, r4
 80a41aa:	1ad2      	subs	r2, r2, r3
 80a41ac:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a41b0:	1a13      	subs	r3, r2, r0
 80a41b2:	f240 126d 	movw	r2, #365	; 0x16d
 80a41b6:	fbb3 f6f6 	udiv	r6, r3, r6
 80a41ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80a41be:	fbb3 f3f7 	udiv	r3, r3, r7
 80a41c2:	4434      	add	r4, r6
 80a41c4:	1ae3      	subs	r3, r4, r3
 80a41c6:	fb02 3310 	mls	r3, r2, r0, r3
 80a41ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a41ce:	2499      	movs	r4, #153	; 0x99
 80a41d0:	3202      	adds	r2, #2
 80a41d2:	fbb2 f2f4 	udiv	r2, r2, r4
 80a41d6:	4354      	muls	r4, r2
 80a41d8:	1ca6      	adds	r6, r4, #2
 80a41da:	2405      	movs	r4, #5
 80a41dc:	fbb6 f4f4 	udiv	r4, r6, r4
 80a41e0:	2a0a      	cmp	r2, #10
 80a41e2:	bf34      	ite	cc
 80a41e4:	2602      	movcc	r6, #2
 80a41e6:	f06f 0609 	mvncs.w	r6, #9
 80a41ea:	4416      	add	r6, r2
 80a41ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a41f0:	fb02 0505 	mla	r5, r2, r5, r0
 80a41f4:	1c5f      	adds	r7, r3, #1
 80a41f6:	2e01      	cmp	r6, #1
 80a41f8:	bf98      	it	ls
 80a41fa:	3501      	addls	r5, #1
 80a41fc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a4200:	eba7 0704 	sub.w	r7, r7, r4
 80a4204:	d302      	bcc.n	80a420c <gmtime_r+0xdc>
 80a4206:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a420a:	e014      	b.n	80a4236 <gmtime_r+0x106>
 80a420c:	0782      	lsls	r2, r0, #30
 80a420e:	d105      	bne.n	80a421c <gmtime_r+0xec>
 80a4210:	2464      	movs	r4, #100	; 0x64
 80a4212:	fbb0 f2f4 	udiv	r2, r0, r4
 80a4216:	fb04 0212 	mls	r2, r4, r2, r0
 80a421a:	b94a      	cbnz	r2, 80a4230 <gmtime_r+0x100>
 80a421c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4220:	fbb0 f4f2 	udiv	r4, r0, r2
 80a4224:	fb02 0014 	mls	r0, r2, r4, r0
 80a4228:	fab0 f280 	clz	r2, r0
 80a422c:	0952      	lsrs	r2, r2, #5
 80a422e:	e000      	b.n	80a4232 <gmtime_r+0x102>
 80a4230:	2201      	movs	r2, #1
 80a4232:	333b      	adds	r3, #59	; 0x3b
 80a4234:	441a      	add	r2, r3
 80a4236:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a423a:	2300      	movs	r3, #0
 80a423c:	61ca      	str	r2, [r1, #28]
 80a423e:	614d      	str	r5, [r1, #20]
 80a4240:	610e      	str	r6, [r1, #16]
 80a4242:	60cf      	str	r7, [r1, #12]
 80a4244:	620b      	str	r3, [r1, #32]
 80a4246:	4608      	mov	r0, r1
 80a4248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a424a:	bf00      	nop
 80a424c:	00015180 	.word	0x00015180
 80a4250:	00023ab1 	.word	0x00023ab1
 80a4254:	fffdc54f 	.word	0xfffdc54f
 80a4258:	00023ab0 	.word	0x00023ab0

080a425c <__env_lock>:
 80a425c:	4770      	bx	lr

080a425e <__env_unlock>:
 80a425e:	4770      	bx	lr

080a4260 <dynalib_user>:
 80a4260:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a4270:	0000 0000 3025 6432 253a 3230 0064 5f73     ....%02d:%02d.s_
 80a4280:	6f63 6f6c 0072 6e6f 745f 6d69 0065 666f     color.on_time.of
 80a4290:	5f66 6974 656d 6200 6972 6867 6e74 7365     f_time.brightnes
 80a42a0:	0073 7a74 0000 0000                         s.tz....

080a42a8 <CSWTCH.215>:
 80a42a8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a42b8:	0050 0000                                   P...

080a42bc <_ZTV8SPIClass>:
	...
 80a42c4:	1cc5 080a 1cc7 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a42d4:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a42e4:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a42f4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a4304:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a4314:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a4324:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a4334:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a4344:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a4354:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a4364:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a4374:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a4384:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a4394:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a43a4:	0072 6170 696e 0063 6c61 006c 2b25 3330     r.panic.all.%+03
 80a43b4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a43c4:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a43d4:	656d 0000                                   me..

080a43d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a43e0:	2259 080a 225f 080a 2275 080a 226b 080a     Y".._"..u"..k"..
 80a43f0:	225b 080a                                   ["..

080a43f4 <_ZTV9IPAddress>:
	...
 80a43fc:	27c7 080a 27b9 080a 27bb 080a               .'...'...'..

080a4408 <_ZTV9USBSerial>:
	...
 80a4410:	2881 080a 28c5 080a 289f 080a 1ea9 080a     .(...(...(......
 80a4420:	2899 080a 2883 080a 288b 080a 28bf 080a     .(...(...(...(..
 80a4430:	2893 080a 287d 080a                         .(..}(..

080a4438 <_ZTV11USARTSerial>:
	...
 80a4440:	29e9 080a 2a0d 080a 2a19 080a 1ea9 080a     .)...*...*......
 80a4450:	29f5 080a 2a01 080a 29fb 080a 2a07 080a     .)...*...)...*..
 80a4460:	29eb 080a 29ef 080a                         .)...)..

080a4468 <_ZTV7TwoWire>:
	...
 80a4470:	2ae3 080a 2b2d 080a 2b05 080a 2ae5 080a     .*..-+...+...*..
 80a4480:	2b0d 080a 2b15 080a 2b1d 080a 2b25 080a     .+...+...+..%+..

080a4490 <_ZTVN5spark9WiFiClassE>:
	...
 80a4498:	2bfb 080a 2bf1 080a 2be7 080a 2b65 080a     .+...+...+..e+..
 80a44a8:	1f53 080a 2bdb 080a 2bcf 080a 2bc7 080a     S....+...+...+..
 80a44b8:	2bbd 080a 2bb3 080a 2b6f 080a               .+...+..o+..

080a44c4 <_ZTVN5spark12NetworkClassE>:
	...
 80a44cc:	2c19 080a 2c23 080a 2c2d 080a 2c37 080a     .,..#,..-,..7,..
 80a44dc:	2c41 080a 2c4d 080a 2c59 080a 2c65 080a     A,..M,..Y,..e,..
 80a44ec:	2c6d 080a 2c77 080a 2c81 080a               m,..w,...,..

080a44f8 <_ctype_>:
 80a44f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a4508:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a4518:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a4528:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a4538:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a4548:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a4558:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a4568:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a4578:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a45fc <__sf_fake_stdin>:
	...

080a461c <__sf_fake_stdout>:
	...

080a463c <__sf_fake_stderr>:
	...
 80a465c:	0043 0000                                   C...

080a4660 <__month_lengths>:
 80a4660:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a4670:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4680:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4690:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a46a0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a46b0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a46c0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a46d0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a46e0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a46f0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a46fc <link_const_variable_data_end>:
 80a46fc:	080a049d 	.word	0x080a049d
 80a4700:	080a1855 	.word	0x080a1855
 80a4704:	080a1d05 	.word	0x080a1d05
 80a4708:	080a1f6d 	.word	0x080a1f6d
 80a470c:	080a20ad 	.word	0x080a20ad
 80a4710:	080a2105 	.word	0x080a2105
 80a4714:	080a2c05 	.word	0x080a2c05
 80a4718:	080a2cd1 	.word	0x080a2cd1
 80a471c:	080a2d81 	.word	0x080a2d81
 80a4720:	080a2ded 	.word	0x080a2ded
 80a4724:	080a2e6d 	.word	0x080a2e6d
 80a4728:	080a2ef1 	.word	0x080a2ef1
 80a472c:	080a2fb5 	.word	0x080a2fb5
 80a4730:	080a3079 	.word	0x080a3079

080a4734 <link_constructors_end>:
	...
